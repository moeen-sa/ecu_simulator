
freertos_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfd4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800e168  0800e168  0000f168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e750  0800e750  000101f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e750  0800e750  0000f750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e758  0800e758  000101f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e758  0800e758  0000f758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e75c  0800e75c  0000f75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800e760  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101f4  2**0
                  CONTENTS
 10 .bss          00004eb8  200001f4  200001f4  000101f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200050ac  200050ac  000101f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce3c  00000000  00000000  00010224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e76  00000000  00000000  0002d060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  00030ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012d3  00000000  00000000  00032738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f6b  00000000  00000000  00033a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000085de  00000000  00000000  00048976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00050f54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c4c  00000000  00000000  00050f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00058be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e14c 	.word	0x0800e14c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800e14c 	.word	0x0800e14c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fea:	f001 f8e3 	bl	80021b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fee:	f000 f8d1 	bl	8001194 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_StatusTypeDef RES =0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef UART_RES =0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73bb      	strb	r3, [r7, #14]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffa:	f000 fa41 	bl	8001480 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ffe:	f000 fa1f 	bl	8001440 <MX_DMA_Init>
  MX_CAN1_Init();
 8001002:	f000 f9bb 	bl	800137c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8001006:	f000 f9f1 	bl	80013ec <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800100a:	f000 f92d 	bl	8001268 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  cluster_filter.FilterActivation = CAN_FILTER_ENABLE;
 800100e:	4b46      	ldr	r3, [pc, #280]	@ (8001128 <main+0x144>)
 8001010:	2201      	movs	r2, #1
 8001012:	621a      	str	r2, [r3, #32]

  cluster_filter.FilterBank = 0;
 8001014:	4b44      	ldr	r3, [pc, #272]	@ (8001128 <main+0x144>)
 8001016:	2200      	movs	r2, #0
 8001018:	615a      	str	r2, [r3, #20]

  cluster_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800101a:	4b43      	ldr	r3, [pc, #268]	@ (8001128 <main+0x144>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]

  cluster_filter.FilterIdHigh = 0;
 8001020:	4b41      	ldr	r3, [pc, #260]	@ (8001128 <main+0x144>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]

  cluster_filter.FilterIdLow  =0 ;
 8001026:	4b40      	ldr	r3, [pc, #256]	@ (8001128 <main+0x144>)
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]

  cluster_filter.FilterMaskIdHigh = 0;
 800102c:	4b3e      	ldr	r3, [pc, #248]	@ (8001128 <main+0x144>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]

  cluster_filter.FilterMaskIdLow = 0;
 8001032:	4b3d      	ldr	r3, [pc, #244]	@ (8001128 <main+0x144>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]

  cluster_filter.FilterMode  =  CAN_FILTERMODE_IDMASK;
 8001038:	4b3b      	ldr	r3, [pc, #236]	@ (8001128 <main+0x144>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]

  cluster_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800103e:	4b3a      	ldr	r3, [pc, #232]	@ (8001128 <main+0x144>)
 8001040:	2201      	movs	r2, #1
 8001042:	61da      	str	r2, [r3, #28]

  RES = HAL_CAN_ConfigFilter(&hcan1, &cluster_filter);
 8001044:	4938      	ldr	r1, [pc, #224]	@ (8001128 <main+0x144>)
 8001046:	4839      	ldr	r0, [pc, #228]	@ (800112c <main+0x148>)
 8001048:	f001 fe28 	bl	8002c9c <HAL_CAN_ConfigFilter>
 800104c:	4603      	mov	r3, r0
 800104e:	73fb      	strb	r3, [r7, #15]

 RES = HAL_CAN_Start(&hcan1);
 8001050:	4836      	ldr	r0, [pc, #216]	@ (800112c <main+0x148>)
 8001052:	f001 ff03 	bl	8002e5c <HAL_CAN_Start>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]

 RES = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800105a:	2102      	movs	r1, #2
 800105c:	4833      	ldr	r0, [pc, #204]	@ (800112c <main+0x148>)
 800105e:	f002 f933 	bl	80032c8 <HAL_CAN_ActivateNotification>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
//*************************************************************
  engine_rpm_header.DLC =8;
 8001066:	4b32      	ldr	r3, [pc, #200]	@ (8001130 <main+0x14c>)
 8001068:	2208      	movs	r2, #8
 800106a:	611a      	str	r2, [r3, #16]
  engine_rpm_header.IDE = CAN_ID_EXT;
 800106c:	4b30      	ldr	r3, [pc, #192]	@ (8001130 <main+0x14c>)
 800106e:	2204      	movs	r2, #4
 8001070:	609a      	str	r2, [r3, #8]
  engine_rpm_header.ExtId = 0XCF00401;
 8001072:	4b2f      	ldr	r3, [pc, #188]	@ (8001130 <main+0x14c>)
 8001074:	4a2f      	ldr	r2, [pc, #188]	@ (8001134 <main+0x150>)
 8001076:	605a      	str	r2, [r3, #4]
  //**************************************************
  coolant_rpm_header.DLC =8;
 8001078:	4b2f      	ldr	r3, [pc, #188]	@ (8001138 <main+0x154>)
 800107a:	2208      	movs	r2, #8
 800107c:	611a      	str	r2, [r3, #16]
  coolant_rpm_header.IDE = CAN_ID_EXT;
 800107e:	4b2e      	ldr	r3, [pc, #184]	@ (8001138 <main+0x154>)
 8001080:	2204      	movs	r2, #4
 8001082:	609a      	str	r2, [r3, #8]
  coolant_rpm_header.ExtId = 0X18FE63FE;
 8001084:	4b2c      	ldr	r3, [pc, #176]	@ (8001138 <main+0x154>)
 8001086:	4a2d      	ldr	r2, [pc, #180]	@ (800113c <main+0x158>)
 8001088:	605a      	str	r2, [r3, #4]
  //***************************************************
  coolant_rpm_header.DLC =8;
 800108a:	4b2b      	ldr	r3, [pc, #172]	@ (8001138 <main+0x154>)
 800108c:	2208      	movs	r2, #8
 800108e:	611a      	str	r2, [r3, #16]
  coolant_rpm_header.IDE = CAN_ID_EXT;
 8001090:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <main+0x154>)
 8001092:	2204      	movs	r2, #4
 8001094:	609a      	str	r2, [r3, #8]
  coolant_rpm_header.ExtId = 0X18FEBDFE;
 8001096:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <main+0x154>)
 8001098:	4a29      	ldr	r2, [pc, #164]	@ (8001140 <main+0x15c>)
 800109a:	605a      	str	r2, [r3, #4]
  //***************************************************


  HAL_UART_Receive_IT(&huart1, (uint8_t *)get_data, 1);
 800109c:	2201      	movs	r2, #1
 800109e:	4929      	ldr	r1, [pc, #164]	@ (8001144 <main+0x160>)
 80010a0:	4829      	ldr	r0, [pc, #164]	@ (8001148 <main+0x164>)
 80010a2:	f004 fa20 	bl	80054e6 <HAL_UART_Receive_IT>





     memset(adc_res_string , 0 , 15);
 80010a6:	220f      	movs	r2, #15
 80010a8:	2100      	movs	r1, #0
 80010aa:	4828      	ldr	r0, [pc, #160]	@ (800114c <main+0x168>)
 80010ac:	f009 fc11 	bl	800a8d2 <memset>
     memset(adc_res , 0 , 5 * sizeof(uint16_t));
 80010b0:	220a      	movs	r2, #10
 80010b2:	2100      	movs	r1, #0
 80010b4:	4826      	ldr	r0, [pc, #152]	@ (8001150 <main+0x16c>)
 80010b6:	f009 fc0c 	bl	800a8d2 <memset>

  //  HAL_ADC_Start_DMA(&hadc2, &adc_res, 1);

     HAL_StatusTypeDef adc_hal_res ;

     uint32_t adc_channel_one = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]

     adc_hal_res =  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_res, 5);
 80010be:	2205      	movs	r2, #5
 80010c0:	4923      	ldr	r1, [pc, #140]	@ (8001150 <main+0x16c>)
 80010c2:	4824      	ldr	r0, [pc, #144]	@ (8001154 <main+0x170>)
 80010c4:	f001 f920 	bl	8002308 <HAL_ADC_Start_DMA>
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010cc:	f005 fe62 	bl	8006d94 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010d0:	4a21      	ldr	r2, [pc, #132]	@ (8001158 <main+0x174>)
 80010d2:	2100      	movs	r1, #0
 80010d4:	4821      	ldr	r0, [pc, #132]	@ (800115c <main+0x178>)
 80010d6:	f005 fea7 	bl	8006e28 <osThreadNew>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a20      	ldr	r2, [pc, #128]	@ (8001160 <main+0x17c>)
 80010de:	6013      	str	r3, [r2, #0]

  /* creation of lcd_drive */
  lcd_driveHandle = osThreadNew(display_data, NULL, &lcd_drive_attributes);
 80010e0:	4a20      	ldr	r2, [pc, #128]	@ (8001164 <main+0x180>)
 80010e2:	2100      	movs	r1, #0
 80010e4:	4820      	ldr	r0, [pc, #128]	@ (8001168 <main+0x184>)
 80010e6:	f005 fe9f 	bl	8006e28 <osThreadNew>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a1f      	ldr	r2, [pc, #124]	@ (800116c <main+0x188>)
 80010ee:	6013      	str	r3, [r2, #0]

  /* creation of can_control */
  can_controlHandle = osThreadNew(can_send_data, NULL, &can_control_attributes);
 80010f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001170 <main+0x18c>)
 80010f2:	2100      	movs	r1, #0
 80010f4:	481f      	ldr	r0, [pc, #124]	@ (8001174 <main+0x190>)
 80010f6:	f005 fe97 	bl	8006e28 <osThreadNew>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001178 <main+0x194>)
 80010fe:	6013      	str	r3, [r2, #0]

  /* creation of input */
  inputHandle = osThreadNew(get_input_data, NULL, &input_attributes);
 8001100:	4a1e      	ldr	r2, [pc, #120]	@ (800117c <main+0x198>)
 8001102:	2100      	movs	r1, #0
 8001104:	481e      	ldr	r0, [pc, #120]	@ (8001180 <main+0x19c>)
 8001106:	f005 fe8f 	bl	8006e28 <osThreadNew>
 800110a:	4603      	mov	r3, r0
 800110c:	4a1d      	ldr	r2, [pc, #116]	@ (8001184 <main+0x1a0>)
 800110e:	6013      	str	r3, [r2, #0]

  /* creation of calculate */
  calculateHandle = osThreadNew(make_engine_data, NULL, &calculate_attributes);
 8001110:	4a1d      	ldr	r2, [pc, #116]	@ (8001188 <main+0x1a4>)
 8001112:	2100      	movs	r1, #0
 8001114:	481d      	ldr	r0, [pc, #116]	@ (800118c <main+0x1a8>)
 8001116:	f005 fe87 	bl	8006e28 <osThreadNew>
 800111a:	4603      	mov	r3, r0
 800111c:	4a1c      	ldr	r2, [pc, #112]	@ (8001190 <main+0x1ac>)
 800111e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001120:	f005 fe5c 	bl	8006ddc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <main+0x140>
 8001128:	200004f8 	.word	0x200004f8
 800112c:	200002d8 	.word	0x200002d8
 8001130:	20000494 	.word	0x20000494
 8001134:	0cf00401 	.word	0x0cf00401
 8001138:	200004ac 	.word	0x200004ac
 800113c:	18fe63fe 	.word	0x18fe63fe
 8001140:	18febdfe 	.word	0x18febdfe
 8001144:	20000524 	.word	0x20000524
 8001148:	20000300 	.word	0x20000300
 800114c:	2000021c 	.word	0x2000021c
 8001150:	20000210 	.word	0x20000210
 8001154:	20000230 	.word	0x20000230
 8001158:	0800e1f4 	.word	0x0800e1f4
 800115c:	08001939 	.word	0x08001939
 8001160:	20000348 	.word	0x20000348
 8001164:	0800e218 	.word	0x0800e218
 8001168:	08001949 	.word	0x08001949
 800116c:	2000034c 	.word	0x2000034c
 8001170:	0800e23c 	.word	0x0800e23c
 8001174:	08001a01 	.word	0x08001a01
 8001178:	20000350 	.word	0x20000350
 800117c:	0800e260 	.word	0x0800e260
 8001180:	08001b35 	.word	0x08001b35
 8001184:	20000354 	.word	0x20000354
 8001188:	0800e284 	.word	0x0800e284
 800118c:	08001b49 	.word	0x08001b49
 8001190:	20000358 	.word	0x20000358

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b094      	sub	sp, #80	@ 0x50
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	2230      	movs	r2, #48	@ 0x30
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f009 fb95 	bl	800a8d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	4b28      	ldr	r3, [pc, #160]	@ (8001260 <SystemClock_Config+0xcc>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c0:	4a27      	ldr	r2, [pc, #156]	@ (8001260 <SystemClock_Config+0xcc>)
 80011c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c8:	4b25      	ldr	r3, [pc, #148]	@ (8001260 <SystemClock_Config+0xcc>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	4b22      	ldr	r3, [pc, #136]	@ (8001264 <SystemClock_Config+0xd0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a21      	ldr	r2, [pc, #132]	@ (8001264 <SystemClock_Config+0xd0>)
 80011de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <SystemClock_Config+0xd0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f0:	2301      	movs	r3, #1
 80011f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fa:	2302      	movs	r3, #2
 80011fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001202:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001204:	2319      	movs	r3, #25
 8001206:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001208:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800120c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800120e:	2302      	movs	r3, #2
 8001210:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001212:	2304      	movs	r3, #4
 8001214:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	4618      	mov	r0, r3
 800121c:	f003 f95c 	bl	80044d8 <HAL_RCC_OscConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001226:	f000 fcb8 	bl	8001b9a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122a:	230f      	movs	r3, #15
 800122c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122e:	2302      	movs	r3, #2
 8001230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001236:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800123a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800123c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001240:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	2105      	movs	r1, #5
 8001248:	4618      	mov	r0, r3
 800124a:	f003 fbbd 	bl	80049c8 <HAL_RCC_ClockConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001254:	f000 fca1 	bl	8001b9a <Error_Handler>
  }
}
 8001258:	bf00      	nop
 800125a:	3750      	adds	r7, #80	@ 0x50
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	40007000 	.word	0x40007000

08001268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800126e:	463b      	mov	r3, r7
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800127a:	4b3d      	ldr	r3, [pc, #244]	@ (8001370 <MX_ADC1_Init+0x108>)
 800127c:	4a3d      	ldr	r2, [pc, #244]	@ (8001374 <MX_ADC1_Init+0x10c>)
 800127e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001280:	4b3b      	ldr	r3, [pc, #236]	@ (8001370 <MX_ADC1_Init+0x108>)
 8001282:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001286:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001288:	4b39      	ldr	r3, [pc, #228]	@ (8001370 <MX_ADC1_Init+0x108>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800128e:	4b38      	ldr	r3, [pc, #224]	@ (8001370 <MX_ADC1_Init+0x108>)
 8001290:	2201      	movs	r2, #1
 8001292:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001294:	4b36      	ldr	r3, [pc, #216]	@ (8001370 <MX_ADC1_Init+0x108>)
 8001296:	2201      	movs	r2, #1
 8001298:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800129a:	4b35      	ldr	r3, [pc, #212]	@ (8001370 <MX_ADC1_Init+0x108>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a2:	4b33      	ldr	r3, [pc, #204]	@ (8001370 <MX_ADC1_Init+0x108>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a8:	4b31      	ldr	r3, [pc, #196]	@ (8001370 <MX_ADC1_Init+0x108>)
 80012aa:	4a33      	ldr	r2, [pc, #204]	@ (8001378 <MX_ADC1_Init+0x110>)
 80012ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ae:	4b30      	ldr	r3, [pc, #192]	@ (8001370 <MX_ADC1_Init+0x108>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80012b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001370 <MX_ADC1_Init+0x108>)
 80012b6:	2205      	movs	r2, #5
 80012b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001370 <MX_ADC1_Init+0x108>)
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001370 <MX_ADC1_Init+0x108>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c8:	4829      	ldr	r0, [pc, #164]	@ (8001370 <MX_ADC1_Init+0x108>)
 80012ca:	f000 ffd9 	bl	8002280 <HAL_ADC_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012d4:	f000 fc61 	bl	8001b9a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012d8:	2300      	movs	r3, #0
 80012da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80012e0:	2307      	movs	r3, #7
 80012e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	4821      	ldr	r0, [pc, #132]	@ (8001370 <MX_ADC1_Init+0x108>)
 80012ea:	f001 f93b 	bl	8002564 <HAL_ADC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012f4:	f000 fc51 	bl	8001b9a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	4619      	mov	r1, r3
 8001304:	481a      	ldr	r0, [pc, #104]	@ (8001370 <MX_ADC1_Init+0x108>)
 8001306:	f001 f92d 	bl	8002564 <HAL_ADC_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001310:	f000 fc43 	bl	8001b9a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001314:	2302      	movs	r3, #2
 8001316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001318:	2303      	movs	r3, #3
 800131a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	4619      	mov	r1, r3
 8001320:	4813      	ldr	r0, [pc, #76]	@ (8001370 <MX_ADC1_Init+0x108>)
 8001322:	f001 f91f 	bl	8002564 <HAL_ADC_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800132c:	f000 fc35 	bl	8001b9a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001330:	2303      	movs	r3, #3
 8001332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001334:	2304      	movs	r3, #4
 8001336:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	4619      	mov	r1, r3
 800133c:	480c      	ldr	r0, [pc, #48]	@ (8001370 <MX_ADC1_Init+0x108>)
 800133e:	f001 f911 	bl	8002564 <HAL_ADC_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001348:	f000 fc27 	bl	8001b9a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800134c:	2304      	movs	r3, #4
 800134e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001350:	2305      	movs	r3, #5
 8001352:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_ADC1_Init+0x108>)
 800135a:	f001 f903 	bl	8002564 <HAL_ADC_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001364:	f000 fc19 	bl	8001b9a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000230 	.word	0x20000230
 8001374:	40012000 	.word	0x40012000
 8001378:	0f000001 	.word	0x0f000001

0800137c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <MX_CAN1_Init+0x68>)
 8001382:	4a19      	ldr	r2, [pc, #100]	@ (80013e8 <MX_CAN1_Init+0x6c>)
 8001384:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8001386:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <MX_CAN1_Init+0x68>)
 8001388:	220c      	movs	r2, #12
 800138a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <MX_CAN1_Init+0x68>)
 800138e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001392:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001394:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <MX_CAN1_Init+0x68>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800139a:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <MX_CAN1_Init+0x68>)
 800139c:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80013a0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80013a2:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <MX_CAN1_Init+0x68>)
 80013a4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80013a8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_CAN1_Init+0x68>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_CAN1_Init+0x68>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <MX_CAN1_Init+0x68>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_CAN1_Init+0x68>)
 80013be:	2200      	movs	r2, #0
 80013c0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <MX_CAN1_Init+0x68>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_CAN1_Init+0x68>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_CAN1_Init+0x68>)
 80013d0:	f001 fb68 	bl	8002aa4 <HAL_CAN_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80013da:	f000 fbde 	bl	8001b9a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200002d8 	.word	0x200002d8
 80013e8:	40006400 	.word	0x40006400

080013ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	@ (800143c <MX_USART1_UART_Init+0x50>)
 80013f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 80013f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800140a:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001410:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 8001412:	220c      	movs	r2, #12
 8001414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001422:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 8001424:	f003 ff84 	bl	8005330 <HAL_UART_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800142e:	f000 fbb4 	bl	8001b9a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000300 	.word	0x20000300
 800143c:	40011000 	.word	0x40011000

08001440 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_DMA_Init+0x3c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a0b      	ldr	r2, [pc, #44]	@ (800147c <MX_DMA_Init+0x3c>)
 8001450:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_DMA_Init+0x3c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2105      	movs	r1, #5
 8001466:	2038      	movs	r0, #56	@ 0x38
 8001468:	f002 fa3c 	bl	80038e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800146c:	2038      	movs	r0, #56	@ 0x38
 800146e:	f002 fa55 	bl	800391c <HAL_NVIC_EnableIRQ>

}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	@ 0x28
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b2d      	ldr	r3, [pc, #180]	@ (8001550 <MX_GPIO_Init+0xd0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a2c      	ldr	r2, [pc, #176]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a25      	ldr	r2, [pc, #148]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b1c      	ldr	r3, [pc, #112]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a17      	ldr	r2, [pc, #92]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014f4:	f043 0308 	orr.w	r3, r3, #8
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001506:	2200      	movs	r2, #0
 8001508:	f64f 4180 	movw	r1, #64640	@ 0xfc80
 800150c:	4811      	ldr	r0, [pc, #68]	@ (8001554 <MX_GPIO_Init+0xd4>)
 800150e:	f002 ffc9 	bl	80044a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : inc_rpm_Pin dec_rpm_Pin */
  GPIO_InitStruct.Pin = inc_rpm_Pin|dec_rpm_Pin;
 8001512:	2330      	movs	r3, #48	@ 0x30
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	@ (8001558 <MX_GPIO_Init+0xd8>)
 8001526:	f002 fe09 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800152a:	f64f 4380 	movw	r3, #64640	@ 0xfc80
 800152e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4804      	ldr	r0, [pc, #16]	@ (8001554 <MX_GPIO_Init+0xd4>)
 8001544:	f002 fdfa 	bl	800413c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800
 8001554:	40020c00 	.word	0x40020c00
 8001558:	40021000 	.word	0x40021000

0800155c <handle_rpm>:

/* USER CODE BEGIN 4 */

void handle_rpm(){
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0

	 handle_rpm_increase();
 8001560:	f000 f804 	bl	800156c <handle_rpm_increase>
	 handle_rpm_decrease();
 8001564:	f000 f824 	bl	80015b0 <handle_rpm_decrease>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <handle_rpm_increase>:

void handle_rpm_increase(){
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0


    if(HAL_GPIO_ReadPin(GPIOE, inc_rpm_Pin) == 0){
 8001570:	2110      	movs	r1, #16
 8001572:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <handle_rpm_increase+0x3c>)
 8001574:	f002 ff7e 	bl	8004474 <HAL_GPIO_ReadPin>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d108      	bne.n	8001590 <handle_rpm_increase+0x24>
     HAL_Delay(200);
 800157e:	20c8      	movs	r0, #200	@ 0xc8
 8001580:	f000 fe5a 	bl	8002238 <HAL_Delay>
     input_rpm += 100;
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <handle_rpm_increase+0x40>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	3364      	adds	r3, #100	@ 0x64
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <handle_rpm_increase+0x40>)
 800158e:	801a      	strh	r2, [r3, #0]
    }
    if(input_rpm>=2500)
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <handle_rpm_increase+0x40>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001598:	4293      	cmp	r3, r2
 800159a:	d903      	bls.n	80015a4 <handle_rpm_increase+0x38>
   	 input_rpm = 2500;
 800159c:	4b03      	ldr	r3, [pc, #12]	@ (80015ac <handle_rpm_increase+0x40>)
 800159e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80015a2:	801a      	strh	r2, [r3, #0]

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000
 80015ac:	20000000 	.word	0x20000000

080015b0 <handle_rpm_decrease>:
void handle_rpm_decrease(){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0


    if(HAL_GPIO_ReadPin(GPIOE, dec_rpm_Pin) == 0){
 80015b4:	2120      	movs	r1, #32
 80015b6:	480d      	ldr	r0, [pc, #52]	@ (80015ec <handle_rpm_decrease+0x3c>)
 80015b8:	f002 ff5c 	bl	8004474 <HAL_GPIO_ReadPin>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d108      	bne.n	80015d4 <handle_rpm_decrease+0x24>
     HAL_Delay(200);
 80015c2:	20c8      	movs	r0, #200	@ 0xc8
 80015c4:	f000 fe38 	bl	8002238 <HAL_Delay>
     input_rpm -= 100;
 80015c8:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <handle_rpm_decrease+0x40>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	3b64      	subs	r3, #100	@ 0x64
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <handle_rpm_decrease+0x40>)
 80015d2:	801a      	strh	r2, [r3, #0]
    }
    if(input_rpm<=600)
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <handle_rpm_decrease+0x40>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80015dc:	d803      	bhi.n	80015e6 <handle_rpm_decrease+0x36>
   	 input_rpm = 600;
 80015de:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <handle_rpm_decrease+0x40>)
 80015e0:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80015e4:	801a      	strh	r2, [r3, #0]

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	20000000 	.word	0x20000000

080015f4 <make_coolant_value>:

uint16_t make_coolant_value(float _input_){
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	ed87 0a01 	vstr	s0, [r7, #4]

	if(_input_ >= coolant_level1_low && _input_ <= coolant_level1_high)
 80015fe:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80016d4 <make_coolant_value+0xe0>
 8001602:	edd7 7a01 	vldr	s15, [r7, #4]
 8001606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800160a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160e:	db0a      	blt.n	8001626 <make_coolant_value+0x32>
 8001610:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001614:	edd7 7a01 	vldr	s15, [r7, #4]
 8001618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800161c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001620:	d801      	bhi.n	8001626 <make_coolant_value+0x32>
		return 60;
 8001622:	233c      	movs	r3, #60	@ 0x3c
 8001624:	e050      	b.n	80016c8 <make_coolant_value+0xd4>

	if(_input_ >= coolant_level2_low && _input_ <= coolant_level3_high)
 8001626:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80016d8 <make_coolant_value+0xe4>
 800162a:	edd7 7a01 	vldr	s15, [r7, #4]
 800162e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	db0a      	blt.n	800164e <make_coolant_value+0x5a>
 8001638:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80016dc <make_coolant_value+0xe8>
 800163c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001648:	d801      	bhi.n	800164e <make_coolant_value+0x5a>
			return 70;
 800164a:	2346      	movs	r3, #70	@ 0x46
 800164c:	e03c      	b.n	80016c8 <make_coolant_value+0xd4>

	if(_input_ >= coolant_level3_low && _input_ <= coolant_level3_high)
 800164e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80016e0 <make_coolant_value+0xec>
 8001652:	edd7 7a01 	vldr	s15, [r7, #4]
 8001656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800165a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165e:	db0a      	blt.n	8001676 <make_coolant_value+0x82>
 8001660:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80016dc <make_coolant_value+0xe8>
 8001664:	edd7 7a01 	vldr	s15, [r7, #4]
 8001668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	d801      	bhi.n	8001676 <make_coolant_value+0x82>
			return 80;
 8001672:	2350      	movs	r3, #80	@ 0x50
 8001674:	e028      	b.n	80016c8 <make_coolant_value+0xd4>

	if(_input_ >= coolant_level4_low && _input_ <= coolant_level4_high)
 8001676:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80016e4 <make_coolant_value+0xf0>
 800167a:	edd7 7a01 	vldr	s15, [r7, #4]
 800167e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	db0a      	blt.n	800169e <make_coolant_value+0xaa>
 8001688:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80016e8 <make_coolant_value+0xf4>
 800168c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	d801      	bhi.n	800169e <make_coolant_value+0xaa>
				return 90;
 800169a:	235a      	movs	r3, #90	@ 0x5a
 800169c:	e014      	b.n	80016c8 <make_coolant_value+0xd4>

	if(_input_ >= coolant_level5_low && _input_ <= coolant_level5_high)
 800169e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80016ec <make_coolant_value+0xf8>
 80016a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ae:	db0a      	blt.n	80016c6 <make_coolant_value+0xd2>
 80016b0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80016f0 <make_coolant_value+0xfc>
 80016b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c0:	d801      	bhi.n	80016c6 <make_coolant_value+0xd2>
					return 100;
 80016c2:	2364      	movs	r3, #100	@ 0x64
 80016c4:	e000      	b.n	80016c8 <make_coolant_value+0xd4>

	return 0;
 80016c6:	2300      	movs	r3, #0


}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	3e99999a 	.word	0x3e99999a
 80016d8:	3f19999a 	.word	0x3f19999a
 80016dc:	40066666 	.word	0x40066666
 80016e0:	3fcccccd 	.word	0x3fcccccd
 80016e4:	400ccccd 	.word	0x400ccccd
 80016e8:	402ccccd 	.word	0x402ccccd
 80016ec:	40333333 	.word	0x40333333
 80016f0:	40533333 	.word	0x40533333
 80016f4:	00000000 	.word	0x00000000

080016f8 <handle_coolant>:

void handle_coolant(){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0


	 coolant_value = make_coolant_value((float)((adc_res[0] * 3.3) /4095));
 80016fc:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <handle_coolant+0x60>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff0f 	bl	8000524 <__aeabi_i2d>
 8001706:	a310      	add	r3, pc, #64	@ (adr r3, 8001748 <handle_coolant+0x50>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7fe ff74 	bl	80005f8 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	a30d      	add	r3, pc, #52	@ (adr r3, 8001750 <handle_coolant+0x58>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7ff f895 	bl	800084c <__aeabi_ddiv>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff fa5d 	bl	8000be8 <__aeabi_d2f>
 800172e:	4603      	mov	r3, r0
 8001730:	ee00 3a10 	vmov	s0, r3
 8001734:	f7ff ff5e 	bl	80015f4 <make_coolant_value>
 8001738:	4603      	mov	r3, r0
 800173a:	461a      	mov	r2, r3
 800173c:	4b07      	ldr	r3, [pc, #28]	@ (800175c <handle_coolant+0x64>)
 800173e:	801a      	strh	r2, [r3, #0]

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	f3af 8000 	nop.w
 8001748:	66666666 	.word	0x66666666
 800174c:	400a6666 	.word	0x400a6666
 8001750:	00000000 	.word	0x00000000
 8001754:	40affe00 	.word	0x40affe00
 8001758:	20000210 	.word	0x20000210
 800175c:	2000022c 	.word	0x2000022c

08001760 <make_rpm_can_data>:

void make_rpm_can_data(uint16_t _rpm){
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]

	_rpm *=8; //based on j1939, factor is divied by 8, so we multiple in 8(https://www.csselectronics.com/pages/j1939-explained-simple-intro-tutorial)
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	80fb      	strh	r3, [r7, #6]
	uint8_t rpm_high_byte = (_rpm >> 8) & 0xFF; //convert 16bit to two  bit numbers
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	b29b      	uxth	r3, r3
 8001776:	73fb      	strb	r3, [r7, #15]
	uint8_t rpm_low_byte = _rpm & 0xFF;
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	73bb      	strb	r3, [r7, #14]

	rpm_data[3] = rpm_low_byte;
 800177c:	4a05      	ldr	r2, [pc, #20]	@ (8001794 <make_rpm_can_data+0x34>)
 800177e:	7bbb      	ldrb	r3, [r7, #14]
 8001780:	70d3      	strb	r3, [r2, #3]
	rpm_data[4] = rpm_high_byte;
 8001782:	4a04      	ldr	r2, [pc, #16]	@ (8001794 <make_rpm_can_data+0x34>)
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	7113      	strb	r3, [r2, #4]


}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	2000000c 	.word	0x2000000c

08001798 <make_coolant_can_data>:

 void make_coolant_can_data(uint16_t _coolant_){
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	80fb      	strh	r3, [r7, #6]

	 _coolant_ -=40; //based on j1939 dbc: https://github.com/nberlette/canbus/blob/main/dbc/j1939.dbc
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	3b28      	subs	r3, #40	@ 0x28
 80017a6:	80fb      	strh	r3, [r7, #6]
  uint8_t coolant_high_byte = (_coolant_ >> 8) & 0xFF; //convert 16bit to two  bit numbers
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	73fb      	strb	r3, [r7, #15]
  uint8_t coolant_low_byte = _coolant_ & 0xFF;
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	73bb      	strb	r3, [r7, #14]

  coolant_data[2] = coolant_low_byte;
 80017b4:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <make_coolant_can_data+0x34>)
 80017b6:	7bbb      	ldrb	r3, [r7, #14]
 80017b8:	7093      	strb	r3, [r2, #2]
  coolant_data[3] = coolant_high_byte;
 80017ba:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <make_coolant_can_data+0x34>)
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	70d3      	strb	r3, [r2, #3]

 }
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	20000004 	.word	0x20000004

080017d0 <make_fan_can_data>:

 void make_fan_can_data(uint16_t _fan_){
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	80fb      	strh	r3, [r7, #6]

	  if(_fan_ <70) {//fan off
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	2b45      	cmp	r3, #69	@ 0x45
 80017de:	d805      	bhi.n	80017ec <make_fan_can_data+0x1c>

		_fan_ = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	80fb      	strh	r3, [r7, #6]

		fan_display_status = 0;
 80017e4:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <make_fan_can_data+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
 80017ea:	e015      	b.n	8001818 <make_fan_can_data+0x48>

	  }

	  else if(_fan_>=70 && _fan_<=90){  //low fan start
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	2b45      	cmp	r3, #69	@ 0x45
 80017f0:	d909      	bls.n	8001806 <make_fan_can_data+0x36>
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	2b5a      	cmp	r3, #90	@ 0x5a
 80017f6:	d806      	bhi.n	8001806 <make_fan_can_data+0x36>

		_fan_ = 600;
 80017f8:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80017fc:	80fb      	strh	r3, [r7, #6]

		fan_display_status = 1;
 80017fe:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <make_fan_can_data+0x74>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
 8001804:	e008      	b.n	8001818 <make_fan_can_data+0x48>

	  }

	  else if( _fan_>90){ //high fan start
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	2b5a      	cmp	r3, #90	@ 0x5a
 800180a:	d905      	bls.n	8001818 <make_fan_can_data+0x48>

		_fan_ = 1500;
 800180c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001810:	80fb      	strh	r3, [r7, #6]

		fan_display_status = 2;
 8001812:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <make_fan_can_data+0x74>)
 8001814:	2202      	movs	r2, #2
 8001816:	701a      	strb	r2, [r3, #0]

	  }



	    _fan_ *=8; //based on j1939, factor is divied by 8, so we multiple in 8(https://www.csselectronics.com/pages/j1939-explained-simple-intro-tutorial)
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	80fb      	strh	r3, [r7, #6]
	 	uint8_t fan_rpm_high_byte = (_fan_ >> 8) & 0xFF; //convert 16bit to two  bit numbers
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	b29b      	uxth	r3, r3
 8001824:	73fb      	strb	r3, [r7, #15]
	 	uint8_t fan_rpm_low_byte = _fan_ & 0xFF;
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	73bb      	strb	r3, [r7, #14]

	 	fan_data[2] = fan_rpm_low_byte;
 800182a:	4a07      	ldr	r2, [pc, #28]	@ (8001848 <make_fan_can_data+0x78>)
 800182c:	7bbb      	ldrb	r3, [r7, #14]
 800182e:	7093      	strb	r3, [r2, #2]
	 	fan_data[3] = fan_rpm_high_byte;
 8001830:	4a05      	ldr	r2, [pc, #20]	@ (8001848 <make_fan_can_data+0x78>)
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	70d3      	strb	r3, [r2, #3]


 }
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	2000022e 	.word	0x2000022e
 8001848:	20000014 	.word	0x20000014

0800184c <write_fan_status>:

void  write_fan_status(){
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

	 LCD16X2_Set_Cursor(MyLCD, 1, 14);
 8001850:	220e      	movs	r2, #14
 8001852:	2101      	movs	r1, #1
 8001854:	2000      	movs	r0, #0
 8001856:	f004 ff87 	bl	8006768 <LCD16X2_Set_Cursor>

	  if(fan_display_status == 0)
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <write_fan_status+0x48>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d104      	bne.n	800186c <write_fan_status+0x20>
	  LCD16X2_Write_String(MyLCD, "OFF");
 8001862:	490d      	ldr	r1, [pc, #52]	@ (8001898 <write_fan_status+0x4c>)
 8001864:	2000      	movs	r0, #0
 8001866:	f005 fa31 	bl	8006ccc <LCD16X2_Write_String>
	  else if(fan_display_status == 2)
	 		  LCD16X2_Write_String(MyLCD, "HIGH");



}
 800186a:	e010      	b.n	800188e <write_fan_status+0x42>
	  else if(fan_display_status == 1)
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <write_fan_status+0x48>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d104      	bne.n	800187e <write_fan_status+0x32>
		  LCD16X2_Write_String(MyLCD, "LOW");
 8001874:	4909      	ldr	r1, [pc, #36]	@ (800189c <write_fan_status+0x50>)
 8001876:	2000      	movs	r0, #0
 8001878:	f005 fa28 	bl	8006ccc <LCD16X2_Write_String>
}
 800187c:	e007      	b.n	800188e <write_fan_status+0x42>
	  else if(fan_display_status == 2)
 800187e:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <write_fan_status+0x48>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d103      	bne.n	800188e <write_fan_status+0x42>
	 		  LCD16X2_Write_String(MyLCD, "HIGH");
 8001886:	4906      	ldr	r1, [pc, #24]	@ (80018a0 <write_fan_status+0x54>)
 8001888:	2000      	movs	r0, #0
 800188a:	f005 fa1f 	bl	8006ccc <LCD16X2_Write_String>
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	2000022e 	.word	0x2000022e
 8001898:	0800e1a0 	.word	0x0800e1a0
 800189c:	0800e1a4 	.word	0x0800e1a4
 80018a0:	0800e1a8 	.word	0x0800e1a8

080018a4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]



   if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rx_data) == HAL_OK)
 80018ac:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80018ae:	4a08      	ldr	r2, [pc, #32]	@ (80018d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80018b0:	2100      	movs	r1, #0
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f001 fbe6 	bl	8003084 <HAL_CAN_GetRxMessage>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d102      	bne.n	80018c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
	   get_message = 1;
 80018be:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	701a      	strb	r2, [r3, #0]

}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	2000035c 	.word	0x2000035c
 80018d0:	200004dc 	.word	0x200004dc
 80018d4:	2000045d 	.word	0x2000045d

080018d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001924 <HAL_UART_RxCpltCallback+0x4c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d118      	bne.n	800191c <HAL_UART_RxCpltCallback+0x44>
	{

	UART_BUF_INDEX++;
 80018ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <HAL_UART_RxCpltCallback+0x50>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <HAL_UART_RxCpltCallback+0x50>)
 80018f4:	701a      	strb	r2, [r3, #0]

	if(UART_BUF_INDEX>=  RX_BUFF_SIZE)
 80018f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <HAL_UART_RxCpltCallback+0x50>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2bf7      	cmp	r3, #247	@ 0xf7
 80018fc:	d902      	bls.n	8001904 <HAL_UART_RxCpltCallback+0x2c>
		UART_BUF_INDEX = 0;
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_UART_RxCpltCallback+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]

	UART_RX_BUFF[UART_BUF_INDEX] = (char)get_data[0];
 8001904:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <HAL_UART_RxCpltCallback+0x50>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b08      	ldr	r3, [pc, #32]	@ (800192c <HAL_UART_RxCpltCallback+0x54>)
 800190c:	7819      	ldrb	r1, [r3, #0]
 800190e:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <HAL_UART_RxCpltCallback+0x58>)
 8001910:	5499      	strb	r1, [r3, r2]

	HAL_UART_Receive_IT(&huart1, get_data, 1);
 8001912:	2201      	movs	r2, #1
 8001914:	4905      	ldr	r1, [pc, #20]	@ (800192c <HAL_UART_RxCpltCallback+0x54>)
 8001916:	4807      	ldr	r0, [pc, #28]	@ (8001934 <HAL_UART_RxCpltCallback+0x5c>)
 8001918:	f003 fde5 	bl	80054e6 <HAL_UART_Receive_IT>

	}
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40011000 	.word	0x40011000
 8001928:	2000045c 	.word	0x2000045c
 800192c:	20000524 	.word	0x20000524
 8001930:	20000364 	.word	0x20000364
 8001934:	20000300 	.word	0x20000300

08001938 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001940:	2001      	movs	r0, #1
 8001942:	f005 fb03 	bl	8006f4c <osDelay>
 8001946:	e7fb      	b.n	8001940 <StartDefaultTask+0x8>

08001948 <display_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_display_data */
void display_data(void *argument)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN display_data */
	 LCD16X2_Init(MyLCD);
 8001950:	2000      	movs	r0, #0
 8001952:	f004 ff49 	bl	80067e8 <LCD16X2_Init>
	 LCD16X2_Clear(MyLCD);
 8001956:	2000      	movs	r0, #0
 8001958:	f004 fec6 	bl	80066e8 <LCD16X2_Clear>
  /* Infinite loop */
  for(;;)
  {
	  	  LCD16X2_Set_Cursor(MyLCD, 1, 1);
 800195c:	2201      	movs	r2, #1
 800195e:	2101      	movs	r1, #1
 8001960:	2000      	movs	r0, #0
 8001962:	f004 ff01 	bl	8006768 <LCD16X2_Set_Cursor>
	  	  LCD16X2_Write_String(MyLCD, "RPM:");
 8001966:	4920      	ldr	r1, [pc, #128]	@ (80019e8 <display_data+0xa0>)
 8001968:	2000      	movs	r0, #0
 800196a:	f005 f9af 	bl	8006ccc <LCD16X2_Write_String>

	  	  LCD16X2_Set_Cursor(MyLCD, 2, 1);
 800196e:	2201      	movs	r2, #1
 8001970:	2102      	movs	r1, #2
 8001972:	2000      	movs	r0, #0
 8001974:	f004 fef8 	bl	8006768 <LCD16X2_Set_Cursor>
	  	  LCD16X2_Write_String(MyLCD, "Coolant:");
 8001978:	491c      	ldr	r1, [pc, #112]	@ (80019ec <display_data+0xa4>)
 800197a:	2000      	movs	r0, #0
 800197c:	f005 f9a6 	bl	8006ccc <LCD16X2_Write_String>

	  	 LCD16X2_Set_Cursor(MyLCD, 1, 10);
 8001980:	220a      	movs	r2, #10
 8001982:	2101      	movs	r1, #1
 8001984:	2000      	movs	r0, #0
 8001986:	f004 feef 	bl	8006768 <LCD16X2_Set_Cursor>
	     LCD16X2_Write_String(MyLCD, "FAN:");
 800198a:	4919      	ldr	r1, [pc, #100]	@ (80019f0 <display_data+0xa8>)
 800198c:	2000      	movs	r0, #0
 800198e:	f005 f99d 	bl	8006ccc <LCD16X2_Write_String>

	  	  LCD16X2_Set_Cursor(MyLCD, 1, 5);
 8001992:	2205      	movs	r2, #5
 8001994:	2101      	movs	r1, #1
 8001996:	2000      	movs	r0, #0
 8001998:	f004 fee6 	bl	8006768 <LCD16X2_Set_Cursor>
	  	  itoa(input_rpm , adc_res_string , 10);
 800199c:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <display_data+0xac>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	220a      	movs	r2, #10
 80019a2:	4915      	ldr	r1, [pc, #84]	@ (80019f8 <display_data+0xb0>)
 80019a4:	4618      	mov	r0, r3
 80019a6:	f007 ffbf 	bl	8009928 <itoa>
	  	  LCD16X2_Write_String(MyLCD, adc_res_string);
 80019aa:	4913      	ldr	r1, [pc, #76]	@ (80019f8 <display_data+0xb0>)
 80019ac:	2000      	movs	r0, #0
 80019ae:	f005 f98d 	bl	8006ccc <LCD16X2_Write_String>

	  	  LCD16X2_Set_Cursor(MyLCD, 2, 10);
 80019b2:	220a      	movs	r2, #10
 80019b4:	2102      	movs	r1, #2
 80019b6:	2000      	movs	r0, #0
 80019b8:	f004 fed6 	bl	8006768 <LCD16X2_Set_Cursor>
	  	  itoa(coolant_value  , adc_res_string , 10);
 80019bc:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <display_data+0xb4>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	220a      	movs	r2, #10
 80019c2:	490d      	ldr	r1, [pc, #52]	@ (80019f8 <display_data+0xb0>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f007 ffaf 	bl	8009928 <itoa>
	  	 // snprintf(adc_res_string, sizeof(adc_res_string), "%.1f", (float)((coolant_value * 3.3) /4095));
	  	  LCD16X2_Write_String(MyLCD, adc_res_string);
 80019ca:	490b      	ldr	r1, [pc, #44]	@ (80019f8 <display_data+0xb0>)
 80019cc:	2000      	movs	r0, #0
 80019ce:	f005 f97d 	bl	8006ccc <LCD16X2_Write_String>

	  	  write_fan_status();
 80019d2:	f7ff ff3b 	bl	800184c <write_fan_status>



	  	  HAL_Delay(500);
 80019d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019da:	f000 fc2d 	bl	8002238 <HAL_Delay>

	  	  LCD16X2_Clear(MyLCD);
 80019de:	2000      	movs	r0, #0
 80019e0:	f004 fe82 	bl	80066e8 <LCD16X2_Clear>
	  	  LCD16X2_Set_Cursor(MyLCD, 1, 1);
 80019e4:	bf00      	nop
 80019e6:	e7b9      	b.n	800195c <display_data+0x14>
 80019e8:	0800e1b0 	.word	0x0800e1b0
 80019ec:	0800e1b8 	.word	0x0800e1b8
 80019f0:	0800e1c4 	.word	0x0800e1c4
 80019f4:	20000000 	.word	0x20000000
 80019f8:	2000021c 	.word	0x2000021c
 80019fc:	2000022c 	.word	0x2000022c

08001a00 <can_send_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_can_send_data */
void can_send_data(void *argument)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN can_send_data */
  /* Infinite loop */
  for(;;)
  {
	  /*RES = */HAL_CAN_AddTxMessage(&hcan1, &engine_rpm_header, rpm_data, &tx_mail_box);
 8001a08:	4b39      	ldr	r3, [pc, #228]	@ (8001af0 <can_send_data+0xf0>)
 8001a0a:	4a3a      	ldr	r2, [pc, #232]	@ (8001af4 <can_send_data+0xf4>)
 8001a0c:	493a      	ldr	r1, [pc, #232]	@ (8001af8 <can_send_data+0xf8>)
 8001a0e:	483b      	ldr	r0, [pc, #236]	@ (8001afc <can_send_data+0xfc>)
 8001a10:	f001 fa68 	bl	8002ee4 <HAL_CAN_AddTxMessage>
		     HAL_Delay(50);
 8001a14:	2032      	movs	r0, #50	@ 0x32
 8001a16:	f000 fc0f 	bl	8002238 <HAL_Delay>

		     HAL_CAN_AddTxMessage(&hcan1, &coolant_rpm_header, coolant_data, &tx_mail_box);
 8001a1a:	4b35      	ldr	r3, [pc, #212]	@ (8001af0 <can_send_data+0xf0>)
 8001a1c:	4a38      	ldr	r2, [pc, #224]	@ (8001b00 <can_send_data+0x100>)
 8001a1e:	4939      	ldr	r1, [pc, #228]	@ (8001b04 <can_send_data+0x104>)
 8001a20:	4836      	ldr	r0, [pc, #216]	@ (8001afc <can_send_data+0xfc>)
 8001a22:	f001 fa5f 	bl	8002ee4 <HAL_CAN_AddTxMessage>
		     HAL_Delay(50);
 8001a26:	2032      	movs	r0, #50	@ 0x32
 8001a28:	f000 fc06 	bl	8002238 <HAL_Delay>


		     HAL_CAN_AddTxMessage(&hcan1, &fan_rpm_header, fan_data, &tx_mail_box);
 8001a2c:	4b30      	ldr	r3, [pc, #192]	@ (8001af0 <can_send_data+0xf0>)
 8001a2e:	4a36      	ldr	r2, [pc, #216]	@ (8001b08 <can_send_data+0x108>)
 8001a30:	4936      	ldr	r1, [pc, #216]	@ (8001b0c <can_send_data+0x10c>)
 8001a32:	4832      	ldr	r0, [pc, #200]	@ (8001afc <can_send_data+0xfc>)
 8001a34:	f001 fa56 	bl	8002ee4 <HAL_CAN_AddTxMessage>
		     HAL_Delay(50);
 8001a38:	2032      	movs	r0, #50	@ 0x32
 8001a3a:	f000 fbfd 	bl	8002238 <HAL_Delay>

		     if(get_message == 1)
 8001a3e:	4b34      	ldr	r3, [pc, #208]	@ (8001b10 <can_send_data+0x110>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d1e0      	bne.n	8001a08 <can_send_data+0x8>
		     {
		     get_message = rx_data[0];
 8001a46:	4b33      	ldr	r3, [pc, #204]	@ (8001b14 <can_send_data+0x114>)
 8001a48:	781a      	ldrb	r2, [r3, #0]
 8001a4a:	4b31      	ldr	r3, [pc, #196]	@ (8001b10 <can_send_data+0x110>)
 8001a4c:	701a      	strb	r2, [r3, #0]
		     memset(data_to_send , 0 , 45);
 8001a4e:	222d      	movs	r2, #45	@ 0x2d
 8001a50:	2100      	movs	r1, #0
 8001a52:	4831      	ldr	r0, [pc, #196]	@ (8001b18 <can_send_data+0x118>)
 8001a54:	f008 ff3d 	bl	800a8d2 <memset>
		     char temp_data[1];

		     for(i=0; i<8; i++){
 8001a58:	4b30      	ldr	r3, [pc, #192]	@ (8001b1c <can_send_data+0x11c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e021      	b.n	8001aa4 <can_send_data+0xa4>

		     itoa(rx_data[i] , temp_data , 10);
 8001a60:	4b2e      	ldr	r3, [pc, #184]	@ (8001b1c <can_send_data+0x11c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a2b      	ldr	r2, [pc, #172]	@ (8001b14 <can_send_data+0x114>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	220a      	movs	r2, #10
 8001a70:	4619      	mov	r1, r3
 8001a72:	f007 ff59 	bl	8009928 <itoa>
		     strcat(data_to_send , temp_data);
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4826      	ldr	r0, [pc, #152]	@ (8001b18 <can_send_data+0x118>)
 8001a7e:	f008 ff30 	bl	800a8e2 <strcat>
		     strcat(data_to_send , ",");
 8001a82:	4825      	ldr	r0, [pc, #148]	@ (8001b18 <can_send_data+0x118>)
 8001a84:	f7fe fbf4 	bl	8000270 <strlen>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b22      	ldr	r3, [pc, #136]	@ (8001b18 <can_send_data+0x118>)
 8001a8e:	4413      	add	r3, r2
 8001a90:	4923      	ldr	r1, [pc, #140]	@ (8001b20 <can_send_data+0x120>)
 8001a92:	461a      	mov	r2, r3
 8001a94:	460b      	mov	r3, r1
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	8013      	strh	r3, [r2, #0]
		     for(i=0; i<8; i++){
 8001a9a:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <can_send_data+0x11c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b1c <can_send_data+0x11c>)
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b1c <can_send_data+0x11c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b07      	cmp	r3, #7
 8001aaa:	ddd9      	ble.n	8001a60 <can_send_data+0x60>
		     }
		     strcat(data_to_send, "\n");
 8001aac:	481a      	ldr	r0, [pc, #104]	@ (8001b18 <can_send_data+0x118>)
 8001aae:	f7fe fbdf 	bl	8000270 <strlen>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <can_send_data+0x118>)
 8001ab8:	4413      	add	r3, r2
 8001aba:	491a      	ldr	r1, [pc, #104]	@ (8001b24 <can_send_data+0x124>)
 8001abc:	461a      	mov	r2, r3
 8001abe:	460b      	mov	r3, r1
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	8013      	strh	r3, [r2, #0]
		    //  if(strstr(UART_RX_BUFF , "SALAM")){
		     HAL_UART_Transmit(&huart1, (uint8_t *) "can ok\n", 7, HAL_MAX_DELAY);
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac8:	2207      	movs	r2, #7
 8001aca:	4917      	ldr	r1, [pc, #92]	@ (8001b28 <can_send_data+0x128>)
 8001acc:	4817      	ldr	r0, [pc, #92]	@ (8001b2c <can_send_data+0x12c>)
 8001ace:	f003 fc7f 	bl	80053d0 <HAL_UART_Transmit>
		     HAL_Delay(100);
 8001ad2:	2064      	movs	r0, #100	@ 0x64
 8001ad4:	f000 fbb0 	bl	8002238 <HAL_Delay>

		     /* UART_RES = */HAL_UART_Transmit(&huart1, (uint8_t *) UART_RX_BUFF, sizeof(UART_RX_BUFF), HAL_MAX_DELAY);
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8001adc:	22f8      	movs	r2, #248	@ 0xf8
 8001ade:	4914      	ldr	r1, [pc, #80]	@ (8001b30 <can_send_data+0x130>)
 8001ae0:	4812      	ldr	r0, [pc, #72]	@ (8001b2c <can_send_data+0x12c>)
 8001ae2:	f003 fc75 	bl	80053d0 <HAL_UART_Transmit>
			  HAL_Delay(100);
 8001ae6:	2064      	movs	r0, #100	@ 0x64
 8001ae8:	f000 fba6 	bl	8002238 <HAL_Delay>
	  /*RES = */HAL_CAN_AddTxMessage(&hcan1, &engine_rpm_header, rpm_data, &tx_mail_box);
 8001aec:	e78c      	b.n	8001a08 <can_send_data+0x8>
 8001aee:	bf00      	nop
 8001af0:	20000520 	.word	0x20000520
 8001af4:	2000000c 	.word	0x2000000c
 8001af8:	20000494 	.word	0x20000494
 8001afc:	200002d8 	.word	0x200002d8
 8001b00:	20000004 	.word	0x20000004
 8001b04:	200004ac 	.word	0x200004ac
 8001b08:	20000014 	.word	0x20000014
 8001b0c:	200004c4 	.word	0x200004c4
 8001b10:	2000045d 	.word	0x2000045d
 8001b14:	2000035c 	.word	0x2000035c
 8001b18:	20000464 	.word	0x20000464
 8001b1c:	20000460 	.word	0x20000460
 8001b20:	0800e1cc 	.word	0x0800e1cc
 8001b24:	0800e1d0 	.word	0x0800e1d0
 8001b28:	0800e1d4 	.word	0x0800e1d4
 8001b2c:	20000300 	.word	0x20000300
 8001b30:	20000364 	.word	0x20000364

08001b34 <get_input_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_get_input_data */
void get_input_data(void *argument)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN get_input_data */
  /* Infinite loop */
  for(;;)
  {
     handle_rpm();
 8001b3c:	f7ff fd0e 	bl	800155c <handle_rpm>
     handle_coolant();
 8001b40:	f7ff fdda 	bl	80016f8 <handle_coolant>
     handle_rpm();
 8001b44:	bf00      	nop
 8001b46:	e7f9      	b.n	8001b3c <get_input_data+0x8>

08001b48 <make_engine_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_make_engine_data */
void make_engine_data(void *argument)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN make_engine_data */
  /* Infinite loop */
  for(;;)
  {
    make_coolant_can_data(coolant_value);
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <make_engine_data+0x2c>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fe1f 	bl	8001798 <make_coolant_can_data>
    make_rpm_can_data(input_rpm);
 8001b5a:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <make_engine_data+0x30>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fdfe 	bl	8001760 <make_rpm_can_data>
    make_fan_can_data(coolant_value);
 8001b64:	4b03      	ldr	r3, [pc, #12]	@ (8001b74 <make_engine_data+0x2c>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fe31 	bl	80017d0 <make_fan_can_data>
    make_coolant_can_data(coolant_value);
 8001b6e:	bf00      	nop
 8001b70:	e7ee      	b.n	8001b50 <make_engine_data+0x8>
 8001b72:	bf00      	nop
 8001b74:	2000022c 	.word	0x2000022c
 8001b78:	20000000 	.word	0x20000000

08001b7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b8c:	d101      	bne.n	8001b92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b8e:	f000 fb33 	bl	80021f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9e:	b672      	cpsid	i
}
 8001ba0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba2:	bf00      	nop
 8001ba4:	e7fd      	b.n	8001ba2 <Error_Handler+0x8>
	...

08001ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	4b12      	ldr	r3, [pc, #72]	@ (8001bfc <HAL_MspInit+0x54>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	4a11      	ldr	r2, [pc, #68]	@ (8001bfc <HAL_MspInit+0x54>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001bfc <HAL_MspInit+0x54>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <HAL_MspInit+0x54>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <HAL_MspInit+0x54>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bda:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <HAL_MspInit+0x54>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	210f      	movs	r1, #15
 8001bea:	f06f 0001 	mvn.w	r0, #1
 8001bee:	f001 fe79 	bl	80038e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800

08001c00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	@ 0x28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a2f      	ldr	r2, [pc, #188]	@ (8001cdc <HAL_ADC_MspInit+0xdc>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d157      	bne.n	8001cd2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce0 <HAL_ADC_MspInit+0xe0>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ce0 <HAL_ADC_MspInit+0xe0>)
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c32:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce0 <HAL_ADC_MspInit+0xe0>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b27      	ldr	r3, [pc, #156]	@ (8001ce0 <HAL_ADC_MspInit+0xe0>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	4a26      	ldr	r2, [pc, #152]	@ (8001ce0 <HAL_ADC_MspInit+0xe0>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ce0 <HAL_ADC_MspInit+0xe0>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c5a:	231f      	movs	r3, #31
 8001c5c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	481d      	ldr	r0, [pc, #116]	@ (8001ce4 <HAL_ADC_MspInit+0xe4>)
 8001c6e:	f002 fa65 	bl	800413c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce8 <HAL_ADC_MspInit+0xe8>)
 8001c74:	4a1d      	ldr	r2, [pc, #116]	@ (8001cec <HAL_ADC_MspInit+0xec>)
 8001c76:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <HAL_ADC_MspInit+0xe8>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <HAL_ADC_MspInit+0xe8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c84:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <HAL_ADC_MspInit+0xe8>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <HAL_ADC_MspInit+0xe8>)
 8001c8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c92:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <HAL_ADC_MspInit+0xe8>)
 8001c94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <HAL_ADC_MspInit+0xe8>)
 8001c9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ca0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <HAL_ADC_MspInit+0xe8>)
 8001ca4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ca8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001caa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <HAL_ADC_MspInit+0xe8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce8 <HAL_ADC_MspInit+0xe8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cb6:	480c      	ldr	r0, [pc, #48]	@ (8001ce8 <HAL_ADC_MspInit+0xe8>)
 8001cb8:	f001 fe3e 	bl	8003938 <HAL_DMA_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001cc2:	f7ff ff6a 	bl	8001b9a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a07      	ldr	r2, [pc, #28]	@ (8001ce8 <HAL_ADC_MspInit+0xe8>)
 8001cca:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ccc:	4a06      	ldr	r2, [pc, #24]	@ (8001ce8 <HAL_ADC_MspInit+0xe8>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001cd2:	bf00      	nop
 8001cd4:	3728      	adds	r7, #40	@ 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40012000 	.word	0x40012000
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	20000278 	.word	0x20000278
 8001cec:	40026410 	.word	0x40026410

08001cf0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	@ 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d84 <HAL_CAN_MspInit+0x94>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d133      	bne.n	8001d7a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <HAL_CAN_MspInit+0x98>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d88 <HAL_CAN_MspInit+0x98>)
 8001d1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d22:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <HAL_CAN_MspInit+0x98>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <HAL_CAN_MspInit+0x98>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	4a14      	ldr	r2, [pc, #80]	@ (8001d88 <HAL_CAN_MspInit+0x98>)
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3e:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <HAL_CAN_MspInit+0x98>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d5a:	2309      	movs	r3, #9
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	4809      	ldr	r0, [pc, #36]	@ (8001d8c <HAL_CAN_MspInit+0x9c>)
 8001d66:	f002 f9e9 	bl	800413c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2105      	movs	r1, #5
 8001d6e:	2014      	movs	r0, #20
 8001d70:	f001 fdb8 	bl	80038e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001d74:	2014      	movs	r0, #20
 8001d76:	f001 fdd1 	bl	800391c <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	@ 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40006400 	.word	0x40006400
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020c00 	.word	0x40020c00

08001d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	@ 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1d      	ldr	r2, [pc, #116]	@ (8001e24 <HAL_UART_MspInit+0x94>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d134      	bne.n	8001e1c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <HAL_UART_MspInit+0x98>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	4a1b      	ldr	r2, [pc, #108]	@ (8001e28 <HAL_UART_MspInit+0x98>)
 8001dbc:	f043 0310 	orr.w	r3, r3, #16
 8001dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc2:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <HAL_UART_MspInit+0x98>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <HAL_UART_MspInit+0x98>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	4a14      	ldr	r2, [pc, #80]	@ (8001e28 <HAL_UART_MspInit+0x98>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dde:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <HAL_UART_MspInit+0x98>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dfc:	2307      	movs	r3, #7
 8001dfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4619      	mov	r1, r3
 8001e06:	4809      	ldr	r0, [pc, #36]	@ (8001e2c <HAL_UART_MspInit+0x9c>)
 8001e08:	f002 f998 	bl	800413c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2105      	movs	r1, #5
 8001e10:	2025      	movs	r0, #37	@ 0x25
 8001e12:	f001 fd67 	bl	80038e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e16:	2025      	movs	r0, #37	@ 0x25
 8001e18:	f001 fd80 	bl	800391c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	@ 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40011000 	.word	0x40011000
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020000 	.word	0x40020000

08001e30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08e      	sub	sp, #56	@ 0x38
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	4b34      	ldr	r3, [pc, #208]	@ (8001f18 <HAL_InitTick+0xe8>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	4a33      	ldr	r2, [pc, #204]	@ (8001f18 <HAL_InitTick+0xe8>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e50:	4b31      	ldr	r3, [pc, #196]	@ (8001f18 <HAL_InitTick+0xe8>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e5c:	f107 0210 	add.w	r2, r7, #16
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4611      	mov	r1, r2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f002 ff8e 	bl	8004d88 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d103      	bne.n	8001e7e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e76:	f002 ff5f 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 8001e7a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001e7c:	e004      	b.n	8001e88 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e7e:	f002 ff5b 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 8001e82:	4603      	mov	r3, r0
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e8a:	4a24      	ldr	r2, [pc, #144]	@ (8001f1c <HAL_InitTick+0xec>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	0c9b      	lsrs	r3, r3, #18
 8001e92:	3b01      	subs	r3, #1
 8001e94:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001e96:	4b22      	ldr	r3, [pc, #136]	@ (8001f20 <HAL_InitTick+0xf0>)
 8001e98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001e9e:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <HAL_InitTick+0xf0>)
 8001ea0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ea4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f20 <HAL_InitTick+0xf0>)
 8001ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eaa:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001eac:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <HAL_InitTick+0xf0>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <HAL_InitTick+0xf0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb8:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <HAL_InitTick+0xf0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001ebe:	4818      	ldr	r0, [pc, #96]	@ (8001f20 <HAL_InitTick+0xf0>)
 8001ec0:	f002 ff94 	bl	8004dec <HAL_TIM_Base_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001eca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d11b      	bne.n	8001f0a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001ed2:	4813      	ldr	r0, [pc, #76]	@ (8001f20 <HAL_InitTick+0xf0>)
 8001ed4:	f002 ffe4 	bl	8004ea0 <HAL_TIM_Base_Start_IT>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001ede:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d111      	bne.n	8001f0a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ee6:	201c      	movs	r0, #28
 8001ee8:	f001 fd18 	bl	800391c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	d808      	bhi.n	8001f04 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	201c      	movs	r0, #28
 8001ef8:	f001 fcf4 	bl	80038e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001efc:	4a09      	ldr	r2, [pc, #36]	@ (8001f24 <HAL_InitTick+0xf4>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	e002      	b.n	8001f0a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f0a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3738      	adds	r7, #56	@ 0x38
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	431bde83 	.word	0x431bde83
 8001f20:	20000528 	.word	0x20000528
 8001f24:	20000020 	.word	0x20000020

08001f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <NMI_Handler+0x4>

08001f30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <HardFault_Handler+0x4>

08001f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <MemManage_Handler+0x4>

08001f40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <BusFault_Handler+0x4>

08001f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f4c:	bf00      	nop
 8001f4e:	e7fd      	b.n	8001f4c <UsageFault_Handler+0x4>

08001f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f64:	4802      	ldr	r0, [pc, #8]	@ (8001f70 <CAN1_RX0_IRQHandler+0x10>)
 8001f66:	f001 f9d5 	bl	8003314 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200002d8 	.word	0x200002d8

08001f74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f78:	4802      	ldr	r0, [pc, #8]	@ (8001f84 <TIM2_IRQHandler+0x10>)
 8001f7a:	f003 f801 	bl	8004f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000528 	.word	0x20000528

08001f88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f8c:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <USART1_IRQHandler+0x10>)
 8001f8e:	f003 facf 	bl	8005530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000300 	.word	0x20000300

08001f9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <DMA2_Stream0_IRQHandler+0x10>)
 8001fa2:	f001 fe61 	bl	8003c68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000278 	.word	0x20000278

08001fb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return 1;
 8001fb4:	2301      	movs	r3, #1
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <_kill>:

int _kill(int pid, int sig)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fca:	f008 fd39 	bl	800aa40 <__errno>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2216      	movs	r2, #22
 8001fd2:	601a      	str	r2, [r3, #0]
  return -1;
 8001fd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <_exit>:

void _exit (int status)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ffe7 	bl	8001fc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ff2:	bf00      	nop
 8001ff4:	e7fd      	b.n	8001ff2 <_exit+0x12>

08001ff6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	e00a      	b.n	800201e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002008:	f3af 8000 	nop.w
 800200c:	4601      	mov	r1, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	60ba      	str	r2, [r7, #8]
 8002014:	b2ca      	uxtb	r2, r1
 8002016:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	3301      	adds	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	dbf0      	blt.n	8002008 <_read+0x12>
  }

  return len;
 8002026:	687b      	ldr	r3, [r7, #4]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	e009      	b.n	8002056 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	60ba      	str	r2, [r7, #8]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3301      	adds	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	429a      	cmp	r2, r3
 800205c:	dbf1      	blt.n	8002042 <_write+0x12>
  }
  return len;
 800205e:	687b      	ldr	r3, [r7, #4]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <_close>:

int _close(int file)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002070:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002090:	605a      	str	r2, [r3, #4]
  return 0;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_isatty>:

int _isatty(int file)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020a8:	2301      	movs	r3, #1
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b085      	sub	sp, #20
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d8:	4a14      	ldr	r2, [pc, #80]	@ (800212c <_sbrk+0x5c>)
 80020da:	4b15      	ldr	r3, [pc, #84]	@ (8002130 <_sbrk+0x60>)
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e4:	4b13      	ldr	r3, [pc, #76]	@ (8002134 <_sbrk+0x64>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020ec:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <_sbrk+0x64>)
 80020ee:	4a12      	ldr	r2, [pc, #72]	@ (8002138 <_sbrk+0x68>)
 80020f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020f2:	4b10      	ldr	r3, [pc, #64]	@ (8002134 <_sbrk+0x64>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d207      	bcs.n	8002110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002100:	f008 fc9e 	bl	800aa40 <__errno>
 8002104:	4603      	mov	r3, r0
 8002106:	220c      	movs	r2, #12
 8002108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
 800210e:	e009      	b.n	8002124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002110:	4b08      	ldr	r3, [pc, #32]	@ (8002134 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002116:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	4a05      	ldr	r2, [pc, #20]	@ (8002134 <_sbrk+0x64>)
 8002120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002122:	68fb      	ldr	r3, [r7, #12]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20020000 	.word	0x20020000
 8002130:	00000400 	.word	0x00000400
 8002134:	20000570 	.word	0x20000570
 8002138:	200050b0 	.word	0x200050b0

0800213c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002140:	4b06      	ldr	r3, [pc, #24]	@ (800215c <SystemInit+0x20>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002146:	4a05      	ldr	r2, [pc, #20]	@ (800215c <SystemInit+0x20>)
 8002148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800214c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002160:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002198 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002164:	f7ff ffea 	bl	800213c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002168:	480c      	ldr	r0, [pc, #48]	@ (800219c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800216a:	490d      	ldr	r1, [pc, #52]	@ (80021a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800216c:	4a0d      	ldr	r2, [pc, #52]	@ (80021a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002170:	e002      	b.n	8002178 <LoopCopyDataInit>

08002172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002176:	3304      	adds	r3, #4

08002178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800217c:	d3f9      	bcc.n	8002172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217e:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002180:	4c0a      	ldr	r4, [pc, #40]	@ (80021ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002184:	e001      	b.n	800218a <LoopFillZerobss>

08002186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002188:	3204      	adds	r2, #4

0800218a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800218c:	d3fb      	bcc.n	8002186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800218e:	f008 fc5d 	bl	800aa4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002192:	f7fe ff27 	bl	8000fe4 <main>
  bx  lr    
 8002196:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002198:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800219c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80021a4:	0800e760 	.word	0x0800e760
  ldr r2, =_sbss
 80021a8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80021ac:	200050ac 	.word	0x200050ac

080021b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021b0:	e7fe      	b.n	80021b0 <ADC_IRQHandler>
	...

080021b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021b8:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <HAL_Init+0x40>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0d      	ldr	r2, [pc, #52]	@ (80021f4 <HAL_Init+0x40>)
 80021be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <HAL_Init+0x40>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0a      	ldr	r2, [pc, #40]	@ (80021f4 <HAL_Init+0x40>)
 80021ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d0:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <HAL_Init+0x40>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a07      	ldr	r2, [pc, #28]	@ (80021f4 <HAL_Init+0x40>)
 80021d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021dc:	2003      	movs	r0, #3
 80021de:	f001 fb76 	bl	80038ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e2:	200f      	movs	r0, #15
 80021e4:	f7ff fe24 	bl	8001e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e8:	f7ff fcde 	bl	8001ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023c00 	.word	0x40023c00

080021f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <HAL_IncTick+0x20>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_IncTick+0x24>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4413      	add	r3, r2
 8002208:	4a04      	ldr	r2, [pc, #16]	@ (800221c <HAL_IncTick+0x24>)
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000024 	.word	0x20000024
 800221c:	20000574 	.word	0x20000574

08002220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return uwTick;
 8002224:	4b03      	ldr	r3, [pc, #12]	@ (8002234 <HAL_GetTick+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000574 	.word	0x20000574

08002238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff ffee 	bl	8002220 <HAL_GetTick>
 8002244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d005      	beq.n	800225e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002252:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <HAL_Delay+0x44>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800225e:	bf00      	nop
 8002260:	f7ff ffde 	bl	8002220 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	429a      	cmp	r2, r3
 800226e:	d8f7      	bhi.n	8002260 <HAL_Delay+0x28>
  {
  }
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000024 	.word	0x20000024

08002280 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e033      	b.n	80022fe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff fcae 	bl	8001c00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d118      	bne.n	80022f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022c6:	f023 0302 	bic.w	r3, r3, #2
 80022ca:	f043 0202 	orr.w	r2, r3, #2
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fa68 	bl	80027a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f023 0303 	bic.w	r3, r3, #3
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80022ee:	e001      	b.n	80022f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_ADC_Start_DMA+0x1e>
 8002322:	2302      	movs	r3, #2
 8002324:	e0e9      	b.n	80024fa <HAL_ADC_Start_DMA+0x1f2>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d018      	beq.n	800236e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800234c:	4b6d      	ldr	r3, [pc, #436]	@ (8002504 <HAL_ADC_Start_DMA+0x1fc>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a6d      	ldr	r2, [pc, #436]	@ (8002508 <HAL_ADC_Start_DMA+0x200>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	0c9a      	lsrs	r2, r3, #18
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002360:	e002      	b.n	8002368 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	3b01      	subs	r3, #1
 8002366:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f9      	bne.n	8002362 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800237c:	d107      	bne.n	800238e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800238c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	f040 80a1 	bne.w	80024e0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023dc:	d106      	bne.n	80023ec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	f023 0206 	bic.w	r2, r3, #6
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80023ea:	e002      	b.n	80023f2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023fa:	4b44      	ldr	r3, [pc, #272]	@ (800250c <HAL_ADC_Start_DMA+0x204>)
 80023fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002402:	4a43      	ldr	r2, [pc, #268]	@ (8002510 <HAL_ADC_Start_DMA+0x208>)
 8002404:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240a:	4a42      	ldr	r2, [pc, #264]	@ (8002514 <HAL_ADC_Start_DMA+0x20c>)
 800240c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002412:	4a41      	ldr	r2, [pc, #260]	@ (8002518 <HAL_ADC_Start_DMA+0x210>)
 8002414:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800241e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800242e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800243e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	334c      	adds	r3, #76	@ 0x4c
 800244a:	4619      	mov	r1, r3
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f001 fb20 	bl	8003a94 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2b00      	cmp	r3, #0
 800245e:	d12a      	bne.n	80024b6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a2d      	ldr	r2, [pc, #180]	@ (800251c <HAL_ADC_Start_DMA+0x214>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d015      	beq.n	8002496 <HAL_ADC_Start_DMA+0x18e>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a2c      	ldr	r2, [pc, #176]	@ (8002520 <HAL_ADC_Start_DMA+0x218>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d105      	bne.n	8002480 <HAL_ADC_Start_DMA+0x178>
 8002474:	4b25      	ldr	r3, [pc, #148]	@ (800250c <HAL_ADC_Start_DMA+0x204>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a27      	ldr	r2, [pc, #156]	@ (8002524 <HAL_ADC_Start_DMA+0x21c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d136      	bne.n	80024f8 <HAL_ADC_Start_DMA+0x1f0>
 800248a:	4b20      	ldr	r3, [pc, #128]	@ (800250c <HAL_ADC_Start_DMA+0x204>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	d130      	bne.n	80024f8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d129      	bne.n	80024f8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	e020      	b.n	80024f8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a18      	ldr	r2, [pc, #96]	@ (800251c <HAL_ADC_Start_DMA+0x214>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d11b      	bne.n	80024f8 <HAL_ADC_Start_DMA+0x1f0>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d114      	bne.n	80024f8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	e00b      	b.n	80024f8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	f043 0210 	orr.w	r2, r3, #16
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f0:	f043 0201 	orr.w	r2, r3, #1
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	2000001c 	.word	0x2000001c
 8002508:	431bde83 	.word	0x431bde83
 800250c:	40012300 	.word	0x40012300
 8002510:	080029a1 	.word	0x080029a1
 8002514:	08002a5b 	.word	0x08002a5b
 8002518:	08002a77 	.word	0x08002a77
 800251c:	40012000 	.word	0x40012000
 8002520:	40012100 	.word	0x40012100
 8002524:	40012200 	.word	0x40012200

08002528 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x1c>
 800257c:	2302      	movs	r3, #2
 800257e:	e105      	b.n	800278c <HAL_ADC_ConfigChannel+0x228>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b09      	cmp	r3, #9
 800258e:	d925      	bls.n	80025dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68d9      	ldr	r1, [r3, #12]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	4613      	mov	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	3b1e      	subs	r3, #30
 80025a6:	2207      	movs	r2, #7
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43da      	mvns	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	400a      	ands	r2, r1
 80025b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68d9      	ldr	r1, [r3, #12]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4618      	mov	r0, r3
 80025c8:	4603      	mov	r3, r0
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4403      	add	r3, r0
 80025ce:	3b1e      	subs	r3, #30
 80025d0:	409a      	lsls	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	e022      	b.n	8002622 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6919      	ldr	r1, [r3, #16]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	2207      	movs	r2, #7
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43da      	mvns	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	400a      	ands	r2, r1
 80025fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6919      	ldr	r1, [r3, #16]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	4603      	mov	r3, r0
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4403      	add	r3, r0
 8002618:	409a      	lsls	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b06      	cmp	r3, #6
 8002628:	d824      	bhi.n	8002674 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	3b05      	subs	r3, #5
 800263c:	221f      	movs	r2, #31
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	400a      	ands	r2, r1
 800264a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	4618      	mov	r0, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	3b05      	subs	r3, #5
 8002666:	fa00 f203 	lsl.w	r2, r0, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	635a      	str	r2, [r3, #52]	@ 0x34
 8002672:	e04c      	b.n	800270e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	d824      	bhi.n	80026c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	3b23      	subs	r3, #35	@ 0x23
 800268e:	221f      	movs	r2, #31
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43da      	mvns	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	400a      	ands	r2, r1
 800269c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	4618      	mov	r0, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	3b23      	subs	r3, #35	@ 0x23
 80026b8:	fa00 f203 	lsl.w	r2, r0, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80026c4:	e023      	b.n	800270e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	3b41      	subs	r3, #65	@ 0x41
 80026d8:	221f      	movs	r2, #31
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43da      	mvns	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	400a      	ands	r2, r1
 80026e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	4618      	mov	r0, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	3b41      	subs	r3, #65	@ 0x41
 8002702:	fa00 f203 	lsl.w	r2, r0, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800270e:	4b22      	ldr	r3, [pc, #136]	@ (8002798 <HAL_ADC_ConfigChannel+0x234>)
 8002710:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a21      	ldr	r2, [pc, #132]	@ (800279c <HAL_ADC_ConfigChannel+0x238>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d109      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x1cc>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b12      	cmp	r3, #18
 8002722:	d105      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a19      	ldr	r2, [pc, #100]	@ (800279c <HAL_ADC_ConfigChannel+0x238>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d123      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x21e>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b10      	cmp	r3, #16
 8002740:	d003      	beq.n	800274a <HAL_ADC_ConfigChannel+0x1e6>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b11      	cmp	r3, #17
 8002748:	d11b      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b10      	cmp	r3, #16
 800275c:	d111      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800275e:	4b10      	ldr	r3, [pc, #64]	@ (80027a0 <HAL_ADC_ConfigChannel+0x23c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a10      	ldr	r2, [pc, #64]	@ (80027a4 <HAL_ADC_ConfigChannel+0x240>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	0c9a      	lsrs	r2, r3, #18
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002774:	e002      	b.n	800277c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	3b01      	subs	r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f9      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	40012300 	.word	0x40012300
 800279c:	40012000 	.word	0x40012000
 80027a0:	2000001c 	.word	0x2000001c
 80027a4:	431bde83 	.word	0x431bde83

080027a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027b0:	4b79      	ldr	r3, [pc, #484]	@ (8002998 <ADC_Init+0x1f0>)
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	021a      	lsls	r2, r3, #8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6859      	ldr	r1, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6899      	ldr	r1, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283a:	4a58      	ldr	r2, [pc, #352]	@ (800299c <ADC_Init+0x1f4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d022      	beq.n	8002886 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800284e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6899      	ldr	r1, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002870:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6899      	ldr	r1, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	e00f      	b.n	80028a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0202 	bic.w	r2, r2, #2
 80028b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6899      	ldr	r1, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7e1b      	ldrb	r3, [r3, #24]
 80028c0:	005a      	lsls	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01b      	beq.n	800290c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6859      	ldr	r1, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	3b01      	subs	r3, #1
 8002900:	035a      	lsls	r2, r3, #13
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	e007      	b.n	800291c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800291a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800292a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	3b01      	subs	r3, #1
 8002938:	051a      	lsls	r2, r3, #20
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6899      	ldr	r1, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800295e:	025a      	lsls	r2, r3, #9
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6899      	ldr	r1, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	029a      	lsls	r2, r3, #10
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40012300 	.word	0x40012300
 800299c:	0f000001 	.word	0x0f000001

080029a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d13c      	bne.n	8002a34 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d12b      	bne.n	8002a2c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d127      	bne.n	8002a2c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d006      	beq.n	80029f8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d119      	bne.n	8002a2c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0220 	bic.w	r2, r2, #32
 8002a06:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d105      	bne.n	8002a2c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	f043 0201 	orr.w	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f7ff fd7b 	bl	8002528 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a32:	e00e      	b.n	8002a52 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7ff fd85 	bl	8002550 <HAL_ADC_ErrorCallback>
}
 8002a46:	e004      	b.n	8002a52 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
}
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a66:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7ff fd67 	bl	800253c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a82:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2240      	movs	r2, #64	@ 0x40
 8002a88:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	f043 0204 	orr.w	r2, r3, #4
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7ff fd5a 	bl	8002550 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0ed      	b.n	8002c92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff f914 	bl	8001cf0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ad8:	f7ff fba2 	bl	8002220 <HAL_GetTick>
 8002adc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ade:	e012      	b.n	8002b06 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ae0:	f7ff fb9e 	bl	8002220 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b0a      	cmp	r3, #10
 8002aec:	d90b      	bls.n	8002b06 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2205      	movs	r2, #5
 8002afe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0c5      	b.n	8002c92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0e5      	beq.n	8002ae0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0202 	bic.w	r2, r2, #2
 8002b22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b24:	f7ff fb7c 	bl	8002220 <HAL_GetTick>
 8002b28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b2a:	e012      	b.n	8002b52 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b2c:	f7ff fb78 	bl	8002220 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b0a      	cmp	r3, #10
 8002b38:	d90b      	bls.n	8002b52 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2205      	movs	r2, #5
 8002b4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e09f      	b.n	8002c92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e5      	bne.n	8002b2c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	7e1b      	ldrb	r3, [r3, #24]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d108      	bne.n	8002b7a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	e007      	b.n	8002b8a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	7e5b      	ldrb	r3, [r3, #25]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d108      	bne.n	8002ba4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	e007      	b.n	8002bb4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	7e9b      	ldrb	r3, [r3, #26]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d108      	bne.n	8002bce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0220 	orr.w	r2, r2, #32
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e007      	b.n	8002bde <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0220 	bic.w	r2, r2, #32
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7edb      	ldrb	r3, [r3, #27]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d108      	bne.n	8002bf8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0210 	bic.w	r2, r2, #16
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	e007      	b.n	8002c08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0210 	orr.w	r2, r2, #16
 8002c06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7f1b      	ldrb	r3, [r3, #28]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d108      	bne.n	8002c22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0208 	orr.w	r2, r2, #8
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	e007      	b.n	8002c32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0208 	bic.w	r2, r2, #8
 8002c30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7f5b      	ldrb	r3, [r3, #29]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d108      	bne.n	8002c4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0204 	orr.w	r2, r2, #4
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e007      	b.n	8002c5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0204 	bic.w	r2, r2, #4
 8002c5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	ea42 0103 	orr.w	r1, r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	1e5a      	subs	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cb2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d003      	beq.n	8002cc2 <HAL_CAN_ConfigFilter+0x26>
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	f040 80be 	bne.w	8002e3e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002cc2:	4b65      	ldr	r3, [pc, #404]	@ (8002e58 <HAL_CAN_ConfigFilter+0x1bc>)
 8002cc4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002ccc:	f043 0201 	orr.w	r2, r3, #1
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002cdc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	2201      	movs	r2, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	401a      	ands	r2, r3
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d123      	bne.n	8002d6c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	401a      	ands	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d46:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	3248      	adds	r2, #72	@ 0x48
 8002d4c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d60:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d62:	6979      	ldr	r1, [r7, #20]
 8002d64:	3348      	adds	r3, #72	@ 0x48
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	440b      	add	r3, r1
 8002d6a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d122      	bne.n	8002dba <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d94:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3248      	adds	r2, #72	@ 0x48
 8002d9a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002db0:	6979      	ldr	r1, [r7, #20]
 8002db2:	3348      	adds	r3, #72	@ 0x48
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	401a      	ands	r2, r3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002dd4:	e007      	b.n	8002de6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	401a      	ands	r2, r3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002e00:	e007      	b.n	8002e12 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d107      	bne.n	8002e2a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002e30:	f023 0201 	bic.w	r2, r3, #1
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e006      	b.n	8002e4c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
  }
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	40006400 	.word	0x40006400

08002e5c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d12e      	bne.n	8002ece <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e88:	f7ff f9ca 	bl	8002220 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e8e:	e012      	b.n	8002eb6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e90:	f7ff f9c6 	bl	8002220 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b0a      	cmp	r3, #10
 8002e9c:	d90b      	bls.n	8002eb6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2205      	movs	r2, #5
 8002eae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e012      	b.n	8002edc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e5      	bne.n	8002e90 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e006      	b.n	8002edc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
  }
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	@ 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f02:	7ffb      	ldrb	r3, [r7, #31]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d003      	beq.n	8002f10 <HAL_CAN_AddTxMessage+0x2c>
 8002f08:	7ffb      	ldrb	r3, [r7, #31]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	f040 80ad 	bne.w	800306a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d105      	bne.n	8002f30 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8095 	beq.w	800305a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	0e1b      	lsrs	r3, r3, #24
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10d      	bne.n	8002f68 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f56:	68f9      	ldr	r1, [r7, #12]
 8002f58:	6809      	ldr	r1, [r1, #0]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	3318      	adds	r3, #24
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	440b      	add	r3, r1
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e00f      	b.n	8002f88 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f72:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f78:	68f9      	ldr	r1, [r7, #12]
 8002f7a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002f7c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	3318      	adds	r3, #24
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	440b      	add	r3, r1
 8002f86:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6819      	ldr	r1, [r3, #0]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	3318      	adds	r3, #24
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	440b      	add	r3, r1
 8002f98:	3304      	adds	r3, #4
 8002f9a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	7d1b      	ldrb	r3, [r3, #20]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d111      	bne.n	8002fc8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	3318      	adds	r3, #24
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	4413      	add	r3, r2
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	6811      	ldr	r1, [r2, #0]
 8002fb8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	3318      	adds	r3, #24
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3307      	adds	r3, #7
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	061a      	lsls	r2, r3, #24
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3306      	adds	r3, #6
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	041b      	lsls	r3, r3, #16
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3305      	adds	r3, #5
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	3204      	adds	r2, #4
 8002fe8:	7812      	ldrb	r2, [r2, #0]
 8002fea:	4610      	mov	r0, r2
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	6811      	ldr	r1, [r2, #0]
 8002ff0:	ea43 0200 	orr.w	r2, r3, r0
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	440b      	add	r3, r1
 8002ffa:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002ffe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3303      	adds	r3, #3
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	061a      	lsls	r2, r3, #24
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3302      	adds	r3, #2
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	041b      	lsls	r3, r3, #16
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3301      	adds	r3, #1
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	4313      	orrs	r3, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	4610      	mov	r0, r2
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	6811      	ldr	r1, [r2, #0]
 8003026:	ea43 0200 	orr.w	r2, r3, r0
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	440b      	add	r3, r1
 8003030:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003034:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	3318      	adds	r3, #24
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	4413      	add	r3, r2
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	6811      	ldr	r1, [r2, #0]
 8003048:	f043 0201 	orr.w	r2, r3, #1
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	3318      	adds	r3, #24
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	440b      	add	r3, r1
 8003054:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	e00e      	b.n	8003078 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e006      	b.n	8003078 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
  }
}
 8003078:	4618      	mov	r0, r3
 800307a:	3724      	adds	r7, #36	@ 0x24
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003098:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800309a:	7dfb      	ldrb	r3, [r7, #23]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d003      	beq.n	80030a8 <HAL_CAN_GetRxMessage+0x24>
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	f040 8103 	bne.w	80032ae <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10e      	bne.n	80030cc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d116      	bne.n	80030ea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0f7      	b.n	80032bc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d107      	bne.n	80030ea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0e8      	b.n	80032bc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	331b      	adds	r3, #27
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	4413      	add	r3, r2
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0204 	and.w	r2, r3, #4
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10c      	bne.n	8003122 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	331b      	adds	r3, #27
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	4413      	add	r3, r2
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	0d5b      	lsrs	r3, r3, #21
 8003118:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	e00b      	b.n	800313a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	331b      	adds	r3, #27
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	4413      	add	r3, r2
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	08db      	lsrs	r3, r3, #3
 8003132:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	331b      	adds	r3, #27
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	4413      	add	r3, r2
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0202 	and.w	r2, r3, #2
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	331b      	adds	r3, #27
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	4413      	add	r3, r2
 800315c:	3304      	adds	r3, #4
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2208      	movs	r2, #8
 800316c:	611a      	str	r2, [r3, #16]
 800316e:	e00b      	b.n	8003188 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	331b      	adds	r3, #27
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	4413      	add	r3, r2
 800317c:	3304      	adds	r3, #4
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 020f 	and.w	r2, r3, #15
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	331b      	adds	r3, #27
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	4413      	add	r3, r2
 8003194:	3304      	adds	r3, #4
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	0a1b      	lsrs	r3, r3, #8
 800319a:	b2da      	uxtb	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	331b      	adds	r3, #27
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	4413      	add	r3, r2
 80031ac:	3304      	adds	r3, #4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	0a1a      	lsrs	r2, r3, #8
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	3301      	adds	r3, #1
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	0c1a      	lsrs	r2, r3, #16
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	3302      	adds	r3, #2
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	4413      	add	r3, r2
 800320c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	0e1a      	lsrs	r2, r3, #24
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	3303      	adds	r3, #3
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	4413      	add	r3, r2
 8003226:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	3304      	adds	r3, #4
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	4413      	add	r3, r2
 800323e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	0a1a      	lsrs	r2, r3, #8
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	3305      	adds	r3, #5
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	4413      	add	r3, r2
 8003258:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	0c1a      	lsrs	r2, r3, #16
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	3306      	adds	r3, #6
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	4413      	add	r3, r2
 8003272:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	0e1a      	lsrs	r2, r3, #24
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	3307      	adds	r3, #7
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d108      	bne.n	800329a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0220 	orr.w	r2, r2, #32
 8003296:	60da      	str	r2, [r3, #12]
 8003298:	e007      	b.n	80032aa <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0220 	orr.w	r2, r2, #32
 80032a8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e006      	b.n	80032bc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
  }
}
 80032bc:	4618      	mov	r0, r3
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032d8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d002      	beq.n	80032e6 <HAL_CAN_ActivateNotification+0x1e>
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d109      	bne.n	80032fa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6959      	ldr	r1, [r3, #20]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	e006      	b.n	8003308 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
  }
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	@ 0x28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d07c      	beq.n	8003454 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d023      	beq.n	80033ac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2201      	movs	r2, #1
 800336a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f983 	bl	8003682 <HAL_CAN_TxMailbox0CompleteCallback>
 800337c:	e016      	b.n	80033ac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d004      	beq.n	8003392 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800338e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003390:	e00c      	b.n	80033ac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d004      	beq.n	80033a6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80033a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033a4:	e002      	b.n	80033ac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f989 	bl	80036be <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d024      	beq.n	8003400 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f963 	bl	8003696 <HAL_CAN_TxMailbox1CompleteCallback>
 80033d0:	e016      	b.n	8003400 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d004      	beq.n	80033e6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033e4:	e00c      	b.n	8003400 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d004      	beq.n	80033fa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80033f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f8:	e002      	b.n	8003400 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f969 	bl	80036d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d024      	beq.n	8003454 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003412:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f943 	bl	80036aa <HAL_CAN_TxMailbox2CompleteCallback>
 8003424:	e016      	b.n	8003454 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d004      	beq.n	800343a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003436:	627b      	str	r3, [r7, #36]	@ 0x24
 8003438:	e00c      	b.n	8003454 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d004      	beq.n	800344e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800344a:	627b      	str	r3, [r7, #36]	@ 0x24
 800344c:	e002      	b.n	8003454 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f949 	bl	80036e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00c      	beq.n	8003478 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800346e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2210      	movs	r2, #16
 8003476:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d006      	beq.n	800349a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2208      	movs	r2, #8
 8003492:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f930 	bl	80036fa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe f9f6 	bl	80018a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00c      	beq.n	80034dc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80034cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2210      	movs	r2, #16
 80034da:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d006      	beq.n	80034fe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2208      	movs	r2, #8
 80034f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f912 	bl	8003722 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d009      	beq.n	800351c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f8f9 	bl	800370e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d006      	beq.n	800353e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2210      	movs	r2, #16
 8003536:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f8fc 	bl	8003736 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00b      	beq.n	8003560 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d006      	beq.n	8003560 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2208      	movs	r2, #8
 8003558:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8f5 	bl	800374a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d07b      	beq.n	8003662 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d072      	beq.n	800365a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80035a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a6:	f043 0302 	orr.w	r3, r3, #2
 80035aa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	f043 0304 	orr.w	r3, r3, #4
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d043      	beq.n	800365a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d03e      	beq.n	800365a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035e2:	2b60      	cmp	r3, #96	@ 0x60
 80035e4:	d02b      	beq.n	800363e <HAL_CAN_IRQHandler+0x32a>
 80035e6:	2b60      	cmp	r3, #96	@ 0x60
 80035e8:	d82e      	bhi.n	8003648 <HAL_CAN_IRQHandler+0x334>
 80035ea:	2b50      	cmp	r3, #80	@ 0x50
 80035ec:	d022      	beq.n	8003634 <HAL_CAN_IRQHandler+0x320>
 80035ee:	2b50      	cmp	r3, #80	@ 0x50
 80035f0:	d82a      	bhi.n	8003648 <HAL_CAN_IRQHandler+0x334>
 80035f2:	2b40      	cmp	r3, #64	@ 0x40
 80035f4:	d019      	beq.n	800362a <HAL_CAN_IRQHandler+0x316>
 80035f6:	2b40      	cmp	r3, #64	@ 0x40
 80035f8:	d826      	bhi.n	8003648 <HAL_CAN_IRQHandler+0x334>
 80035fa:	2b30      	cmp	r3, #48	@ 0x30
 80035fc:	d010      	beq.n	8003620 <HAL_CAN_IRQHandler+0x30c>
 80035fe:	2b30      	cmp	r3, #48	@ 0x30
 8003600:	d822      	bhi.n	8003648 <HAL_CAN_IRQHandler+0x334>
 8003602:	2b10      	cmp	r3, #16
 8003604:	d002      	beq.n	800360c <HAL_CAN_IRQHandler+0x2f8>
 8003606:	2b20      	cmp	r3, #32
 8003608:	d005      	beq.n	8003616 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800360a:	e01d      	b.n	8003648 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800360c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360e:	f043 0308 	orr.w	r3, r3, #8
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003614:	e019      	b.n	800364a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	f043 0310 	orr.w	r3, r3, #16
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800361e:	e014      	b.n	800364a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003622:	f043 0320 	orr.w	r3, r3, #32
 8003626:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003628:	e00f      	b.n	800364a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003632:	e00a      	b.n	800364a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800363a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800363c:	e005      	b.n	800364a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003646:	e000      	b.n	800364a <HAL_CAN_IRQHandler+0x336>
            break;
 8003648:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699a      	ldr	r2, [r3, #24]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003658:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2204      	movs	r2, #4
 8003660:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800366c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f872 	bl	800375e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800367a:	bf00      	nop
 800367c:	3728      	adds	r7, #40	@ 0x28
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003784:	4b0c      	ldr	r3, [pc, #48]	@ (80037b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003790:	4013      	ands	r3, r2
 8003792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800379c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037a6:	4a04      	ldr	r2, [pc, #16]	@ (80037b8 <__NVIC_SetPriorityGrouping+0x44>)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	60d3      	str	r3, [r2, #12]
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c0:	4b04      	ldr	r3, [pc, #16]	@ (80037d4 <__NVIC_GetPriorityGrouping+0x18>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	0a1b      	lsrs	r3, r3, #8
 80037c6:	f003 0307 	and.w	r3, r3, #7
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	db0b      	blt.n	8003802 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	f003 021f 	and.w	r2, r3, #31
 80037f0:	4907      	ldr	r1, [pc, #28]	@ (8003810 <__NVIC_EnableIRQ+0x38>)
 80037f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2001      	movs	r0, #1
 80037fa:	fa00 f202 	lsl.w	r2, r0, r2
 80037fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	e000e100 	.word	0xe000e100

08003814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	6039      	str	r1, [r7, #0]
 800381e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003824:	2b00      	cmp	r3, #0
 8003826:	db0a      	blt.n	800383e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	b2da      	uxtb	r2, r3
 800382c:	490c      	ldr	r1, [pc, #48]	@ (8003860 <__NVIC_SetPriority+0x4c>)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	0112      	lsls	r2, r2, #4
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	440b      	add	r3, r1
 8003838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800383c:	e00a      	b.n	8003854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4908      	ldr	r1, [pc, #32]	@ (8003864 <__NVIC_SetPriority+0x50>)
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	3b04      	subs	r3, #4
 800384c:	0112      	lsls	r2, r2, #4
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	440b      	add	r3, r1
 8003852:	761a      	strb	r2, [r3, #24]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000e100 	.word	0xe000e100
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	@ 0x24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f1c3 0307 	rsb	r3, r3, #7
 8003882:	2b04      	cmp	r3, #4
 8003884:	bf28      	it	cs
 8003886:	2304      	movcs	r3, #4
 8003888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3304      	adds	r3, #4
 800388e:	2b06      	cmp	r3, #6
 8003890:	d902      	bls.n	8003898 <NVIC_EncodePriority+0x30>
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3b03      	subs	r3, #3
 8003896:	e000      	b.n	800389a <NVIC_EncodePriority+0x32>
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	f04f 32ff 	mov.w	r2, #4294967295
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43da      	mvns	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	401a      	ands	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b0:	f04f 31ff 	mov.w	r1, #4294967295
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ba:	43d9      	mvns	r1, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c0:	4313      	orrs	r3, r2
         );
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3724      	adds	r7, #36	@ 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff ff4c 	bl	8003774 <__NVIC_SetPriorityGrouping>
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038f6:	f7ff ff61 	bl	80037bc <__NVIC_GetPriorityGrouping>
 80038fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	6978      	ldr	r0, [r7, #20]
 8003902:	f7ff ffb1 	bl	8003868 <NVIC_EncodePriority>
 8003906:	4602      	mov	r2, r0
 8003908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff ff80 	bl	8003814 <__NVIC_SetPriority>
}
 8003914:	bf00      	nop
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ff54 	bl	80037d8 <__NVIC_EnableIRQ>
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003944:	f7fe fc6c 	bl	8002220 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e099      	b.n	8003a88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0201 	bic.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003974:	e00f      	b.n	8003996 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003976:	f7fe fc53 	bl	8002220 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b05      	cmp	r3, #5
 8003982:	d908      	bls.n	8003996 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2203      	movs	r2, #3
 800398e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e078      	b.n	8003a88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e8      	bne.n	8003976 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	4b38      	ldr	r3, [pc, #224]	@ (8003a90 <HAL_DMA_Init+0x158>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d107      	bne.n	8003a00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f8:	4313      	orrs	r3, r2
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f023 0307 	bic.w	r3, r3, #7
 8003a16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d117      	bne.n	8003a5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00e      	beq.n	8003a5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fb01 	bl	8004044 <DMA_CheckFifoParam>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2240      	movs	r2, #64	@ 0x40
 8003a4c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a56:	2301      	movs	r3, #1
 8003a58:	e016      	b.n	8003a88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fab8 	bl	8003fd8 <DMA_CalcBaseAndBitshift>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a70:	223f      	movs	r2, #63	@ 0x3f
 8003a72:	409a      	lsls	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	f010803f 	.word	0xf010803f

08003a94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aaa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_DMA_Start_IT+0x26>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e040      	b.n	8003b3c <HAL_DMA_Start_IT+0xa8>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d12f      	bne.n	8003b2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fa4a 	bl	8003f7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aec:	223f      	movs	r2, #63	@ 0x3f
 8003aee:	409a      	lsls	r2, r3
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0216 	orr.w	r2, r2, #22
 8003b02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0208 	orr.w	r2, r2, #8
 8003b1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	e005      	b.n	8003b3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b36:	2302      	movs	r3, #2
 8003b38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b52:	f7fe fb65 	bl	8002220 <HAL_GetTick>
 8003b56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d008      	beq.n	8003b76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2280      	movs	r2, #128	@ 0x80
 8003b68:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e052      	b.n	8003c1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0216 	bic.w	r2, r2, #22
 8003b84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695a      	ldr	r2, [r3, #20]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <HAL_DMA_Abort+0x62>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0208 	bic.w	r2, r2, #8
 8003bb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0201 	bic.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bc6:	e013      	b.n	8003bf0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bc8:	f7fe fb2a 	bl	8002220 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b05      	cmp	r3, #5
 8003bd4:	d90c      	bls.n	8003bf0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2203      	movs	r2, #3
 8003be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e015      	b.n	8003c1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e4      	bne.n	8003bc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c02:	223f      	movs	r2, #63	@ 0x3f
 8003c04:	409a      	lsls	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d004      	beq.n	8003c42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2280      	movs	r2, #128	@ 0x80
 8003c3c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e00c      	b.n	8003c5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2205      	movs	r2, #5
 8003c46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c74:	4b8e      	ldr	r3, [pc, #568]	@ (8003eb0 <HAL_DMA_IRQHandler+0x248>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a8e      	ldr	r2, [pc, #568]	@ (8003eb4 <HAL_DMA_IRQHandler+0x24c>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	0a9b      	lsrs	r3, r3, #10
 8003c80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c92:	2208      	movs	r2, #8
 8003c94:	409a      	lsls	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01a      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0204 	bic.w	r2, r2, #4
 8003cba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc0:	2208      	movs	r2, #8
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ccc:	f043 0201 	orr.w	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd8:	2201      	movs	r2, #1
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d012      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00b      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d02:	f043 0202 	orr.w	r2, r3, #2
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0e:	2204      	movs	r2, #4
 8003d10:	409a      	lsls	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d012      	beq.n	8003d40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00b      	beq.n	8003d40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d38:	f043 0204 	orr.w	r2, r3, #4
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d44:	2210      	movs	r2, #16
 8003d46:	409a      	lsls	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d043      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d03c      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d62:	2210      	movs	r2, #16
 8003d64:	409a      	lsls	r2, r3
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d018      	beq.n	8003daa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d108      	bne.n	8003d98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d024      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4798      	blx	r3
 8003d96:	e01f      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01b      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
 8003da8:	e016      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d107      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0208 	bic.w	r2, r2, #8
 8003dc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ddc:	2220      	movs	r2, #32
 8003dde:	409a      	lsls	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 808f 	beq.w	8003f08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8087 	beq.w	8003f08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfe:	2220      	movs	r2, #32
 8003e00:	409a      	lsls	r2, r3
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	d136      	bne.n	8003e80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0216 	bic.w	r2, r2, #22
 8003e20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <HAL_DMA_IRQHandler+0x1da>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0208 	bic.w	r2, r2, #8
 8003e50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e56:	223f      	movs	r2, #63	@ 0x3f
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d07e      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4798      	blx	r3
        }
        return;
 8003e7e:	e079      	b.n	8003f74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d01d      	beq.n	8003eca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10d      	bne.n	8003eb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d031      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4798      	blx	r3
 8003eac:	e02c      	b.n	8003f08 <HAL_DMA_IRQHandler+0x2a0>
 8003eae:	bf00      	nop
 8003eb0:	2000001c 	.word	0x2000001c
 8003eb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d023      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	4798      	blx	r3
 8003ec8:	e01e      	b.n	8003f08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10f      	bne.n	8003ef8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0210 	bic.w	r2, r2, #16
 8003ee6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d032      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d022      	beq.n	8003f62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2205      	movs	r2, #5
 8003f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	3301      	adds	r3, #1
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d307      	bcc.n	8003f50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f2      	bne.n	8003f34 <HAL_DMA_IRQHandler+0x2cc>
 8003f4e:	e000      	b.n	8003f52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	4798      	blx	r3
 8003f72:	e000      	b.n	8003f76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f74:	bf00      	nop
    }
  }
}
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b40      	cmp	r3, #64	@ 0x40
 8003fa8:	d108      	bne.n	8003fbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003fba:	e007      	b.n	8003fcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	60da      	str	r2, [r3, #12]
}
 8003fcc:	bf00      	nop
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	3b10      	subs	r3, #16
 8003fe8:	4a14      	ldr	r2, [pc, #80]	@ (800403c <DMA_CalcBaseAndBitshift+0x64>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	091b      	lsrs	r3, r3, #4
 8003ff0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ff2:	4a13      	ldr	r2, [pc, #76]	@ (8004040 <DMA_CalcBaseAndBitshift+0x68>)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b03      	cmp	r3, #3
 8004004:	d909      	bls.n	800401a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800400e:	f023 0303 	bic.w	r3, r3, #3
 8004012:	1d1a      	adds	r2, r3, #4
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	659a      	str	r2, [r3, #88]	@ 0x58
 8004018:	e007      	b.n	800402a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004022:	f023 0303 	bic.w	r3, r3, #3
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	aaaaaaab 	.word	0xaaaaaaab
 8004040:	0800e2c0 	.word	0x0800e2c0

08004044 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004054:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d11f      	bne.n	800409e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b03      	cmp	r3, #3
 8004062:	d856      	bhi.n	8004112 <DMA_CheckFifoParam+0xce>
 8004064:	a201      	add	r2, pc, #4	@ (adr r2, 800406c <DMA_CheckFifoParam+0x28>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	0800407d 	.word	0x0800407d
 8004070:	0800408f 	.word	0x0800408f
 8004074:	0800407d 	.word	0x0800407d
 8004078:	08004113 	.word	0x08004113
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d046      	beq.n	8004116 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800408c:	e043      	b.n	8004116 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004092:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004096:	d140      	bne.n	800411a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800409c:	e03d      	b.n	800411a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040a6:	d121      	bne.n	80040ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d837      	bhi.n	800411e <DMA_CheckFifoParam+0xda>
 80040ae:	a201      	add	r2, pc, #4	@ (adr r2, 80040b4 <DMA_CheckFifoParam+0x70>)
 80040b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b4:	080040c5 	.word	0x080040c5
 80040b8:	080040cb 	.word	0x080040cb
 80040bc:	080040c5 	.word	0x080040c5
 80040c0:	080040dd 	.word	0x080040dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	73fb      	strb	r3, [r7, #15]
      break;
 80040c8:	e030      	b.n	800412c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d025      	beq.n	8004122 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040da:	e022      	b.n	8004122 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040e4:	d11f      	bne.n	8004126 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040ea:	e01c      	b.n	8004126 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d903      	bls.n	80040fa <DMA_CheckFifoParam+0xb6>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d003      	beq.n	8004100 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040f8:	e018      	b.n	800412c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
      break;
 80040fe:	e015      	b.n	800412c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004104:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00e      	beq.n	800412a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
      break;
 8004110:	e00b      	b.n	800412a <DMA_CheckFifoParam+0xe6>
      break;
 8004112:	bf00      	nop
 8004114:	e00a      	b.n	800412c <DMA_CheckFifoParam+0xe8>
      break;
 8004116:	bf00      	nop
 8004118:	e008      	b.n	800412c <DMA_CheckFifoParam+0xe8>
      break;
 800411a:	bf00      	nop
 800411c:	e006      	b.n	800412c <DMA_CheckFifoParam+0xe8>
      break;
 800411e:	bf00      	nop
 8004120:	e004      	b.n	800412c <DMA_CheckFifoParam+0xe8>
      break;
 8004122:	bf00      	nop
 8004124:	e002      	b.n	800412c <DMA_CheckFifoParam+0xe8>
      break;   
 8004126:	bf00      	nop
 8004128:	e000      	b.n	800412c <DMA_CheckFifoParam+0xe8>
      break;
 800412a:	bf00      	nop
    }
  } 
  
  return status; 
 800412c:	7bfb      	ldrb	r3, [r7, #15]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop

0800413c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800413c:	b480      	push	{r7}
 800413e:	b089      	sub	sp, #36	@ 0x24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800414e:	2300      	movs	r3, #0
 8004150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
 8004156:	e16b      	b.n	8004430 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004158:	2201      	movs	r2, #1
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4013      	ands	r3, r2
 800416a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	429a      	cmp	r2, r3
 8004172:	f040 815a 	bne.w	800442a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	2b01      	cmp	r3, #1
 8004180:	d005      	beq.n	800418e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800418a:	2b02      	cmp	r3, #2
 800418c:	d130      	bne.n	80041f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	2203      	movs	r2, #3
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	43db      	mvns	r3, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4013      	ands	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041c4:	2201      	movs	r2, #1
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	091b      	lsrs	r3, r3, #4
 80041da:	f003 0201 	and.w	r2, r3, #1
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 0303 	and.w	r3, r3, #3
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d017      	beq.n	800422c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	2203      	movs	r2, #3
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4013      	ands	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	4313      	orrs	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 0303 	and.w	r3, r3, #3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d123      	bne.n	8004280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	08da      	lsrs	r2, r3, #3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3208      	adds	r2, #8
 8004240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	220f      	movs	r2, #15
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4013      	ands	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4313      	orrs	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	08da      	lsrs	r2, r3, #3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3208      	adds	r2, #8
 800427a:	69b9      	ldr	r1, [r7, #24]
 800427c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	2203      	movs	r2, #3
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	43db      	mvns	r3, r3
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	4013      	ands	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 0203 	and.w	r2, r3, #3
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80b4 	beq.w	800442a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	4b60      	ldr	r3, [pc, #384]	@ (8004448 <HAL_GPIO_Init+0x30c>)
 80042c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ca:	4a5f      	ldr	r2, [pc, #380]	@ (8004448 <HAL_GPIO_Init+0x30c>)
 80042cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80042d2:	4b5d      	ldr	r3, [pc, #372]	@ (8004448 <HAL_GPIO_Init+0x30c>)
 80042d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042de:	4a5b      	ldr	r2, [pc, #364]	@ (800444c <HAL_GPIO_Init+0x310>)
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	089b      	lsrs	r3, r3, #2
 80042e4:	3302      	adds	r3, #2
 80042e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	220f      	movs	r2, #15
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43db      	mvns	r3, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4013      	ands	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a52      	ldr	r2, [pc, #328]	@ (8004450 <HAL_GPIO_Init+0x314>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d02b      	beq.n	8004362 <HAL_GPIO_Init+0x226>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a51      	ldr	r2, [pc, #324]	@ (8004454 <HAL_GPIO_Init+0x318>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d025      	beq.n	800435e <HAL_GPIO_Init+0x222>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a50      	ldr	r2, [pc, #320]	@ (8004458 <HAL_GPIO_Init+0x31c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01f      	beq.n	800435a <HAL_GPIO_Init+0x21e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a4f      	ldr	r2, [pc, #316]	@ (800445c <HAL_GPIO_Init+0x320>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d019      	beq.n	8004356 <HAL_GPIO_Init+0x21a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a4e      	ldr	r2, [pc, #312]	@ (8004460 <HAL_GPIO_Init+0x324>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d013      	beq.n	8004352 <HAL_GPIO_Init+0x216>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a4d      	ldr	r2, [pc, #308]	@ (8004464 <HAL_GPIO_Init+0x328>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00d      	beq.n	800434e <HAL_GPIO_Init+0x212>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a4c      	ldr	r2, [pc, #304]	@ (8004468 <HAL_GPIO_Init+0x32c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <HAL_GPIO_Init+0x20e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a4b      	ldr	r2, [pc, #300]	@ (800446c <HAL_GPIO_Init+0x330>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d101      	bne.n	8004346 <HAL_GPIO_Init+0x20a>
 8004342:	2307      	movs	r3, #7
 8004344:	e00e      	b.n	8004364 <HAL_GPIO_Init+0x228>
 8004346:	2308      	movs	r3, #8
 8004348:	e00c      	b.n	8004364 <HAL_GPIO_Init+0x228>
 800434a:	2306      	movs	r3, #6
 800434c:	e00a      	b.n	8004364 <HAL_GPIO_Init+0x228>
 800434e:	2305      	movs	r3, #5
 8004350:	e008      	b.n	8004364 <HAL_GPIO_Init+0x228>
 8004352:	2304      	movs	r3, #4
 8004354:	e006      	b.n	8004364 <HAL_GPIO_Init+0x228>
 8004356:	2303      	movs	r3, #3
 8004358:	e004      	b.n	8004364 <HAL_GPIO_Init+0x228>
 800435a:	2302      	movs	r3, #2
 800435c:	e002      	b.n	8004364 <HAL_GPIO_Init+0x228>
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <HAL_GPIO_Init+0x228>
 8004362:	2300      	movs	r3, #0
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	f002 0203 	and.w	r2, r2, #3
 800436a:	0092      	lsls	r2, r2, #2
 800436c:	4093      	lsls	r3, r2
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004374:	4935      	ldr	r1, [pc, #212]	@ (800444c <HAL_GPIO_Init+0x310>)
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	089b      	lsrs	r3, r3, #2
 800437a:	3302      	adds	r3, #2
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004382:	4b3b      	ldr	r3, [pc, #236]	@ (8004470 <HAL_GPIO_Init+0x334>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	43db      	mvns	r3, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4013      	ands	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043a6:	4a32      	ldr	r2, [pc, #200]	@ (8004470 <HAL_GPIO_Init+0x334>)
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043ac:	4b30      	ldr	r3, [pc, #192]	@ (8004470 <HAL_GPIO_Init+0x334>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	43db      	mvns	r3, r3
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4013      	ands	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043d0:	4a27      	ldr	r2, [pc, #156]	@ (8004470 <HAL_GPIO_Init+0x334>)
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043d6:	4b26      	ldr	r3, [pc, #152]	@ (8004470 <HAL_GPIO_Init+0x334>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	43db      	mvns	r3, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4013      	ands	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004470 <HAL_GPIO_Init+0x334>)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004400:	4b1b      	ldr	r3, [pc, #108]	@ (8004470 <HAL_GPIO_Init+0x334>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	43db      	mvns	r3, r3
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4013      	ands	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004424:	4a12      	ldr	r2, [pc, #72]	@ (8004470 <HAL_GPIO_Init+0x334>)
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	3301      	adds	r3, #1
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	2b0f      	cmp	r3, #15
 8004434:	f67f ae90 	bls.w	8004158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	3724      	adds	r7, #36	@ 0x24
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800
 800444c:	40013800 	.word	0x40013800
 8004450:	40020000 	.word	0x40020000
 8004454:	40020400 	.word	0x40020400
 8004458:	40020800 	.word	0x40020800
 800445c:	40020c00 	.word	0x40020c00
 8004460:	40021000 	.word	0x40021000
 8004464:	40021400 	.word	0x40021400
 8004468:	40021800 	.word	0x40021800
 800446c:	40021c00 	.word	0x40021c00
 8004470:	40013c00 	.word	0x40013c00

08004474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	887b      	ldrh	r3, [r7, #2]
 8004486:	4013      	ands	r3, r2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800448c:	2301      	movs	r3, #1
 800448e:	73fb      	strb	r3, [r7, #15]
 8004490:	e001      	b.n	8004496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004492:	2300      	movs	r3, #0
 8004494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004496:	7bfb      	ldrb	r3, [r7, #15]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	807b      	strh	r3, [r7, #2]
 80044b0:	4613      	mov	r3, r2
 80044b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044b4:	787b      	ldrb	r3, [r7, #1]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044ba:	887a      	ldrh	r2, [r7, #2]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044c0:	e003      	b.n	80044ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044c2:	887b      	ldrh	r3, [r7, #2]
 80044c4:	041a      	lsls	r2, r3, #16
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	619a      	str	r2, [r3, #24]
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
	...

080044d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e267      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d075      	beq.n	80045e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044f6:	4b88      	ldr	r3, [pc, #544]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d00c      	beq.n	800451c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004502:	4b85      	ldr	r3, [pc, #532]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800450a:	2b08      	cmp	r3, #8
 800450c:	d112      	bne.n	8004534 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800450e:	4b82      	ldr	r3, [pc, #520]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004516:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800451a:	d10b      	bne.n	8004534 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800451c:	4b7e      	ldr	r3, [pc, #504]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d05b      	beq.n	80045e0 <HAL_RCC_OscConfig+0x108>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d157      	bne.n	80045e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e242      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800453c:	d106      	bne.n	800454c <HAL_RCC_OscConfig+0x74>
 800453e:	4b76      	ldr	r3, [pc, #472]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a75      	ldr	r2, [pc, #468]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	e01d      	b.n	8004588 <HAL_RCC_OscConfig+0xb0>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0x98>
 8004556:	4b70      	ldr	r3, [pc, #448]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a6f      	ldr	r2, [pc, #444]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 800455c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	4b6d      	ldr	r3, [pc, #436]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a6c      	ldr	r2, [pc, #432]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	e00b      	b.n	8004588 <HAL_RCC_OscConfig+0xb0>
 8004570:	4b69      	ldr	r3, [pc, #420]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a68      	ldr	r2, [pc, #416]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	4b66      	ldr	r3, [pc, #408]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a65      	ldr	r2, [pc, #404]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d013      	beq.n	80045b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fd fe46 	bl	8002220 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004598:	f7fd fe42 	bl	8002220 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	@ 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e207      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0xc0>
 80045b6:	e014      	b.n	80045e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b8:	f7fd fe32 	bl	8002220 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c0:	f7fd fe2e 	bl	8002220 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	@ 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e1f3      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d2:	4b51      	ldr	r3, [pc, #324]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0xe8>
 80045de:	e000      	b.n	80045e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d063      	beq.n	80046b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00b      	beq.n	8004612 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045fa:	4b47      	ldr	r3, [pc, #284]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004602:	2b08      	cmp	r3, #8
 8004604:	d11c      	bne.n	8004640 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004606:	4b44      	ldr	r3, [pc, #272]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d116      	bne.n	8004640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004612:	4b41      	ldr	r3, [pc, #260]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d005      	beq.n	800462a <HAL_RCC_OscConfig+0x152>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d001      	beq.n	800462a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e1c7      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462a:	4b3b      	ldr	r3, [pc, #236]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4937      	ldr	r1, [pc, #220]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 800463a:	4313      	orrs	r3, r2
 800463c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463e:	e03a      	b.n	80046b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d020      	beq.n	800468a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004648:	4b34      	ldr	r3, [pc, #208]	@ (800471c <HAL_RCC_OscConfig+0x244>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fd fde7 	bl	8002220 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004656:	f7fd fde3 	bl	8002220 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e1a8      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004668:	4b2b      	ldr	r3, [pc, #172]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f0      	beq.n	8004656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004674:	4b28      	ldr	r3, [pc, #160]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	4925      	ldr	r1, [pc, #148]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004684:	4313      	orrs	r3, r2
 8004686:	600b      	str	r3, [r1, #0]
 8004688:	e015      	b.n	80046b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800468a:	4b24      	ldr	r3, [pc, #144]	@ (800471c <HAL_RCC_OscConfig+0x244>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fd fdc6 	bl	8002220 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004698:	f7fd fdc2 	bl	8002220 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e187      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d036      	beq.n	8004730 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d016      	beq.n	80046f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ca:	4b15      	ldr	r3, [pc, #84]	@ (8004720 <HAL_RCC_OscConfig+0x248>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d0:	f7fd fda6 	bl	8002220 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d8:	f7fd fda2 	bl	8002220 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e167      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 80046ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCC_OscConfig+0x200>
 80046f6:	e01b      	b.n	8004730 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f8:	4b09      	ldr	r3, [pc, #36]	@ (8004720 <HAL_RCC_OscConfig+0x248>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fe:	f7fd fd8f 	bl	8002220 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004704:	e00e      	b.n	8004724 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004706:	f7fd fd8b 	bl	8002220 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d907      	bls.n	8004724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e150      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
 8004718:	40023800 	.word	0x40023800
 800471c:	42470000 	.word	0x42470000
 8004720:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004724:	4b88      	ldr	r3, [pc, #544]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1ea      	bne.n	8004706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 8097 	beq.w	800486c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473e:	2300      	movs	r3, #0
 8004740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004742:	4b81      	ldr	r3, [pc, #516]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10f      	bne.n	800476e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	4b7d      	ldr	r3, [pc, #500]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	4a7c      	ldr	r2, [pc, #496]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800475c:	6413      	str	r3, [r2, #64]	@ 0x40
 800475e:	4b7a      	ldr	r3, [pc, #488]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476a:	2301      	movs	r3, #1
 800476c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476e:	4b77      	ldr	r3, [pc, #476]	@ (800494c <HAL_RCC_OscConfig+0x474>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d118      	bne.n	80047ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800477a:	4b74      	ldr	r3, [pc, #464]	@ (800494c <HAL_RCC_OscConfig+0x474>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a73      	ldr	r2, [pc, #460]	@ (800494c <HAL_RCC_OscConfig+0x474>)
 8004780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004786:	f7fd fd4b 	bl	8002220 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478e:	f7fd fd47 	bl	8002220 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e10c      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a0:	4b6a      	ldr	r3, [pc, #424]	@ (800494c <HAL_RCC_OscConfig+0x474>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x2ea>
 80047b4:	4b64      	ldr	r3, [pc, #400]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b8:	4a63      	ldr	r2, [pc, #396]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c0:	e01c      	b.n	80047fc <HAL_RCC_OscConfig+0x324>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b05      	cmp	r3, #5
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCC_OscConfig+0x30c>
 80047ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047d0:	f043 0304 	orr.w	r3, r3, #4
 80047d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047da:	4a5b      	ldr	r2, [pc, #364]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047e2:	e00b      	b.n	80047fc <HAL_RCC_OscConfig+0x324>
 80047e4:	4b58      	ldr	r3, [pc, #352]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e8:	4a57      	ldr	r2, [pc, #348]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f0:	4b55      	ldr	r3, [pc, #340]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f4:	4a54      	ldr	r2, [pc, #336]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047f6:	f023 0304 	bic.w	r3, r3, #4
 80047fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d015      	beq.n	8004830 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004804:	f7fd fd0c 	bl	8002220 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480a:	e00a      	b.n	8004822 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480c:	f7fd fd08 	bl	8002220 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481a:	4293      	cmp	r3, r2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e0cb      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004822:	4b49      	ldr	r3, [pc, #292]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0ee      	beq.n	800480c <HAL_RCC_OscConfig+0x334>
 800482e:	e014      	b.n	800485a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004830:	f7fd fcf6 	bl	8002220 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004836:	e00a      	b.n	800484e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004838:	f7fd fcf2 	bl	8002220 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e0b5      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484e:	4b3e      	ldr	r3, [pc, #248]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1ee      	bne.n	8004838 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800485a:	7dfb      	ldrb	r3, [r7, #23]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d105      	bne.n	800486c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004860:	4b39      	ldr	r3, [pc, #228]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004864:	4a38      	ldr	r2, [pc, #224]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800486a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80a1 	beq.w	80049b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004876:	4b34      	ldr	r3, [pc, #208]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	2b08      	cmp	r3, #8
 8004880:	d05c      	beq.n	800493c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d141      	bne.n	800490e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488a:	4b31      	ldr	r3, [pc, #196]	@ (8004950 <HAL_RCC_OscConfig+0x478>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7fd fcc6 	bl	8002220 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004898:	f7fd fcc2 	bl	8002220 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e087      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048aa:	4b27      	ldr	r3, [pc, #156]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69da      	ldr	r2, [r3, #28]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c4:	019b      	lsls	r3, r3, #6
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	3b01      	subs	r3, #1
 80048d0:	041b      	lsls	r3, r3, #16
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d8:	061b      	lsls	r3, r3, #24
 80048da:	491b      	ldr	r1, [pc, #108]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004950 <HAL_RCC_OscConfig+0x478>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e6:	f7fd fc9b 	bl	8002220 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ee:	f7fd fc97 	bl	8002220 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e05c      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004900:	4b11      	ldr	r3, [pc, #68]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0f0      	beq.n	80048ee <HAL_RCC_OscConfig+0x416>
 800490c:	e054      	b.n	80049b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490e:	4b10      	ldr	r3, [pc, #64]	@ (8004950 <HAL_RCC_OscConfig+0x478>)
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004914:	f7fd fc84 	bl	8002220 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491c:	f7fd fc80 	bl	8002220 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e045      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492e:	4b06      	ldr	r3, [pc, #24]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1f0      	bne.n	800491c <HAL_RCC_OscConfig+0x444>
 800493a:	e03d      	b.n	80049b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d107      	bne.n	8004954 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e038      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
 8004948:	40023800 	.word	0x40023800
 800494c:	40007000 	.word	0x40007000
 8004950:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004954:	4b1b      	ldr	r3, [pc, #108]	@ (80049c4 <HAL_RCC_OscConfig+0x4ec>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d028      	beq.n	80049b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800496c:	429a      	cmp	r2, r3
 800496e:	d121      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497a:	429a      	cmp	r2, r3
 800497c:	d11a      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004984:	4013      	ands	r3, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800498a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800498c:	4293      	cmp	r3, r2
 800498e:	d111      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499a:	085b      	lsrs	r3, r3, #1
 800499c:	3b01      	subs	r3, #1
 800499e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d107      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40023800 	.word	0x40023800

080049c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0cc      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049dc:	4b68      	ldr	r3, [pc, #416]	@ (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d90c      	bls.n	8004a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b65      	ldr	r3, [pc, #404]	@ (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b63      	ldr	r3, [pc, #396]	@ (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0b8      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d020      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a1c:	4b59      	ldr	r3, [pc, #356]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a58      	ldr	r2, [pc, #352]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a34:	4b53      	ldr	r3, [pc, #332]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4a52      	ldr	r2, [pc, #328]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a40:	4b50      	ldr	r3, [pc, #320]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	494d      	ldr	r1, [pc, #308]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d044      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d107      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a66:	4b47      	ldr	r3, [pc, #284]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d119      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e07f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d003      	beq.n	8004a86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a86:	4b3f      	ldr	r3, [pc, #252]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e06f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a96:	4b3b      	ldr	r3, [pc, #236]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e067      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa6:	4b37      	ldr	r3, [pc, #220]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f023 0203 	bic.w	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4934      	ldr	r1, [pc, #208]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab8:	f7fd fbb2 	bl	8002220 <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac0:	f7fd fbae 	bl	8002220 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e04f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 020c 	and.w	r2, r3, #12
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d1eb      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae8:	4b25      	ldr	r3, [pc, #148]	@ (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d20c      	bcs.n	8004b10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af6:	4b22      	ldr	r3, [pc, #136]	@ (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afe:	4b20      	ldr	r3, [pc, #128]	@ (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e032      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b1c:	4b19      	ldr	r3, [pc, #100]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4916      	ldr	r1, [pc, #88]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b3a:	4b12      	ldr	r3, [pc, #72]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	490e      	ldr	r1, [pc, #56]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b4e:	f000 f821 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8004b52:	4602      	mov	r2, r0
 8004b54:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	490a      	ldr	r1, [pc, #40]	@ (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 8004b60:	5ccb      	ldrb	r3, [r1, r3]
 8004b62:	fa22 f303 	lsr.w	r3, r2, r3
 8004b66:	4a09      	ldr	r2, [pc, #36]	@ (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b6a:	4b09      	ldr	r3, [pc, #36]	@ (8004b90 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fd f95e 	bl	8001e30 <HAL_InitTick>

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023c00 	.word	0x40023c00
 8004b84:	40023800 	.word	0x40023800
 8004b88:	0800e2a8 	.word	0x0800e2a8
 8004b8c:	2000001c 	.word	0x2000001c
 8004b90:	20000020 	.word	0x20000020

08004b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b98:	b090      	sub	sp, #64	@ 0x40
 8004b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bac:	4b59      	ldr	r3, [pc, #356]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 030c 	and.w	r3, r3, #12
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d00d      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	f200 80a1 	bhi.w	8004d00 <HAL_RCC_GetSysClockFreq+0x16c>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d003      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0x3a>
 8004bc6:	e09b      	b.n	8004d00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bc8:	4b53      	ldr	r3, [pc, #332]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bcc:	e09b      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bce:	4b53      	ldr	r3, [pc, #332]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8004bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bd2:	e098      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bdc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bde:	4b4d      	ldr	r3, [pc, #308]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d028      	beq.n	8004c3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bea:	4b4a      	ldr	r3, [pc, #296]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	099b      	lsrs	r3, r3, #6
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	623b      	str	r3, [r7, #32]
 8004bf4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4b47      	ldr	r3, [pc, #284]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c00:	fb03 f201 	mul.w	r2, r3, r1
 8004c04:	2300      	movs	r3, #0
 8004c06:	fb00 f303 	mul.w	r3, r0, r3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	4a43      	ldr	r2, [pc, #268]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c0e:	fba0 1202 	umull	r1, r2, r0, r2
 8004c12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c14:	460a      	mov	r2, r1
 8004c16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c1a:	4413      	add	r3, r2
 8004c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c20:	2200      	movs	r2, #0
 8004c22:	61bb      	str	r3, [r7, #24]
 8004c24:	61fa      	str	r2, [r7, #28]
 8004c26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004c2e:	f7fc f82b 	bl	8000c88 <__aeabi_uldivmod>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4613      	mov	r3, r2
 8004c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c3a:	e053      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c3c:	4b35      	ldr	r3, [pc, #212]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	099b      	lsrs	r3, r3, #6
 8004c42:	2200      	movs	r2, #0
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	617a      	str	r2, [r7, #20]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c4e:	f04f 0b00 	mov.w	fp, #0
 8004c52:	4652      	mov	r2, sl
 8004c54:	465b      	mov	r3, fp
 8004c56:	f04f 0000 	mov.w	r0, #0
 8004c5a:	f04f 0100 	mov.w	r1, #0
 8004c5e:	0159      	lsls	r1, r3, #5
 8004c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c64:	0150      	lsls	r0, r2, #5
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	ebb2 080a 	subs.w	r8, r2, sl
 8004c6e:	eb63 090b 	sbc.w	r9, r3, fp
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c86:	ebb2 0408 	subs.w	r4, r2, r8
 8004c8a:	eb63 0509 	sbc.w	r5, r3, r9
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	00eb      	lsls	r3, r5, #3
 8004c98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c9c:	00e2      	lsls	r2, r4, #3
 8004c9e:	4614      	mov	r4, r2
 8004ca0:	461d      	mov	r5, r3
 8004ca2:	eb14 030a 	adds.w	r3, r4, sl
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	eb45 030b 	adc.w	r3, r5, fp
 8004cac:	607b      	str	r3, [r7, #4]
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cba:	4629      	mov	r1, r5
 8004cbc:	028b      	lsls	r3, r1, #10
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	028a      	lsls	r2, r1, #10
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cce:	2200      	movs	r2, #0
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	60fa      	str	r2, [r7, #12]
 8004cd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cd8:	f7fb ffd6 	bl	8000c88 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004cf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cfe:	e002      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d00:	4b05      	ldr	r3, [pc, #20]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3740      	adds	r7, #64	@ 0x40
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d12:	bf00      	nop
 8004d14:	40023800 	.word	0x40023800
 8004d18:	00f42400 	.word	0x00f42400
 8004d1c:	017d7840 	.word	0x017d7840

08004d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d24:	4b03      	ldr	r3, [pc, #12]	@ (8004d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d26:	681b      	ldr	r3, [r3, #0]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	2000001c 	.word	0x2000001c

08004d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d3c:	f7ff fff0 	bl	8004d20 <HAL_RCC_GetHCLKFreq>
 8004d40:	4602      	mov	r2, r0
 8004d42:	4b05      	ldr	r3, [pc, #20]	@ (8004d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	0a9b      	lsrs	r3, r3, #10
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	4903      	ldr	r1, [pc, #12]	@ (8004d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d4e:	5ccb      	ldrb	r3, [r1, r3]
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	0800e2b8 	.word	0x0800e2b8

08004d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d64:	f7ff ffdc 	bl	8004d20 <HAL_RCC_GetHCLKFreq>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	0b5b      	lsrs	r3, r3, #13
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	4903      	ldr	r1, [pc, #12]	@ (8004d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d76:	5ccb      	ldrb	r3, [r1, r3]
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40023800 	.word	0x40023800
 8004d84:	0800e2b8 	.word	0x0800e2b8

08004d88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	220f      	movs	r2, #15
 8004d96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d98:	4b12      	ldr	r3, [pc, #72]	@ (8004de4 <HAL_RCC_GetClockConfig+0x5c>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 0203 	and.w	r2, r3, #3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004da4:	4b0f      	ldr	r3, [pc, #60]	@ (8004de4 <HAL_RCC_GetClockConfig+0x5c>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004db0:	4b0c      	ldr	r3, [pc, #48]	@ (8004de4 <HAL_RCC_GetClockConfig+0x5c>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004dbc:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <HAL_RCC_GetClockConfig+0x5c>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	08db      	lsrs	r3, r3, #3
 8004dc2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004dca:	4b07      	ldr	r3, [pc, #28]	@ (8004de8 <HAL_RCC_GetClockConfig+0x60>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0207 	and.w	r2, r3, #7
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	601a      	str	r2, [r3, #0]
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800
 8004de8:	40023c00 	.word	0x40023c00

08004dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e041      	b.n	8004e82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f839 	bl	8004e8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f000 f9c0 	bl	80051b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d001      	beq.n	8004eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e04e      	b.n	8004f56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a23      	ldr	r2, [pc, #140]	@ (8004f64 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d022      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x80>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee2:	d01d      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x80>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8004f68 <HAL_TIM_Base_Start_IT+0xc8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d018      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x80>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f6c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d013      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x80>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1c      	ldr	r2, [pc, #112]	@ (8004f70 <HAL_TIM_Base_Start_IT+0xd0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00e      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x80>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1b      	ldr	r2, [pc, #108]	@ (8004f74 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d009      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x80>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a19      	ldr	r2, [pc, #100]	@ (8004f78 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x80>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a18      	ldr	r2, [pc, #96]	@ (8004f7c <HAL_TIM_Base_Start_IT+0xdc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d111      	bne.n	8004f44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b06      	cmp	r3, #6
 8004f30:	d010      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f42:	e007      	b.n	8004f54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000800 	.word	0x40000800
 8004f70:	40000c00 	.word	0x40000c00
 8004f74:	40010400 	.word	0x40010400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40001800 	.word	0x40001800

08004f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d020      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01b      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0202 	mvn.w	r2, #2
 8004fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f8d2 	bl	8005174 <HAL_TIM_IC_CaptureCallback>
 8004fd0:	e005      	b.n	8004fde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f8c4 	bl	8005160 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f8d5 	bl	8005188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d020      	beq.n	8005030 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01b      	beq.n	8005030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0204 	mvn.w	r2, #4
 8005000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8ac 	bl	8005174 <HAL_TIM_IC_CaptureCallback>
 800501c:	e005      	b.n	800502a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f89e 	bl	8005160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f8af 	bl	8005188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d020      	beq.n	800507c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01b      	beq.n	800507c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0208 	mvn.w	r2, #8
 800504c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2204      	movs	r2, #4
 8005052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f886 	bl	8005174 <HAL_TIM_IC_CaptureCallback>
 8005068:	e005      	b.n	8005076 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f878 	bl	8005160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f889 	bl	8005188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b00      	cmp	r3, #0
 8005084:	d020      	beq.n	80050c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01b      	beq.n	80050c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0210 	mvn.w	r2, #16
 8005098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2208      	movs	r2, #8
 800509e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f860 	bl	8005174 <HAL_TIM_IC_CaptureCallback>
 80050b4:	e005      	b.n	80050c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f852 	bl	8005160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f863 	bl	8005188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00c      	beq.n	80050ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0201 	mvn.w	r2, #1
 80050e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7fc fd48 	bl	8001b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00c      	beq.n	8005110 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d007      	beq.n	8005110 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f906 	bl	800531c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00c      	beq.n	8005134 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005120:	2b00      	cmp	r3, #0
 8005122:	d007      	beq.n	8005134 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800512c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f834 	bl	800519c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 0320 	and.w	r3, r3, #32
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0220 	mvn.w	r2, #32
 8005150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f8d8 	bl	8005308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a46      	ldr	r2, [pc, #280]	@ (80052dc <TIM_Base_SetConfig+0x12c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d013      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ce:	d00f      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a43      	ldr	r2, [pc, #268]	@ (80052e0 <TIM_Base_SetConfig+0x130>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00b      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a42      	ldr	r2, [pc, #264]	@ (80052e4 <TIM_Base_SetConfig+0x134>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d007      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a41      	ldr	r2, [pc, #260]	@ (80052e8 <TIM_Base_SetConfig+0x138>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a40      	ldr	r2, [pc, #256]	@ (80052ec <TIM_Base_SetConfig+0x13c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d108      	bne.n	8005202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a35      	ldr	r2, [pc, #212]	@ (80052dc <TIM_Base_SetConfig+0x12c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d02b      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005210:	d027      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a32      	ldr	r2, [pc, #200]	@ (80052e0 <TIM_Base_SetConfig+0x130>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d023      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a31      	ldr	r2, [pc, #196]	@ (80052e4 <TIM_Base_SetConfig+0x134>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d01f      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a30      	ldr	r2, [pc, #192]	@ (80052e8 <TIM_Base_SetConfig+0x138>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d01b      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2f      	ldr	r2, [pc, #188]	@ (80052ec <TIM_Base_SetConfig+0x13c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d017      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2e      	ldr	r2, [pc, #184]	@ (80052f0 <TIM_Base_SetConfig+0x140>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d013      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2d      	ldr	r2, [pc, #180]	@ (80052f4 <TIM_Base_SetConfig+0x144>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00f      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2c      	ldr	r2, [pc, #176]	@ (80052f8 <TIM_Base_SetConfig+0x148>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00b      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2b      	ldr	r2, [pc, #172]	@ (80052fc <TIM_Base_SetConfig+0x14c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d007      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2a      	ldr	r2, [pc, #168]	@ (8005300 <TIM_Base_SetConfig+0x150>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d003      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a29      	ldr	r2, [pc, #164]	@ (8005304 <TIM_Base_SetConfig+0x154>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d108      	bne.n	8005274 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4313      	orrs	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a10      	ldr	r2, [pc, #64]	@ (80052dc <TIM_Base_SetConfig+0x12c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_Base_SetConfig+0xf8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a12      	ldr	r2, [pc, #72]	@ (80052ec <TIM_Base_SetConfig+0x13c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d103      	bne.n	80052b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d105      	bne.n	80052ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f023 0201 	bic.w	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	611a      	str	r2, [r3, #16]
  }
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40000c00 	.word	0x40000c00
 80052ec:	40010400 	.word	0x40010400
 80052f0:	40014000 	.word	0x40014000
 80052f4:	40014400 	.word	0x40014400
 80052f8:	40014800 	.word	0x40014800
 80052fc:	40001800 	.word	0x40001800
 8005300:	40001c00 	.word	0x40001c00
 8005304:	40002000 	.word	0x40002000

08005308 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e042      	b.n	80053c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d106      	bne.n	800535c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fc fd1a 	bl	8001d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2224      	movs	r2, #36	@ 0x24
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005372:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fdbd 	bl	8005ef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	691a      	ldr	r2, [r3, #16]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695a      	ldr	r2, [r3, #20]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005398:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08a      	sub	sp, #40	@ 0x28
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	4613      	mov	r3, r2
 80053de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d175      	bne.n	80054dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_UART_Transmit+0x2c>
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e06e      	b.n	80054de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2221      	movs	r2, #33	@ 0x21
 800540a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800540e:	f7fc ff07 	bl	8002220 <HAL_GetTick>
 8005412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	88fa      	ldrh	r2, [r7, #6]
 8005418:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	88fa      	ldrh	r2, [r7, #6]
 800541e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005428:	d108      	bne.n	800543c <HAL_UART_Transmit+0x6c>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d104      	bne.n	800543c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	e003      	b.n	8005444 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005440:	2300      	movs	r3, #0
 8005442:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005444:	e02e      	b.n	80054a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2200      	movs	r2, #0
 800544e:	2180      	movs	r1, #128	@ 0x80
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 fb1f 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e03a      	b.n	80054de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10b      	bne.n	8005486 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800547c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	3302      	adds	r3, #2
 8005482:	61bb      	str	r3, [r7, #24]
 8005484:	e007      	b.n	8005496 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	781a      	ldrb	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	3301      	adds	r3, #1
 8005494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800549a:	b29b      	uxth	r3, r3
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1cb      	bne.n	8005446 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2200      	movs	r2, #0
 80054b6:	2140      	movs	r1, #64	@ 0x40
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 faeb 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e006      	b.n	80054de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	e000      	b.n	80054de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80054dc:	2302      	movs	r3, #2
  }
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3720      	adds	r7, #32
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	4613      	mov	r3, r2
 80054f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d112      	bne.n	8005526 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_UART_Receive_IT+0x26>
 8005506:	88fb      	ldrh	r3, [r7, #6]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e00b      	b.n	8005528 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	461a      	mov	r2, r3
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 fb12 	bl	8005b46 <UART_Start_Receive_IT>
 8005522:	4603      	mov	r3, r0
 8005524:	e000      	b.n	8005528 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005526:	2302      	movs	r3, #2
  }
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b0ba      	sub	sp, #232	@ 0xe8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005556:	2300      	movs	r3, #0
 8005558:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800555c:	2300      	movs	r3, #0
 800555e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800556e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10f      	bne.n	8005596 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <HAL_UART_IRQHandler+0x66>
 8005582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fbf2 	bl	8005d78 <UART_Receive_IT>
      return;
 8005594:	e25b      	b.n	8005a4e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005596:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80de 	beq.w	800575c <HAL_UART_IRQHandler+0x22c>
 80055a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 80d1 	beq.w	800575c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <HAL_UART_IRQHandler+0xae>
 80055c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d6:	f043 0201 	orr.w	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <HAL_UART_IRQHandler+0xd2>
 80055ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fa:	f043 0202 	orr.w	r2, r3, #2
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <HAL_UART_IRQHandler+0xf6>
 800560e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561e:	f043 0204 	orr.w	r2, r3, #4
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d011      	beq.n	8005656 <HAL_UART_IRQHandler+0x126>
 8005632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d105      	bne.n	800564a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800563e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564e:	f043 0208 	orr.w	r2, r3, #8
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 81f2 	beq.w	8005a44 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d008      	beq.n	800567e <HAL_UART_IRQHandler+0x14e>
 800566c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fb7d 	bl	8005d78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005688:	2b40      	cmp	r3, #64	@ 0x40
 800568a:	bf0c      	ite	eq
 800568c:	2301      	moveq	r3, #1
 800568e:	2300      	movne	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d103      	bne.n	80056aa <HAL_UART_IRQHandler+0x17a>
 80056a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d04f      	beq.n	800574a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fa85 	bl	8005bba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ba:	2b40      	cmp	r3, #64	@ 0x40
 80056bc:	d141      	bne.n	8005742 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3314      	adds	r3, #20
 80056c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056cc:	e853 3f00 	ldrex	r3, [r3]
 80056d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80056d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3314      	adds	r3, #20
 80056e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80056ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80056ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80056f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1d9      	bne.n	80056be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d013      	beq.n	800573a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005716:	4a7e      	ldr	r2, [pc, #504]	@ (8005910 <HAL_UART_IRQHandler+0x3e0>)
 8005718:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800571e:	4618      	mov	r0, r3
 8005720:	f7fe fa80 	bl	8003c24 <HAL_DMA_Abort_IT>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d016      	beq.n	8005758 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800572e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005734:	4610      	mov	r0, r2
 8005736:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	e00e      	b.n	8005758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f994 	bl	8005a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	e00a      	b.n	8005758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f990 	bl	8005a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005748:	e006      	b.n	8005758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f98c 	bl	8005a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005756:	e175      	b.n	8005a44 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005758:	bf00      	nop
    return;
 800575a:	e173      	b.n	8005a44 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005760:	2b01      	cmp	r3, #1
 8005762:	f040 814f 	bne.w	8005a04 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800576a:	f003 0310 	and.w	r3, r3, #16
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 8148 	beq.w	8005a04 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8141 	beq.w	8005a04 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005782:	2300      	movs	r3, #0
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a2:	2b40      	cmp	r3, #64	@ 0x40
 80057a4:	f040 80b6 	bne.w	8005914 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 8145 	beq.w	8005a48 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057c6:	429a      	cmp	r2, r3
 80057c8:	f080 813e 	bcs.w	8005a48 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057de:	f000 8088 	beq.w	80058f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	330c      	adds	r3, #12
 80057e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80057f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005800:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	330c      	adds	r3, #12
 800580a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800580e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005812:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800581a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005826:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1d9      	bne.n	80057e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3314      	adds	r3, #20
 8005834:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800583e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3314      	adds	r3, #20
 800584e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005852:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005856:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800585a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e1      	bne.n	800582e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3314      	adds	r3, #20
 8005870:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005872:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800587a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800587c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005880:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3314      	adds	r3, #20
 800588a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800588e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005890:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005894:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800589c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e3      	bne.n	800586a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80058c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058c2:	f023 0310 	bic.w	r3, r3, #16
 80058c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	330c      	adds	r3, #12
 80058d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80058d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80058d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e3      	bne.n	80058b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fe f929 	bl	8003b44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005900:	b29b      	uxth	r3, r3
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	b29b      	uxth	r3, r3
 8005906:	4619      	mov	r1, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f8b7 	bl	8005a7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800590e:	e09b      	b.n	8005a48 <HAL_UART_IRQHandler+0x518>
 8005910:	08005c81 	.word	0x08005c81
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800591c:	b29b      	uxth	r3, r3
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 808e 	beq.w	8005a4c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005930:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8089 	beq.w	8005a4c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	330c      	adds	r3, #12
 8005940:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800594a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005950:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	330c      	adds	r3, #12
 800595a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800595e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005960:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005964:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800596c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e3      	bne.n	800593a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3314      	adds	r3, #20
 8005978:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597c:	e853 3f00 	ldrex	r3, [r3]
 8005980:	623b      	str	r3, [r7, #32]
   return(result);
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	f023 0301 	bic.w	r3, r3, #1
 8005988:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3314      	adds	r3, #20
 8005992:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005996:	633a      	str	r2, [r7, #48]	@ 0x30
 8005998:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800599c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800599e:	e841 2300 	strex	r3, r2, [r1]
 80059a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e3      	bne.n	8005972 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	330c      	adds	r3, #12
 80059be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	e853 3f00 	ldrex	r3, [r3]
 80059c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0310 	bic.w	r3, r3, #16
 80059ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	330c      	adds	r3, #12
 80059d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80059dc:	61fa      	str	r2, [r7, #28]
 80059de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	69b9      	ldr	r1, [r7, #24]
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	617b      	str	r3, [r7, #20]
   return(result);
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e3      	bne.n	80059b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059fa:	4619      	mov	r1, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f83d 	bl	8005a7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a02:	e023      	b.n	8005a4c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d009      	beq.n	8005a24 <HAL_UART_IRQHandler+0x4f4>
 8005a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f943 	bl	8005ca8 <UART_Transmit_IT>
    return;
 8005a22:	e014      	b.n	8005a4e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00e      	beq.n	8005a4e <HAL_UART_IRQHandler+0x51e>
 8005a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d008      	beq.n	8005a4e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f983 	bl	8005d48 <UART_EndTransmit_IT>
    return;
 8005a42:	e004      	b.n	8005a4e <HAL_UART_IRQHandler+0x51e>
    return;
 8005a44:	bf00      	nop
 8005a46:	e002      	b.n	8005a4e <HAL_UART_IRQHandler+0x51e>
      return;
 8005a48:	bf00      	nop
 8005a4a:	e000      	b.n	8005a4e <HAL_UART_IRQHandler+0x51e>
      return;
 8005a4c:	bf00      	nop
  }
}
 8005a4e:	37e8      	adds	r7, #232	@ 0xe8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa4:	e03b      	b.n	8005b1e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aac:	d037      	beq.n	8005b1e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aae:	f7fc fbb7 	bl	8002220 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	6a3a      	ldr	r2, [r7, #32]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d302      	bcc.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e03a      	b.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d023      	beq.n	8005b1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b80      	cmp	r3, #128	@ 0x80
 8005ada:	d020      	beq.n	8005b1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b40      	cmp	r3, #64	@ 0x40
 8005ae0:	d01d      	beq.n	8005b1e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0308 	and.w	r3, r3, #8
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d116      	bne.n	8005b1e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 f857 	bl	8005bba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2208      	movs	r2, #8
 8005b10:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e00f      	b.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4013      	ands	r3, r2
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	bf0c      	ite	eq
 8005b2e:	2301      	moveq	r3, #1
 8005b30:	2300      	movne	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	79fb      	ldrb	r3, [r7, #7]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d0b4      	beq.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b085      	sub	sp, #20
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	4613      	mov	r3, r2
 8005b52:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	88fa      	ldrh	r2, [r7, #6]
 8005b5e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	88fa      	ldrh	r2, [r7, #6]
 8005b64:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2222      	movs	r2, #34	@ 0x22
 8005b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b8a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695a      	ldr	r2, [r3, #20]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0220 	orr.w	r2, r2, #32
 8005baa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b095      	sub	sp, #84	@ 0x54
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005be2:	643a      	str	r2, [r7, #64]	@ 0x40
 8005be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005be8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e5      	bne.n	8005bc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3314      	adds	r3, #20
 8005bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3314      	adds	r3, #20
 8005c14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e5      	bne.n	8005bf6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d119      	bne.n	8005c66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	330c      	adds	r3, #12
 8005c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f023 0310 	bic.w	r3, r3, #16
 8005c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c52:	61ba      	str	r2, [r7, #24]
 8005c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6979      	ldr	r1, [r7, #20]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e5      	bne.n	8005c32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c74:	bf00      	nop
 8005c76:	3754      	adds	r7, #84	@ 0x54
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff fee4 	bl	8005a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b21      	cmp	r3, #33	@ 0x21
 8005cba:	d13e      	bne.n	8005d3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cc4:	d114      	bne.n	8005cf0 <UART_Transmit_IT+0x48>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d110      	bne.n	8005cf0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ce2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	1c9a      	adds	r2, r3, #2
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	621a      	str	r2, [r3, #32]
 8005cee:	e008      	b.n	8005d02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	1c59      	adds	r1, r3, #1
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6211      	str	r1, [r2, #32]
 8005cfa:	781a      	ldrb	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10f      	bne.n	8005d36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e000      	b.n	8005d3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d3a:	2302      	movs	r3, #2
  }
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff fe73 	bl	8005a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08c      	sub	sp, #48	@ 0x30
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b22      	cmp	r3, #34	@ 0x22
 8005d8a:	f040 80ae 	bne.w	8005eea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d96:	d117      	bne.n	8005dc8 <UART_Receive_IT+0x50>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d113      	bne.n	8005dc8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005da0:	2300      	movs	r3, #0
 8005da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc0:	1c9a      	adds	r2, r3, #2
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8005dc6:	e026      	b.n	8005e16 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dda:	d007      	beq.n	8005dec <UART_Receive_IT+0x74>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <UART_Receive_IT+0x82>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d106      	bne.n	8005dfa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	e008      	b.n	8005e0c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	4619      	mov	r1, r3
 8005e24:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d15d      	bne.n	8005ee6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0220 	bic.w	r2, r2, #32
 8005e38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695a      	ldr	r2, [r3, #20]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0201 	bic.w	r2, r2, #1
 8005e58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d135      	bne.n	8005edc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	330c      	adds	r3, #12
 8005e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	613b      	str	r3, [r7, #16]
   return(result);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f023 0310 	bic.w	r3, r3, #16
 8005e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	330c      	adds	r3, #12
 8005e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e96:	623a      	str	r2, [r7, #32]
 8005e98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	69f9      	ldr	r1, [r7, #28]
 8005e9c:	6a3a      	ldr	r2, [r7, #32]
 8005e9e:	e841 2300 	strex	r3, r2, [r1]
 8005ea2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1e5      	bne.n	8005e76 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0310 	and.w	r3, r3, #16
 8005eb4:	2b10      	cmp	r3, #16
 8005eb6:	d10a      	bne.n	8005ece <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7ff fdd1 	bl	8005a7c <HAL_UARTEx_RxEventCallback>
 8005eda:	e002      	b.n	8005ee2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fb fcfb 	bl	80018d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e002      	b.n	8005eec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e000      	b.n	8005eec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005eea:	2302      	movs	r3, #2
  }
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3730      	adds	r7, #48	@ 0x30
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ef8:	b0c0      	sub	sp, #256	@ 0x100
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f10:	68d9      	ldr	r1, [r3, #12]
 8005f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	ea40 0301 	orr.w	r3, r0, r1
 8005f1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	431a      	orrs	r2, r3
 8005f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005f4c:	f021 010c 	bic.w	r1, r1, #12
 8005f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f5a:	430b      	orrs	r3, r1
 8005f5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f6e:	6999      	ldr	r1, [r3, #24]
 8005f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	ea40 0301 	orr.w	r3, r0, r1
 8005f7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	4b8f      	ldr	r3, [pc, #572]	@ (80061c0 <UART_SetConfig+0x2cc>)
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d005      	beq.n	8005f94 <UART_SetConfig+0xa0>
 8005f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	4b8d      	ldr	r3, [pc, #564]	@ (80061c4 <UART_SetConfig+0x2d0>)
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d104      	bne.n	8005f9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f94:	f7fe fee4 	bl	8004d60 <HAL_RCC_GetPCLK2Freq>
 8005f98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f9c:	e003      	b.n	8005fa6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f9e:	f7fe fecb 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 8005fa2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fb0:	f040 810c 	bne.w	80061cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005fc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	462b      	mov	r3, r5
 8005fca:	1891      	adds	r1, r2, r2
 8005fcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005fce:	415b      	adcs	r3, r3
 8005fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	eb12 0801 	adds.w	r8, r2, r1
 8005fdc:	4629      	mov	r1, r5
 8005fde:	eb43 0901 	adc.w	r9, r3, r1
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	f04f 0300 	mov.w	r3, #0
 8005fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ff6:	4690      	mov	r8, r2
 8005ff8:	4699      	mov	r9, r3
 8005ffa:	4623      	mov	r3, r4
 8005ffc:	eb18 0303 	adds.w	r3, r8, r3
 8006000:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006004:	462b      	mov	r3, r5
 8006006:	eb49 0303 	adc.w	r3, r9, r3
 800600a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800600e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800601a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800601e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006022:	460b      	mov	r3, r1
 8006024:	18db      	adds	r3, r3, r3
 8006026:	653b      	str	r3, [r7, #80]	@ 0x50
 8006028:	4613      	mov	r3, r2
 800602a:	eb42 0303 	adc.w	r3, r2, r3
 800602e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006030:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006034:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006038:	f7fa fe26 	bl	8000c88 <__aeabi_uldivmod>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4b61      	ldr	r3, [pc, #388]	@ (80061c8 <UART_SetConfig+0x2d4>)
 8006042:	fba3 2302 	umull	r2, r3, r3, r2
 8006046:	095b      	lsrs	r3, r3, #5
 8006048:	011c      	lsls	r4, r3, #4
 800604a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800604e:	2200      	movs	r2, #0
 8006050:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006054:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006058:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800605c:	4642      	mov	r2, r8
 800605e:	464b      	mov	r3, r9
 8006060:	1891      	adds	r1, r2, r2
 8006062:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006064:	415b      	adcs	r3, r3
 8006066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006068:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800606c:	4641      	mov	r1, r8
 800606e:	eb12 0a01 	adds.w	sl, r2, r1
 8006072:	4649      	mov	r1, r9
 8006074:	eb43 0b01 	adc.w	fp, r3, r1
 8006078:	f04f 0200 	mov.w	r2, #0
 800607c:	f04f 0300 	mov.w	r3, #0
 8006080:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006084:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006088:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800608c:	4692      	mov	sl, r2
 800608e:	469b      	mov	fp, r3
 8006090:	4643      	mov	r3, r8
 8006092:	eb1a 0303 	adds.w	r3, sl, r3
 8006096:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800609a:	464b      	mov	r3, r9
 800609c:	eb4b 0303 	adc.w	r3, fp, r3
 80060a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80060b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80060b8:	460b      	mov	r3, r1
 80060ba:	18db      	adds	r3, r3, r3
 80060bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80060be:	4613      	mov	r3, r2
 80060c0:	eb42 0303 	adc.w	r3, r2, r3
 80060c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80060c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80060ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80060ce:	f7fa fddb 	bl	8000c88 <__aeabi_uldivmod>
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	4611      	mov	r1, r2
 80060d8:	4b3b      	ldr	r3, [pc, #236]	@ (80061c8 <UART_SetConfig+0x2d4>)
 80060da:	fba3 2301 	umull	r2, r3, r3, r1
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	2264      	movs	r2, #100	@ 0x64
 80060e2:	fb02 f303 	mul.w	r3, r2, r3
 80060e6:	1acb      	subs	r3, r1, r3
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80060ee:	4b36      	ldr	r3, [pc, #216]	@ (80061c8 <UART_SetConfig+0x2d4>)
 80060f0:	fba3 2302 	umull	r2, r3, r3, r2
 80060f4:	095b      	lsrs	r3, r3, #5
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80060fc:	441c      	add	r4, r3
 80060fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006102:	2200      	movs	r2, #0
 8006104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006108:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800610c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006110:	4642      	mov	r2, r8
 8006112:	464b      	mov	r3, r9
 8006114:	1891      	adds	r1, r2, r2
 8006116:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006118:	415b      	adcs	r3, r3
 800611a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800611c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006120:	4641      	mov	r1, r8
 8006122:	1851      	adds	r1, r2, r1
 8006124:	6339      	str	r1, [r7, #48]	@ 0x30
 8006126:	4649      	mov	r1, r9
 8006128:	414b      	adcs	r3, r1
 800612a:	637b      	str	r3, [r7, #52]	@ 0x34
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006138:	4659      	mov	r1, fp
 800613a:	00cb      	lsls	r3, r1, #3
 800613c:	4651      	mov	r1, sl
 800613e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006142:	4651      	mov	r1, sl
 8006144:	00ca      	lsls	r2, r1, #3
 8006146:	4610      	mov	r0, r2
 8006148:	4619      	mov	r1, r3
 800614a:	4603      	mov	r3, r0
 800614c:	4642      	mov	r2, r8
 800614e:	189b      	adds	r3, r3, r2
 8006150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006154:	464b      	mov	r3, r9
 8006156:	460a      	mov	r2, r1
 8006158:	eb42 0303 	adc.w	r3, r2, r3
 800615c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800616c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006170:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006174:	460b      	mov	r3, r1
 8006176:	18db      	adds	r3, r3, r3
 8006178:	62bb      	str	r3, [r7, #40]	@ 0x28
 800617a:	4613      	mov	r3, r2
 800617c:	eb42 0303 	adc.w	r3, r2, r3
 8006180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006182:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006186:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800618a:	f7fa fd7d 	bl	8000c88 <__aeabi_uldivmod>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	4b0d      	ldr	r3, [pc, #52]	@ (80061c8 <UART_SetConfig+0x2d4>)
 8006194:	fba3 1302 	umull	r1, r3, r3, r2
 8006198:	095b      	lsrs	r3, r3, #5
 800619a:	2164      	movs	r1, #100	@ 0x64
 800619c:	fb01 f303 	mul.w	r3, r1, r3
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	3332      	adds	r3, #50	@ 0x32
 80061a6:	4a08      	ldr	r2, [pc, #32]	@ (80061c8 <UART_SetConfig+0x2d4>)
 80061a8:	fba2 2303 	umull	r2, r3, r2, r3
 80061ac:	095b      	lsrs	r3, r3, #5
 80061ae:	f003 0207 	and.w	r2, r3, #7
 80061b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4422      	add	r2, r4
 80061ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061bc:	e106      	b.n	80063cc <UART_SetConfig+0x4d8>
 80061be:	bf00      	nop
 80061c0:	40011000 	.word	0x40011000
 80061c4:	40011400 	.word	0x40011400
 80061c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061d0:	2200      	movs	r2, #0
 80061d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80061d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80061da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80061de:	4642      	mov	r2, r8
 80061e0:	464b      	mov	r3, r9
 80061e2:	1891      	adds	r1, r2, r2
 80061e4:	6239      	str	r1, [r7, #32]
 80061e6:	415b      	adcs	r3, r3
 80061e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061ee:	4641      	mov	r1, r8
 80061f0:	1854      	adds	r4, r2, r1
 80061f2:	4649      	mov	r1, r9
 80061f4:	eb43 0501 	adc.w	r5, r3, r1
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	00eb      	lsls	r3, r5, #3
 8006202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006206:	00e2      	lsls	r2, r4, #3
 8006208:	4614      	mov	r4, r2
 800620a:	461d      	mov	r5, r3
 800620c:	4643      	mov	r3, r8
 800620e:	18e3      	adds	r3, r4, r3
 8006210:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006214:	464b      	mov	r3, r9
 8006216:	eb45 0303 	adc.w	r3, r5, r3
 800621a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800621e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800622a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800622e:	f04f 0200 	mov.w	r2, #0
 8006232:	f04f 0300 	mov.w	r3, #0
 8006236:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800623a:	4629      	mov	r1, r5
 800623c:	008b      	lsls	r3, r1, #2
 800623e:	4621      	mov	r1, r4
 8006240:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006244:	4621      	mov	r1, r4
 8006246:	008a      	lsls	r2, r1, #2
 8006248:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800624c:	f7fa fd1c 	bl	8000c88 <__aeabi_uldivmod>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4b60      	ldr	r3, [pc, #384]	@ (80063d8 <UART_SetConfig+0x4e4>)
 8006256:	fba3 2302 	umull	r2, r3, r3, r2
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	011c      	lsls	r4, r3, #4
 800625e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006262:	2200      	movs	r2, #0
 8006264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006268:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800626c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006270:	4642      	mov	r2, r8
 8006272:	464b      	mov	r3, r9
 8006274:	1891      	adds	r1, r2, r2
 8006276:	61b9      	str	r1, [r7, #24]
 8006278:	415b      	adcs	r3, r3
 800627a:	61fb      	str	r3, [r7, #28]
 800627c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006280:	4641      	mov	r1, r8
 8006282:	1851      	adds	r1, r2, r1
 8006284:	6139      	str	r1, [r7, #16]
 8006286:	4649      	mov	r1, r9
 8006288:	414b      	adcs	r3, r1
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006298:	4659      	mov	r1, fp
 800629a:	00cb      	lsls	r3, r1, #3
 800629c:	4651      	mov	r1, sl
 800629e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062a2:	4651      	mov	r1, sl
 80062a4:	00ca      	lsls	r2, r1, #3
 80062a6:	4610      	mov	r0, r2
 80062a8:	4619      	mov	r1, r3
 80062aa:	4603      	mov	r3, r0
 80062ac:	4642      	mov	r2, r8
 80062ae:	189b      	adds	r3, r3, r2
 80062b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80062b4:	464b      	mov	r3, r9
 80062b6:	460a      	mov	r2, r1
 80062b8:	eb42 0303 	adc.w	r3, r2, r3
 80062bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80062ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80062d8:	4649      	mov	r1, r9
 80062da:	008b      	lsls	r3, r1, #2
 80062dc:	4641      	mov	r1, r8
 80062de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062e2:	4641      	mov	r1, r8
 80062e4:	008a      	lsls	r2, r1, #2
 80062e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80062ea:	f7fa fccd 	bl	8000c88 <__aeabi_uldivmod>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4611      	mov	r1, r2
 80062f4:	4b38      	ldr	r3, [pc, #224]	@ (80063d8 <UART_SetConfig+0x4e4>)
 80062f6:	fba3 2301 	umull	r2, r3, r3, r1
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	2264      	movs	r2, #100	@ 0x64
 80062fe:	fb02 f303 	mul.w	r3, r2, r3
 8006302:	1acb      	subs	r3, r1, r3
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	3332      	adds	r3, #50	@ 0x32
 8006308:	4a33      	ldr	r2, [pc, #204]	@ (80063d8 <UART_SetConfig+0x4e4>)
 800630a:	fba2 2303 	umull	r2, r3, r2, r3
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006314:	441c      	add	r4, r3
 8006316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800631a:	2200      	movs	r2, #0
 800631c:	673b      	str	r3, [r7, #112]	@ 0x70
 800631e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006320:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	1891      	adds	r1, r2, r2
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	415b      	adcs	r3, r3
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006334:	4641      	mov	r1, r8
 8006336:	1851      	adds	r1, r2, r1
 8006338:	6039      	str	r1, [r7, #0]
 800633a:	4649      	mov	r1, r9
 800633c:	414b      	adcs	r3, r1
 800633e:	607b      	str	r3, [r7, #4]
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800634c:	4659      	mov	r1, fp
 800634e:	00cb      	lsls	r3, r1, #3
 8006350:	4651      	mov	r1, sl
 8006352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006356:	4651      	mov	r1, sl
 8006358:	00ca      	lsls	r2, r1, #3
 800635a:	4610      	mov	r0, r2
 800635c:	4619      	mov	r1, r3
 800635e:	4603      	mov	r3, r0
 8006360:	4642      	mov	r2, r8
 8006362:	189b      	adds	r3, r3, r2
 8006364:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006366:	464b      	mov	r3, r9
 8006368:	460a      	mov	r2, r1
 800636a:	eb42 0303 	adc.w	r3, r2, r3
 800636e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	663b      	str	r3, [r7, #96]	@ 0x60
 800637a:	667a      	str	r2, [r7, #100]	@ 0x64
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	f04f 0300 	mov.w	r3, #0
 8006384:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006388:	4649      	mov	r1, r9
 800638a:	008b      	lsls	r3, r1, #2
 800638c:	4641      	mov	r1, r8
 800638e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006392:	4641      	mov	r1, r8
 8006394:	008a      	lsls	r2, r1, #2
 8006396:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800639a:	f7fa fc75 	bl	8000c88 <__aeabi_uldivmod>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	4b0d      	ldr	r3, [pc, #52]	@ (80063d8 <UART_SetConfig+0x4e4>)
 80063a4:	fba3 1302 	umull	r1, r3, r3, r2
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	2164      	movs	r1, #100	@ 0x64
 80063ac:	fb01 f303 	mul.w	r3, r1, r3
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	3332      	adds	r3, #50	@ 0x32
 80063b6:	4a08      	ldr	r2, [pc, #32]	@ (80063d8 <UART_SetConfig+0x4e4>)
 80063b8:	fba2 2303 	umull	r2, r3, r2, r3
 80063bc:	095b      	lsrs	r3, r3, #5
 80063be:	f003 020f 	and.w	r2, r3, #15
 80063c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4422      	add	r2, r4
 80063ca:	609a      	str	r2, [r3, #8]
}
 80063cc:	bf00      	nop
 80063ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80063d2:	46bd      	mov	sp, r7
 80063d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063d8:	51eb851f 	.word	0x51eb851f

080063dc <LCD16X2_DATA>:
#include "../../Util/Util.h"

//-----[ Alphanumeric LCD16X2 Functions ]-----

void LCD16X2_DATA(uint8_t LCD16X2_Index, unsigned char Data)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4603      	mov	r3, r0
 80063e4:	460a      	mov	r2, r1
 80063e6:	71fb      	strb	r3, [r7, #7]
 80063e8:	4613      	mov	r3, r2
 80063ea:	71bb      	strb	r3, [r7, #6]
    if(Data & 1)
 80063ec:	79bb      	ldrb	r3, [r7, #6]
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d014      	beq.n	8006420 <LCD16X2_DATA+0x44>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 1);
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	4a5a      	ldr	r2, [pc, #360]	@ (8006564 <LCD16X2_DATA+0x188>)
 80063fa:	2134      	movs	r1, #52	@ 0x34
 80063fc:	fb01 f303 	mul.w	r3, r1, r3
 8006400:	4413      	add	r3, r2
 8006402:	3304      	adds	r3, #4
 8006404:	6818      	ldr	r0, [r3, #0]
 8006406:	79fb      	ldrb	r3, [r7, #7]
 8006408:	4a56      	ldr	r2, [pc, #344]	@ (8006564 <LCD16X2_DATA+0x188>)
 800640a:	2134      	movs	r1, #52	@ 0x34
 800640c:	fb01 f303 	mul.w	r3, r1, r3
 8006410:	4413      	add	r3, r2
 8006412:	3308      	adds	r3, #8
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	2201      	movs	r2, #1
 8006418:	4619      	mov	r1, r3
 800641a:	f7fe f843 	bl	80044a4 <HAL_GPIO_WritePin>
 800641e:	e013      	b.n	8006448 <LCD16X2_DATA+0x6c>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 0);
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	4a50      	ldr	r2, [pc, #320]	@ (8006564 <LCD16X2_DATA+0x188>)
 8006424:	2134      	movs	r1, #52	@ 0x34
 8006426:	fb01 f303 	mul.w	r3, r1, r3
 800642a:	4413      	add	r3, r2
 800642c:	3304      	adds	r3, #4
 800642e:	6818      	ldr	r0, [r3, #0]
 8006430:	79fb      	ldrb	r3, [r7, #7]
 8006432:	4a4c      	ldr	r2, [pc, #304]	@ (8006564 <LCD16X2_DATA+0x188>)
 8006434:	2134      	movs	r1, #52	@ 0x34
 8006436:	fb01 f303 	mul.w	r3, r1, r3
 800643a:	4413      	add	r3, r2
 800643c:	3308      	adds	r3, #8
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	2200      	movs	r2, #0
 8006442:	4619      	mov	r1, r3
 8006444:	f7fe f82e 	bl	80044a4 <HAL_GPIO_WritePin>
    if(Data & 2)
 8006448:	79bb      	ldrb	r3, [r7, #6]
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d014      	beq.n	800647c <LCD16X2_DATA+0xa0>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 1);
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	4a43      	ldr	r2, [pc, #268]	@ (8006564 <LCD16X2_DATA+0x188>)
 8006456:	2134      	movs	r1, #52	@ 0x34
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	4413      	add	r3, r2
 800645e:	330c      	adds	r3, #12
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	4a3f      	ldr	r2, [pc, #252]	@ (8006564 <LCD16X2_DATA+0x188>)
 8006466:	2134      	movs	r1, #52	@ 0x34
 8006468:	fb01 f303 	mul.w	r3, r1, r3
 800646c:	4413      	add	r3, r2
 800646e:	3310      	adds	r3, #16
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	2201      	movs	r2, #1
 8006474:	4619      	mov	r1, r3
 8006476:	f7fe f815 	bl	80044a4 <HAL_GPIO_WritePin>
 800647a:	e013      	b.n	80064a4 <LCD16X2_DATA+0xc8>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 0);
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	4a39      	ldr	r2, [pc, #228]	@ (8006564 <LCD16X2_DATA+0x188>)
 8006480:	2134      	movs	r1, #52	@ 0x34
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	4413      	add	r3, r2
 8006488:	330c      	adds	r3, #12
 800648a:	6818      	ldr	r0, [r3, #0]
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	4a35      	ldr	r2, [pc, #212]	@ (8006564 <LCD16X2_DATA+0x188>)
 8006490:	2134      	movs	r1, #52	@ 0x34
 8006492:	fb01 f303 	mul.w	r3, r1, r3
 8006496:	4413      	add	r3, r2
 8006498:	3310      	adds	r3, #16
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	2200      	movs	r2, #0
 800649e:	4619      	mov	r1, r3
 80064a0:	f7fe f800 	bl	80044a4 <HAL_GPIO_WritePin>
    if(Data & 4)
 80064a4:	79bb      	ldrb	r3, [r7, #6]
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d014      	beq.n	80064d8 <LCD16X2_DATA+0xfc>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 1);
 80064ae:	79fb      	ldrb	r3, [r7, #7]
 80064b0:	4a2c      	ldr	r2, [pc, #176]	@ (8006564 <LCD16X2_DATA+0x188>)
 80064b2:	2134      	movs	r1, #52	@ 0x34
 80064b4:	fb01 f303 	mul.w	r3, r1, r3
 80064b8:	4413      	add	r3, r2
 80064ba:	3314      	adds	r3, #20
 80064bc:	6818      	ldr	r0, [r3, #0]
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	4a28      	ldr	r2, [pc, #160]	@ (8006564 <LCD16X2_DATA+0x188>)
 80064c2:	2134      	movs	r1, #52	@ 0x34
 80064c4:	fb01 f303 	mul.w	r3, r1, r3
 80064c8:	4413      	add	r3, r2
 80064ca:	3318      	adds	r3, #24
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	2201      	movs	r2, #1
 80064d0:	4619      	mov	r1, r3
 80064d2:	f7fd ffe7 	bl	80044a4 <HAL_GPIO_WritePin>
 80064d6:	e013      	b.n	8006500 <LCD16X2_DATA+0x124>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 0);
 80064d8:	79fb      	ldrb	r3, [r7, #7]
 80064da:	4a22      	ldr	r2, [pc, #136]	@ (8006564 <LCD16X2_DATA+0x188>)
 80064dc:	2134      	movs	r1, #52	@ 0x34
 80064de:	fb01 f303 	mul.w	r3, r1, r3
 80064e2:	4413      	add	r3, r2
 80064e4:	3314      	adds	r3, #20
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	79fb      	ldrb	r3, [r7, #7]
 80064ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006564 <LCD16X2_DATA+0x188>)
 80064ec:	2134      	movs	r1, #52	@ 0x34
 80064ee:	fb01 f303 	mul.w	r3, r1, r3
 80064f2:	4413      	add	r3, r2
 80064f4:	3318      	adds	r3, #24
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	2200      	movs	r2, #0
 80064fa:	4619      	mov	r1, r3
 80064fc:	f7fd ffd2 	bl	80044a4 <HAL_GPIO_WritePin>
    if(Data & 8)
 8006500:	79bb      	ldrb	r3, [r7, #6]
 8006502:	f003 0308 	and.w	r3, r3, #8
 8006506:	2b00      	cmp	r3, #0
 8006508:	d014      	beq.n	8006534 <LCD16X2_DATA+0x158>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 1);
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	4a15      	ldr	r2, [pc, #84]	@ (8006564 <LCD16X2_DATA+0x188>)
 800650e:	2134      	movs	r1, #52	@ 0x34
 8006510:	fb01 f303 	mul.w	r3, r1, r3
 8006514:	4413      	add	r3, r2
 8006516:	331c      	adds	r3, #28
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	79fb      	ldrb	r3, [r7, #7]
 800651c:	4a11      	ldr	r2, [pc, #68]	@ (8006564 <LCD16X2_DATA+0x188>)
 800651e:	2134      	movs	r1, #52	@ 0x34
 8006520:	fb01 f303 	mul.w	r3, r1, r3
 8006524:	4413      	add	r3, r2
 8006526:	3320      	adds	r3, #32
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	2201      	movs	r2, #1
 800652c:	4619      	mov	r1, r3
 800652e:	f7fd ffb9 	bl	80044a4 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
}
 8006532:	e013      	b.n	800655c <LCD16X2_DATA+0x180>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	4a0b      	ldr	r2, [pc, #44]	@ (8006564 <LCD16X2_DATA+0x188>)
 8006538:	2134      	movs	r1, #52	@ 0x34
 800653a:	fb01 f303 	mul.w	r3, r1, r3
 800653e:	4413      	add	r3, r2
 8006540:	331c      	adds	r3, #28
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	4a07      	ldr	r2, [pc, #28]	@ (8006564 <LCD16X2_DATA+0x188>)
 8006548:	2134      	movs	r1, #52	@ 0x34
 800654a:	fb01 f303 	mul.w	r3, r1, r3
 800654e:	4413      	add	r3, r2
 8006550:	3320      	adds	r3, #32
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	2200      	movs	r2, #0
 8006556:	4619      	mov	r1, r3
 8006558:	f7fd ffa4 	bl	80044a4 <HAL_GPIO_WritePin>
}
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	0800e2c8 	.word	0x0800e2c8

08006568 <LCD16X2_CMD>:

void LCD16X2_CMD(uint8_t LCD16X2_Index, unsigned char CMD)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0
 800656e:	4603      	mov	r3, r0
 8006570:	460a      	mov	r2, r1
 8006572:	71fb      	strb	r3, [r7, #7]
 8006574:	4613      	mov	r3, r2
 8006576:	71bb      	strb	r3, [r7, #6]
    // Select Command Register
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	4a57      	ldr	r2, [pc, #348]	@ (80066d8 <LCD16X2_CMD+0x170>)
 800657c:	2134      	movs	r1, #52	@ 0x34
 800657e:	fb01 f303 	mul.w	r3, r1, r3
 8006582:	4413      	add	r3, r2
 8006584:	332c      	adds	r3, #44	@ 0x2c
 8006586:	6818      	ldr	r0, [r3, #0]
 8006588:	79fb      	ldrb	r3, [r7, #7]
 800658a:	4a53      	ldr	r2, [pc, #332]	@ (80066d8 <LCD16X2_CMD+0x170>)
 800658c:	2134      	movs	r1, #52	@ 0x34
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	4413      	add	r3, r2
 8006594:	3330      	adds	r3, #48	@ 0x30
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	2200      	movs	r2, #0
 800659a:	4619      	mov	r1, r3
 800659c:	f7fd ff82 	bl	80044a4 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
	LCD16X2_DATA(LCD16X2_Index, CMD);
 80065a0:	79ba      	ldrb	r2, [r7, #6]
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	4611      	mov	r1, r2
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff ff18 	bl	80063dc <LCD16X2_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	4a4a      	ldr	r2, [pc, #296]	@ (80066d8 <LCD16X2_CMD+0x170>)
 80065b0:	2134      	movs	r1, #52	@ 0x34
 80065b2:	fb01 f303 	mul.w	r3, r1, r3
 80065b6:	4413      	add	r3, r2
 80065b8:	3324      	adds	r3, #36	@ 0x24
 80065ba:	6818      	ldr	r0, [r3, #0]
 80065bc:	79fb      	ldrb	r3, [r7, #7]
 80065be:	4a46      	ldr	r2, [pc, #280]	@ (80066d8 <LCD16X2_CMD+0x170>)
 80065c0:	2134      	movs	r1, #52	@ 0x34
 80065c2:	fb01 f303 	mul.w	r3, r1, r3
 80065c6:	4413      	add	r3, r2
 80065c8:	3328      	adds	r3, #40	@ 0x28
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	2200      	movs	r2, #0
 80065ce:	4619      	mov	r1, r3
 80065d0:	f7fd ff68 	bl	80044a4 <HAL_GPIO_WritePin>
    DELAY_US(5);
 80065d4:	4b41      	ldr	r3, [pc, #260]	@ (80066dc <LCD16X2_CMD+0x174>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	4b41      	ldr	r3, [pc, #260]	@ (80066e0 <LCD16X2_CMD+0x178>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a41      	ldr	r2, [pc, #260]	@ (80066e4 <LCD16X2_CMD+0x17c>)
 80065e0:	fba2 2303 	umull	r2, r3, r2, r3
 80065e4:	0c9a      	lsrs	r2, r3, #18
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	441a      	add	r2, r3
 80065ec:	4b3c      	ldr	r3, [pc, #240]	@ (80066e0 <LCD16X2_CMD+0x178>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	493c      	ldr	r1, [pc, #240]	@ (80066e4 <LCD16X2_CMD+0x17c>)
 80065f2:	fba1 1303 	umull	r1, r3, r1, r3
 80065f6:	0c9b      	lsrs	r3, r3, #18
 80065f8:	085b      	lsrs	r3, r3, #1
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	61bb      	str	r3, [r7, #24]
 80065fe:	4b37      	ldr	r3, [pc, #220]	@ (80066dc <LCD16X2_CMD+0x174>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	429a      	cmp	r2, r3
 800660a:	d8f8      	bhi.n	80065fe <LCD16X2_CMD+0x96>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	4a32      	ldr	r2, [pc, #200]	@ (80066d8 <LCD16X2_CMD+0x170>)
 8006610:	2134      	movs	r1, #52	@ 0x34
 8006612:	fb01 f303 	mul.w	r3, r1, r3
 8006616:	4413      	add	r3, r2
 8006618:	3324      	adds	r3, #36	@ 0x24
 800661a:	6818      	ldr	r0, [r3, #0]
 800661c:	79fb      	ldrb	r3, [r7, #7]
 800661e:	4a2e      	ldr	r2, [pc, #184]	@ (80066d8 <LCD16X2_CMD+0x170>)
 8006620:	2134      	movs	r1, #52	@ 0x34
 8006622:	fb01 f303 	mul.w	r3, r1, r3
 8006626:	4413      	add	r3, r2
 8006628:	3328      	adds	r3, #40	@ 0x28
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	2201      	movs	r2, #1
 800662e:	4619      	mov	r1, r3
 8006630:	f7fd ff38 	bl	80044a4 <HAL_GPIO_WritePin>
    DELAY_US(5);
 8006634:	4b29      	ldr	r3, [pc, #164]	@ (80066dc <LCD16X2_CMD+0x174>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	4b29      	ldr	r3, [pc, #164]	@ (80066e0 <LCD16X2_CMD+0x178>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a29      	ldr	r2, [pc, #164]	@ (80066e4 <LCD16X2_CMD+0x17c>)
 8006640:	fba2 2303 	umull	r2, r3, r2, r3
 8006644:	0c9a      	lsrs	r2, r3, #18
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	441a      	add	r2, r3
 800664c:	4b24      	ldr	r3, [pc, #144]	@ (80066e0 <LCD16X2_CMD+0x178>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4924      	ldr	r1, [pc, #144]	@ (80066e4 <LCD16X2_CMD+0x17c>)
 8006652:	fba1 1303 	umull	r1, r3, r1, r3
 8006656:	0c9b      	lsrs	r3, r3, #18
 8006658:	085b      	lsrs	r3, r3, #1
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	4b1f      	ldr	r3, [pc, #124]	@ (80066dc <LCD16X2_CMD+0x174>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	429a      	cmp	r2, r3
 800666a:	d8f8      	bhi.n	800665e <LCD16X2_CMD+0xf6>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 800666c:	79fb      	ldrb	r3, [r7, #7]
 800666e:	4a1a      	ldr	r2, [pc, #104]	@ (80066d8 <LCD16X2_CMD+0x170>)
 8006670:	2134      	movs	r1, #52	@ 0x34
 8006672:	fb01 f303 	mul.w	r3, r1, r3
 8006676:	4413      	add	r3, r2
 8006678:	3324      	adds	r3, #36	@ 0x24
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	4a16      	ldr	r2, [pc, #88]	@ (80066d8 <LCD16X2_CMD+0x170>)
 8006680:	2134      	movs	r1, #52	@ 0x34
 8006682:	fb01 f303 	mul.w	r3, r1, r3
 8006686:	4413      	add	r3, r2
 8006688:	3328      	adds	r3, #40	@ 0x28
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	2200      	movs	r2, #0
 800668e:	4619      	mov	r1, r3
 8006690:	f7fd ff08 	bl	80044a4 <HAL_GPIO_WritePin>
    DELAY_US(100);
 8006694:	4b11      	ldr	r3, [pc, #68]	@ (80066dc <LCD16X2_CMD+0x174>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	60fb      	str	r3, [r7, #12]
 800669a:	4b11      	ldr	r3, [pc, #68]	@ (80066e0 <LCD16X2_CMD+0x178>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a11      	ldr	r2, [pc, #68]	@ (80066e4 <LCD16X2_CMD+0x17c>)
 80066a0:	fba2 2303 	umull	r2, r3, r2, r3
 80066a4:	0c9b      	lsrs	r3, r3, #18
 80066a6:	2264      	movs	r2, #100	@ 0x64
 80066a8:	fb03 f202 	mul.w	r2, r3, r2
 80066ac:	4b0c      	ldr	r3, [pc, #48]	@ (80066e0 <LCD16X2_CMD+0x178>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	490c      	ldr	r1, [pc, #48]	@ (80066e4 <LCD16X2_CMD+0x17c>)
 80066b2:	fba1 1303 	umull	r1, r3, r1, r3
 80066b6:	0c9b      	lsrs	r3, r3, #18
 80066b8:	085b      	lsrs	r3, r3, #1
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	60bb      	str	r3, [r7, #8]
 80066be:	4b07      	ldr	r3, [pc, #28]	@ (80066dc <LCD16X2_CMD+0x174>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d8f8      	bhi.n	80066be <LCD16X2_CMD+0x156>
}
 80066cc:	bf00      	nop
 80066ce:	bf00      	nop
 80066d0:	3720      	adds	r7, #32
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	0800e2c8 	.word	0x0800e2c8
 80066dc:	e000e010 	.word	0xe000e010
 80066e0:	2000001c 	.word	0x2000001c
 80066e4:	431bde83 	.word	0x431bde83

080066e8 <LCD16X2_Clear>:

void LCD16X2_Clear(uint8_t LCD16X2_Index)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	4603      	mov	r3, r0
 80066f0:	71fb      	strb	r3, [r7, #7]
	LCD16X2_CMD(LCD16X2_Index, 0);
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	2100      	movs	r1, #0
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff ff36 	bl	8006568 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 1);
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	2101      	movs	r1, #1
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff ff31 	bl	8006568 <LCD16X2_CMD>
    DELAY_MS(2);
 8006706:	2300      	movs	r3, #0
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	e01f      	b.n	800674c <LCD16X2_Clear+0x64>
 800670c:	4b13      	ldr	r3, [pc, #76]	@ (800675c <LCD16X2_Clear+0x74>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	613b      	str	r3, [r7, #16]
 8006712:	4b13      	ldr	r3, [pc, #76]	@ (8006760 <LCD16X2_Clear+0x78>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a13      	ldr	r2, [pc, #76]	@ (8006764 <LCD16X2_Clear+0x7c>)
 8006718:	fba2 2303 	umull	r2, r3, r2, r3
 800671c:	0c9b      	lsrs	r3, r3, #18
 800671e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006722:	fb03 f202 	mul.w	r2, r3, r2
 8006726:	4b0e      	ldr	r3, [pc, #56]	@ (8006760 <LCD16X2_Clear+0x78>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	490e      	ldr	r1, [pc, #56]	@ (8006764 <LCD16X2_Clear+0x7c>)
 800672c:	fba1 1303 	umull	r1, r3, r1, r3
 8006730:	0c9b      	lsrs	r3, r3, #18
 8006732:	085b      	lsrs	r3, r3, #1
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	4b08      	ldr	r3, [pc, #32]	@ (800675c <LCD16X2_Clear+0x74>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	429a      	cmp	r2, r3
 8006744:	d8f8      	bhi.n	8006738 <LCD16X2_Clear+0x50>
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	3301      	adds	r3, #1
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d9dc      	bls.n	800670c <LCD16X2_Clear+0x24>
}
 8006752:	bf00      	nop
 8006754:	bf00      	nop
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	e000e010 	.word	0xe000e010
 8006760:	2000001c 	.word	0x2000001c
 8006764:	431bde83 	.word	0x431bde83

08006768 <LCD16X2_Set_Cursor>:

void LCD16X2_Set_Cursor(uint8_t LCD16X2_Index, unsigned char r, unsigned char c)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	4603      	mov	r3, r0
 8006770:	71fb      	strb	r3, [r7, #7]
 8006772:	460b      	mov	r3, r1
 8006774:	71bb      	strb	r3, [r7, #6]
 8006776:	4613      	mov	r3, r2
 8006778:	717b      	strb	r3, [r7, #5]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 800677a:	79bb      	ldrb	r3, [r7, #6]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d115      	bne.n	80067ac <LCD16X2_Set_Cursor+0x44>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 8006780:	797b      	ldrb	r3, [r7, #5]
 8006782:	337f      	adds	r3, #127	@ 0x7f
 8006784:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	091b      	lsrs	r3, r3, #4
 800678a:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 800678c:	7bfb      	ldrb	r3, [r7, #15]
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	737b      	strb	r3, [r7, #13]
      LCD16X2_CMD(LCD16X2_Index, High4);
 8006794:	7bba      	ldrb	r2, [r7, #14]
 8006796:	79fb      	ldrb	r3, [r7, #7]
 8006798:	4611      	mov	r1, r2
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fee4 	bl	8006568 <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 80067a0:	7b7a      	ldrb	r2, [r7, #13]
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	4611      	mov	r1, r2
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fede 	bl	8006568 <LCD16X2_CMD>
    }
    if(r == 2)
 80067ac:	79bb      	ldrb	r3, [r7, #6]
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d115      	bne.n	80067de <LCD16X2_Set_Cursor+0x76>
    {
      Temp  = 0xC0 + c - 1;
 80067b2:	797b      	ldrb	r3, [r7, #5]
 80067b4:	3b41      	subs	r3, #65	@ 0x41
 80067b6:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
 80067ba:	091b      	lsrs	r3, r3, #4
 80067bc:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	f003 030f 	and.w	r3, r3, #15
 80067c4:	737b      	strb	r3, [r7, #13]
      LCD16X2_CMD(LCD16X2_Index, High4);
 80067c6:	7bba      	ldrb	r2, [r7, #14]
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	4611      	mov	r1, r2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff fecb 	bl	8006568 <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 80067d2:	7b7a      	ldrb	r2, [r7, #13]
 80067d4:	79fb      	ldrb	r3, [r7, #7]
 80067d6:	4611      	mov	r1, r2
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff fec5 	bl	8006568 <LCD16X2_CMD>
    }
}
 80067de:	bf00      	nop
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <LCD16X2_Init>:

void LCD16X2_Init(uint8_t LCD16X2_Index)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08e      	sub	sp, #56	@ 0x38
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 80067f2:	bf00      	nop
 80067f4:	f7fb fd14 	bl	8002220 <HAL_GetTick>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b31      	cmp	r3, #49	@ 0x31
 80067fc:	d9fa      	bls.n	80067f4 <LCD16X2_Init+0xc>
	// The Init. Procedure As Described In The Datasheet
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	4a7c      	ldr	r2, [pc, #496]	@ (80069f4 <LCD16X2_Init+0x20c>)
 8006802:	2134      	movs	r1, #52	@ 0x34
 8006804:	fb01 f303 	mul.w	r3, r1, r3
 8006808:	4413      	add	r3, r2
 800680a:	332c      	adds	r3, #44	@ 0x2c
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	4a78      	ldr	r2, [pc, #480]	@ (80069f4 <LCD16X2_Init+0x20c>)
 8006812:	2134      	movs	r1, #52	@ 0x34
 8006814:	fb01 f303 	mul.w	r3, r1, r3
 8006818:	4413      	add	r3, r2
 800681a:	3330      	adds	r3, #48	@ 0x30
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	2200      	movs	r2, #0
 8006820:	4619      	mov	r1, r3
 8006822:	f7fd fe3f 	bl	80044a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8006826:	79fb      	ldrb	r3, [r7, #7]
 8006828:	4a72      	ldr	r2, [pc, #456]	@ (80069f4 <LCD16X2_Init+0x20c>)
 800682a:	2134      	movs	r1, #52	@ 0x34
 800682c:	fb01 f303 	mul.w	r3, r1, r3
 8006830:	4413      	add	r3, r2
 8006832:	3324      	adds	r3, #36	@ 0x24
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	4a6e      	ldr	r2, [pc, #440]	@ (80069f4 <LCD16X2_Init+0x20c>)
 800683a:	2134      	movs	r1, #52	@ 0x34
 800683c:	fb01 f303 	mul.w	r3, r1, r3
 8006840:	4413      	add	r3, r2
 8006842:	3328      	adds	r3, #40	@ 0x28
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	2200      	movs	r2, #0
 8006848:	4619      	mov	r1, r3
 800684a:	f7fd fe2b 	bl	80044a4 <HAL_GPIO_WritePin>
    // Init in 4-Bit Data Mode
	LCD16X2_DATA(LCD16X2_Index, 0x00);
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	2100      	movs	r1, #0
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff fdc2 	bl	80063dc <LCD16X2_DATA>
    DELAY_MS(150);
 8006858:	2300      	movs	r3, #0
 800685a:	637b      	str	r3, [r7, #52]	@ 0x34
 800685c:	e01f      	b.n	800689e <LCD16X2_Init+0xb6>
 800685e:	4b66      	ldr	r3, [pc, #408]	@ (80069f8 <LCD16X2_Init+0x210>)
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	613b      	str	r3, [r7, #16]
 8006864:	4b65      	ldr	r3, [pc, #404]	@ (80069fc <LCD16X2_Init+0x214>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a65      	ldr	r2, [pc, #404]	@ (8006a00 <LCD16X2_Init+0x218>)
 800686a:	fba2 2303 	umull	r2, r3, r2, r3
 800686e:	0c9b      	lsrs	r3, r3, #18
 8006870:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006874:	fb03 f202 	mul.w	r2, r3, r2
 8006878:	4b60      	ldr	r3, [pc, #384]	@ (80069fc <LCD16X2_Init+0x214>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4960      	ldr	r1, [pc, #384]	@ (8006a00 <LCD16X2_Init+0x218>)
 800687e:	fba1 1303 	umull	r1, r3, r1, r3
 8006882:	0c9b      	lsrs	r3, r3, #18
 8006884:	085b      	lsrs	r3, r3, #1
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	4b5b      	ldr	r3, [pc, #364]	@ (80069f8 <LCD16X2_Init+0x210>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	429a      	cmp	r2, r3
 8006896:	d8f8      	bhi.n	800688a <LCD16X2_Init+0xa2>
 8006898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800689a:	3301      	adds	r3, #1
 800689c:	637b      	str	r3, [r7, #52]	@ 0x34
 800689e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a0:	2b95      	cmp	r3, #149	@ 0x95
 80068a2:	d9dc      	bls.n	800685e <LCD16X2_Init+0x76>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 80068a4:	79fb      	ldrb	r3, [r7, #7]
 80068a6:	2103      	movs	r1, #3
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff fe5d 	bl	8006568 <LCD16X2_CMD>
    DELAY_MS(5);
 80068ae:	2300      	movs	r3, #0
 80068b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80068b2:	e01f      	b.n	80068f4 <LCD16X2_Init+0x10c>
 80068b4:	4b50      	ldr	r3, [pc, #320]	@ (80069f8 <LCD16X2_Init+0x210>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	61bb      	str	r3, [r7, #24]
 80068ba:	4b50      	ldr	r3, [pc, #320]	@ (80069fc <LCD16X2_Init+0x214>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a50      	ldr	r2, [pc, #320]	@ (8006a00 <LCD16X2_Init+0x218>)
 80068c0:	fba2 2303 	umull	r2, r3, r2, r3
 80068c4:	0c9b      	lsrs	r3, r3, #18
 80068c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80068ca:	fb03 f202 	mul.w	r2, r3, r2
 80068ce:	4b4b      	ldr	r3, [pc, #300]	@ (80069fc <LCD16X2_Init+0x214>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	494b      	ldr	r1, [pc, #300]	@ (8006a00 <LCD16X2_Init+0x218>)
 80068d4:	fba1 1303 	umull	r1, r3, r1, r3
 80068d8:	0c9b      	lsrs	r3, r3, #18
 80068da:	085b      	lsrs	r3, r3, #1
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	4b45      	ldr	r3, [pc, #276]	@ (80069f8 <LCD16X2_Init+0x210>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d8f8      	bhi.n	80068e0 <LCD16X2_Init+0xf8>
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	3301      	adds	r3, #1
 80068f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f6:	2b04      	cmp	r3, #4
 80068f8:	d9dc      	bls.n	80068b4 <LCD16X2_Init+0xcc>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 80068fa:	79fb      	ldrb	r3, [r7, #7]
 80068fc:	2103      	movs	r1, #3
 80068fe:	4618      	mov	r0, r3
 8006900:	f7ff fe32 	bl	8006568 <LCD16X2_CMD>
    DELAY_MS(5);
 8006904:	2300      	movs	r3, #0
 8006906:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006908:	e01f      	b.n	800694a <LCD16X2_Init+0x162>
 800690a:	4b3b      	ldr	r3, [pc, #236]	@ (80069f8 <LCD16X2_Init+0x210>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	623b      	str	r3, [r7, #32]
 8006910:	4b3a      	ldr	r3, [pc, #232]	@ (80069fc <LCD16X2_Init+0x214>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a3a      	ldr	r2, [pc, #232]	@ (8006a00 <LCD16X2_Init+0x218>)
 8006916:	fba2 2303 	umull	r2, r3, r2, r3
 800691a:	0c9b      	lsrs	r3, r3, #18
 800691c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006920:	fb03 f202 	mul.w	r2, r3, r2
 8006924:	4b35      	ldr	r3, [pc, #212]	@ (80069fc <LCD16X2_Init+0x214>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4935      	ldr	r1, [pc, #212]	@ (8006a00 <LCD16X2_Init+0x218>)
 800692a:	fba1 1303 	umull	r1, r3, r1, r3
 800692e:	0c9b      	lsrs	r3, r3, #18
 8006930:	085b      	lsrs	r3, r3, #1
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	61fb      	str	r3, [r7, #28]
 8006936:	4b30      	ldr	r3, [pc, #192]	@ (80069f8 <LCD16X2_Init+0x210>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	6a3a      	ldr	r2, [r7, #32]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	429a      	cmp	r2, r3
 8006942:	d8f8      	bhi.n	8006936 <LCD16X2_Init+0x14e>
 8006944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006946:	3301      	adds	r3, #1
 8006948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800694a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694c:	2b04      	cmp	r3, #4
 800694e:	d9dc      	bls.n	800690a <LCD16X2_Init+0x122>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 8006950:	79fb      	ldrb	r3, [r7, #7]
 8006952:	2103      	movs	r1, #3
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff fe07 	bl	8006568 <LCD16X2_CMD>
    DELAY_US(150);
 800695a:	4b27      	ldr	r3, [pc, #156]	@ (80069f8 <LCD16X2_Init+0x210>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006960:	4b26      	ldr	r3, [pc, #152]	@ (80069fc <LCD16X2_Init+0x214>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a26      	ldr	r2, [pc, #152]	@ (8006a00 <LCD16X2_Init+0x218>)
 8006966:	fba2 2303 	umull	r2, r3, r2, r3
 800696a:	0c9b      	lsrs	r3, r3, #18
 800696c:	2296      	movs	r2, #150	@ 0x96
 800696e:	fb03 f202 	mul.w	r2, r3, r2
 8006972:	4b22      	ldr	r3, [pc, #136]	@ (80069fc <LCD16X2_Init+0x214>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4922      	ldr	r1, [pc, #136]	@ (8006a00 <LCD16X2_Init+0x218>)
 8006978:	fba1 1303 	umull	r1, r3, r1, r3
 800697c:	0c9b      	lsrs	r3, r3, #18
 800697e:	085b      	lsrs	r3, r3, #1
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	627b      	str	r3, [r7, #36]	@ 0x24
 8006984:	4b1c      	ldr	r3, [pc, #112]	@ (80069f8 <LCD16X2_Init+0x210>)
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800698e:	429a      	cmp	r2, r3
 8006990:	d8f8      	bhi.n	8006984 <LCD16X2_Init+0x19c>
    // The Rest of The Init Sequence As Defined in The Hitachi HD44780 Datasheet
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	2102      	movs	r1, #2
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff fde6 	bl	8006568 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	2102      	movs	r1, #2
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff fde1 	bl	8006568 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x08);
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	2108      	movs	r1, #8
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff fddc 	bl	8006568 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	2100      	movs	r1, #0
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff fdd7 	bl	8006568 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x0C);
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	210c      	movs	r1, #12
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff fdd2 	bl	8006568 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	2100      	movs	r1, #0
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff fdcd 	bl	8006568 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x06);
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	2106      	movs	r1, #6
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff fdc8 	bl	8006568 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 80069d8:	79fb      	ldrb	r3, [r7, #7]
 80069da:	2100      	movs	r1, #0
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff fdc3 	bl	8006568 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x01);
 80069e2:	79fb      	ldrb	r3, [r7, #7]
 80069e4:	2101      	movs	r1, #1
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff fdbe 	bl	8006568 <LCD16X2_CMD>
}
 80069ec:	bf00      	nop
 80069ee:	3738      	adds	r7, #56	@ 0x38
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	0800e2c8 	.word	0x0800e2c8
 80069f8:	e000e010 	.word	0xe000e010
 80069fc:	2000001c 	.word	0x2000001c
 8006a00:	431bde83 	.word	0x431bde83

08006a04 <LCD16X2_Write_Char>:

void LCD16X2_Write_Char(uint8_t LCD16X2_Index, char Data)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b090      	sub	sp, #64	@ 0x40
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	460a      	mov	r2, r1
 8006a0e:	71fb      	strb	r3, [r7, #7]
 8006a10:	4613      	mov	r3, r2
 8006a12:	71bb      	strb	r3, [r7, #6]
   char Low4,High4;
   Low4  = Data & 0x0F;
 8006a14:	79bb      	ldrb	r3, [r7, #6]
 8006a16:	f003 030f 	and.w	r3, r3, #15
 8006a1a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
   High4 = Data & 0xF0;
 8006a1e:	79bb      	ldrb	r3, [r7, #6]
 8006a20:	f023 030f 	bic.w	r3, r3, #15
 8006a24:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 1);
 8006a28:	79fb      	ldrb	r3, [r7, #7]
 8006a2a:	4aa4      	ldr	r2, [pc, #656]	@ (8006cbc <LCD16X2_Write_Char+0x2b8>)
 8006a2c:	2134      	movs	r1, #52	@ 0x34
 8006a2e:	fb01 f303 	mul.w	r3, r1, r3
 8006a32:	4413      	add	r3, r2
 8006a34:	332c      	adds	r3, #44	@ 0x2c
 8006a36:	6818      	ldr	r0, [r3, #0]
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	4aa0      	ldr	r2, [pc, #640]	@ (8006cbc <LCD16X2_Write_Char+0x2b8>)
 8006a3c:	2134      	movs	r1, #52	@ 0x34
 8006a3e:	fb01 f303 	mul.w	r3, r1, r3
 8006a42:	4413      	add	r3, r2
 8006a44:	3330      	adds	r3, #48	@ 0x30
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	f7fd fd2a 	bl	80044a4 <HAL_GPIO_WritePin>

   LCD16X2_DATA(LCD16X2_Index, (High4>>4));
 8006a50:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006a54:	091b      	lsrs	r3, r3, #4
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	79fb      	ldrb	r3, [r7, #7]
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7ff fcbd 	bl	80063dc <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8006a62:	79fb      	ldrb	r3, [r7, #7]
 8006a64:	4a95      	ldr	r2, [pc, #596]	@ (8006cbc <LCD16X2_Write_Char+0x2b8>)
 8006a66:	2134      	movs	r1, #52	@ 0x34
 8006a68:	fb01 f303 	mul.w	r3, r1, r3
 8006a6c:	4413      	add	r3, r2
 8006a6e:	3324      	adds	r3, #36	@ 0x24
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	79fb      	ldrb	r3, [r7, #7]
 8006a74:	4a91      	ldr	r2, [pc, #580]	@ (8006cbc <LCD16X2_Write_Char+0x2b8>)
 8006a76:	2134      	movs	r1, #52	@ 0x34
 8006a78:	fb01 f303 	mul.w	r3, r1, r3
 8006a7c:	4413      	add	r3, r2
 8006a7e:	3328      	adds	r3, #40	@ 0x28
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	2200      	movs	r2, #0
 8006a84:	4619      	mov	r1, r3
 8006a86:	f7fd fd0d 	bl	80044a4 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8006a8a:	4b8d      	ldr	r3, [pc, #564]	@ (8006cc0 <LCD16X2_Write_Char+0x2bc>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a90:	4b8c      	ldr	r3, [pc, #560]	@ (8006cc4 <LCD16X2_Write_Char+0x2c0>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a8c      	ldr	r2, [pc, #560]	@ (8006cc8 <LCD16X2_Write_Char+0x2c4>)
 8006a96:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9a:	0c9a      	lsrs	r2, r3, #18
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	441a      	add	r2, r3
 8006aa2:	4b88      	ldr	r3, [pc, #544]	@ (8006cc4 <LCD16X2_Write_Char+0x2c0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4988      	ldr	r1, [pc, #544]	@ (8006cc8 <LCD16X2_Write_Char+0x2c4>)
 8006aa8:	fba1 1303 	umull	r1, r3, r1, r3
 8006aac:	0c9b      	lsrs	r3, r3, #18
 8006aae:	085b      	lsrs	r3, r3, #1
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab4:	4b82      	ldr	r3, [pc, #520]	@ (8006cc0 <LCD16X2_Write_Char+0x2bc>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d8f8      	bhi.n	8006ab4 <LCD16X2_Write_Char+0xb0>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8006ac2:	79fb      	ldrb	r3, [r7, #7]
 8006ac4:	4a7d      	ldr	r2, [pc, #500]	@ (8006cbc <LCD16X2_Write_Char+0x2b8>)
 8006ac6:	2134      	movs	r1, #52	@ 0x34
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	4413      	add	r3, r2
 8006ace:	3324      	adds	r3, #36	@ 0x24
 8006ad0:	6818      	ldr	r0, [r3, #0]
 8006ad2:	79fb      	ldrb	r3, [r7, #7]
 8006ad4:	4a79      	ldr	r2, [pc, #484]	@ (8006cbc <LCD16X2_Write_Char+0x2b8>)
 8006ad6:	2134      	movs	r1, #52	@ 0x34
 8006ad8:	fb01 f303 	mul.w	r3, r1, r3
 8006adc:	4413      	add	r3, r2
 8006ade:	3328      	adds	r3, #40	@ 0x28
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	f7fd fcdd 	bl	80044a4 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8006aea:	4b75      	ldr	r3, [pc, #468]	@ (8006cc0 <LCD16X2_Write_Char+0x2bc>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	633b      	str	r3, [r7, #48]	@ 0x30
 8006af0:	4b74      	ldr	r3, [pc, #464]	@ (8006cc4 <LCD16X2_Write_Char+0x2c0>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a74      	ldr	r2, [pc, #464]	@ (8006cc8 <LCD16X2_Write_Char+0x2c4>)
 8006af6:	fba2 2303 	umull	r2, r3, r2, r3
 8006afa:	0c9a      	lsrs	r2, r3, #18
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	441a      	add	r2, r3
 8006b02:	4b70      	ldr	r3, [pc, #448]	@ (8006cc4 <LCD16X2_Write_Char+0x2c0>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4970      	ldr	r1, [pc, #448]	@ (8006cc8 <LCD16X2_Write_Char+0x2c4>)
 8006b08:	fba1 1303 	umull	r1, r3, r1, r3
 8006b0c:	0c9b      	lsrs	r3, r3, #18
 8006b0e:	085b      	lsrs	r3, r3, #1
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b14:	4b6a      	ldr	r3, [pc, #424]	@ (8006cc0 <LCD16X2_Write_Char+0x2bc>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d8f8      	bhi.n	8006b14 <LCD16X2_Write_Char+0x110>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	4a65      	ldr	r2, [pc, #404]	@ (8006cbc <LCD16X2_Write_Char+0x2b8>)
 8006b26:	2134      	movs	r1, #52	@ 0x34
 8006b28:	fb01 f303 	mul.w	r3, r1, r3
 8006b2c:	4413      	add	r3, r2
 8006b2e:	3324      	adds	r3, #36	@ 0x24
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	79fb      	ldrb	r3, [r7, #7]
 8006b34:	4a61      	ldr	r2, [pc, #388]	@ (8006cbc <LCD16X2_Write_Char+0x2b8>)
 8006b36:	2134      	movs	r1, #52	@ 0x34
 8006b38:	fb01 f303 	mul.w	r3, r1, r3
 8006b3c:	4413      	add	r3, r2
 8006b3e:	3328      	adds	r3, #40	@ 0x28
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	2200      	movs	r2, #0
 8006b44:	4619      	mov	r1, r3
 8006b46:	f7fd fcad 	bl	80044a4 <HAL_GPIO_WritePin>
   DELAY_US(100);
 8006b4a:	4b5d      	ldr	r3, [pc, #372]	@ (8006cc0 <LCD16X2_Write_Char+0x2bc>)
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b50:	4b5c      	ldr	r3, [pc, #368]	@ (8006cc4 <LCD16X2_Write_Char+0x2c0>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a5c      	ldr	r2, [pc, #368]	@ (8006cc8 <LCD16X2_Write_Char+0x2c4>)
 8006b56:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5a:	0c9b      	lsrs	r3, r3, #18
 8006b5c:	2264      	movs	r2, #100	@ 0x64
 8006b5e:	fb03 f202 	mul.w	r2, r3, r2
 8006b62:	4b58      	ldr	r3, [pc, #352]	@ (8006cc4 <LCD16X2_Write_Char+0x2c0>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4958      	ldr	r1, [pc, #352]	@ (8006cc8 <LCD16X2_Write_Char+0x2c4>)
 8006b68:	fba1 1303 	umull	r1, r3, r1, r3
 8006b6c:	0c9b      	lsrs	r3, r3, #18
 8006b6e:	085b      	lsrs	r3, r3, #1
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b74:	4b52      	ldr	r3, [pc, #328]	@ (8006cc0 <LCD16X2_Write_Char+0x2bc>)
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d8f8      	bhi.n	8006b74 <LCD16X2_Write_Char+0x170>

   LCD16X2_DATA(LCD16X2_Index, Low4);
 8006b82:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8006b86:	79fb      	ldrb	r3, [r7, #7]
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff fc26 	bl	80063dc <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	4a4a      	ldr	r2, [pc, #296]	@ (8006cbc <LCD16X2_Write_Char+0x2b8>)
 8006b94:	2134      	movs	r1, #52	@ 0x34
 8006b96:	fb01 f303 	mul.w	r3, r1, r3
 8006b9a:	4413      	add	r3, r2
 8006b9c:	3324      	adds	r3, #36	@ 0x24
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	79fb      	ldrb	r3, [r7, #7]
 8006ba2:	4a46      	ldr	r2, [pc, #280]	@ (8006cbc <LCD16X2_Write_Char+0x2b8>)
 8006ba4:	2134      	movs	r1, #52	@ 0x34
 8006ba6:	fb01 f303 	mul.w	r3, r1, r3
 8006baa:	4413      	add	r3, r2
 8006bac:	3328      	adds	r3, #40	@ 0x28
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	f7fd fc76 	bl	80044a4 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8006bb8:	4b41      	ldr	r3, [pc, #260]	@ (8006cc0 <LCD16X2_Write_Char+0x2bc>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	623b      	str	r3, [r7, #32]
 8006bbe:	4b41      	ldr	r3, [pc, #260]	@ (8006cc4 <LCD16X2_Write_Char+0x2c0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a41      	ldr	r2, [pc, #260]	@ (8006cc8 <LCD16X2_Write_Char+0x2c4>)
 8006bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc8:	0c9a      	lsrs	r2, r3, #18
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	441a      	add	r2, r3
 8006bd0:	4b3c      	ldr	r3, [pc, #240]	@ (8006cc4 <LCD16X2_Write_Char+0x2c0>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	493c      	ldr	r1, [pc, #240]	@ (8006cc8 <LCD16X2_Write_Char+0x2c4>)
 8006bd6:	fba1 1303 	umull	r1, r3, r1, r3
 8006bda:	0c9b      	lsrs	r3, r3, #18
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	61fb      	str	r3, [r7, #28]
 8006be2:	4b37      	ldr	r3, [pc, #220]	@ (8006cc0 <LCD16X2_Write_Char+0x2bc>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	6a3a      	ldr	r2, [r7, #32]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d8f8      	bhi.n	8006be2 <LCD16X2_Write_Char+0x1de>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8006bf0:	79fb      	ldrb	r3, [r7, #7]
 8006bf2:	4a32      	ldr	r2, [pc, #200]	@ (8006cbc <LCD16X2_Write_Char+0x2b8>)
 8006bf4:	2134      	movs	r1, #52	@ 0x34
 8006bf6:	fb01 f303 	mul.w	r3, r1, r3
 8006bfa:	4413      	add	r3, r2
 8006bfc:	3324      	adds	r3, #36	@ 0x24
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	79fb      	ldrb	r3, [r7, #7]
 8006c02:	4a2e      	ldr	r2, [pc, #184]	@ (8006cbc <LCD16X2_Write_Char+0x2b8>)
 8006c04:	2134      	movs	r1, #52	@ 0x34
 8006c06:	fb01 f303 	mul.w	r3, r1, r3
 8006c0a:	4413      	add	r3, r2
 8006c0c:	3328      	adds	r3, #40	@ 0x28
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	2201      	movs	r2, #1
 8006c12:	4619      	mov	r1, r3
 8006c14:	f7fd fc46 	bl	80044a4 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8006c18:	4b29      	ldr	r3, [pc, #164]	@ (8006cc0 <LCD16X2_Write_Char+0x2bc>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	61bb      	str	r3, [r7, #24]
 8006c1e:	4b29      	ldr	r3, [pc, #164]	@ (8006cc4 <LCD16X2_Write_Char+0x2c0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a29      	ldr	r2, [pc, #164]	@ (8006cc8 <LCD16X2_Write_Char+0x2c4>)
 8006c24:	fba2 2303 	umull	r2, r3, r2, r3
 8006c28:	0c9a      	lsrs	r2, r3, #18
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	441a      	add	r2, r3
 8006c30:	4b24      	ldr	r3, [pc, #144]	@ (8006cc4 <LCD16X2_Write_Char+0x2c0>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4924      	ldr	r1, [pc, #144]	@ (8006cc8 <LCD16X2_Write_Char+0x2c4>)
 8006c36:	fba1 1303 	umull	r1, r3, r1, r3
 8006c3a:	0c9b      	lsrs	r3, r3, #18
 8006c3c:	085b      	lsrs	r3, r3, #1
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	4b1f      	ldr	r3, [pc, #124]	@ (8006cc0 <LCD16X2_Write_Char+0x2bc>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d8f8      	bhi.n	8006c42 <LCD16X2_Write_Char+0x23e>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8006c50:	79fb      	ldrb	r3, [r7, #7]
 8006c52:	4a1a      	ldr	r2, [pc, #104]	@ (8006cbc <LCD16X2_Write_Char+0x2b8>)
 8006c54:	2134      	movs	r1, #52	@ 0x34
 8006c56:	fb01 f303 	mul.w	r3, r1, r3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	3324      	adds	r3, #36	@ 0x24
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	4a16      	ldr	r2, [pc, #88]	@ (8006cbc <LCD16X2_Write_Char+0x2b8>)
 8006c64:	2134      	movs	r1, #52	@ 0x34
 8006c66:	fb01 f303 	mul.w	r3, r1, r3
 8006c6a:	4413      	add	r3, r2
 8006c6c:	3328      	adds	r3, #40	@ 0x28
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	2200      	movs	r2, #0
 8006c72:	4619      	mov	r1, r3
 8006c74:	f7fd fc16 	bl	80044a4 <HAL_GPIO_WritePin>
   DELAY_US(100);
 8006c78:	4b11      	ldr	r3, [pc, #68]	@ (8006cc0 <LCD16X2_Write_Char+0x2bc>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	4b11      	ldr	r3, [pc, #68]	@ (8006cc4 <LCD16X2_Write_Char+0x2c0>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a11      	ldr	r2, [pc, #68]	@ (8006cc8 <LCD16X2_Write_Char+0x2c4>)
 8006c84:	fba2 2303 	umull	r2, r3, r2, r3
 8006c88:	0c9b      	lsrs	r3, r3, #18
 8006c8a:	2264      	movs	r2, #100	@ 0x64
 8006c8c:	fb03 f202 	mul.w	r2, r3, r2
 8006c90:	4b0c      	ldr	r3, [pc, #48]	@ (8006cc4 <LCD16X2_Write_Char+0x2c0>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	490c      	ldr	r1, [pc, #48]	@ (8006cc8 <LCD16X2_Write_Char+0x2c4>)
 8006c96:	fba1 1303 	umull	r1, r3, r1, r3
 8006c9a:	0c9b      	lsrs	r3, r3, #18
 8006c9c:	085b      	lsrs	r3, r3, #1
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	4b07      	ldr	r3, [pc, #28]	@ (8006cc0 <LCD16X2_Write_Char+0x2bc>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d8f8      	bhi.n	8006ca2 <LCD16X2_Write_Char+0x29e>
}
 8006cb0:	bf00      	nop
 8006cb2:	bf00      	nop
 8006cb4:	3740      	adds	r7, #64	@ 0x40
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	0800e2c8 	.word	0x0800e2c8
 8006cc0:	e000e010 	.word	0xe000e010
 8006cc4:	2000001c 	.word	0x2000001c
 8006cc8:	431bde83 	.word	0x431bde83

08006ccc <LCD16X2_Write_String>:

void LCD16X2_Write_String(uint8_t LCD16X2_Index, char *str)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	6039      	str	r1, [r7, #0]
 8006cd6:	71fb      	strb	r3, [r7, #7]
    int i;
    for(i=0; str[i]!='\0'; i++)
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	e00b      	b.n	8006cf6 <LCD16X2_Write_String+0x2a>
    {
    	LCD16X2_Write_Char(LCD16X2_Index, str[i]);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	781a      	ldrb	r2, [r3, #0]
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	4611      	mov	r1, r2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff fe8a 	bl	8006a04 <LCD16X2_Write_Char>
    for(i=0; str[i]!='\0'; i++)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	60fb      	str	r3, [r7, #12]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1ed      	bne.n	8006cde <LCD16X2_Write_String+0x12>
    }
}
 8006d02:	bf00      	nop
 8006d04:	bf00      	nop
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <__NVIC_SetPriority>:
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4603      	mov	r3, r0
 8006d14:	6039      	str	r1, [r7, #0]
 8006d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	db0a      	blt.n	8006d36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	490c      	ldr	r1, [pc, #48]	@ (8006d58 <__NVIC_SetPriority+0x4c>)
 8006d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d2a:	0112      	lsls	r2, r2, #4
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	440b      	add	r3, r1
 8006d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006d34:	e00a      	b.n	8006d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	4908      	ldr	r1, [pc, #32]	@ (8006d5c <__NVIC_SetPriority+0x50>)
 8006d3c:	79fb      	ldrb	r3, [r7, #7]
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	3b04      	subs	r3, #4
 8006d44:	0112      	lsls	r2, r2, #4
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	440b      	add	r3, r1
 8006d4a:	761a      	strb	r2, [r3, #24]
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	e000e100 	.word	0xe000e100
 8006d5c:	e000ed00 	.word	0xe000ed00

08006d60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006d64:	4b05      	ldr	r3, [pc, #20]	@ (8006d7c <SysTick_Handler+0x1c>)
 8006d66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006d68:	f001 fd46 	bl	80087f8 <xTaskGetSchedulerState>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d001      	beq.n	8006d76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006d72:	f002 fb41 	bl	80093f8 <xPortSysTickHandler>
  }
}
 8006d76:	bf00      	nop
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	e000e010 	.word	0xe000e010

08006d80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006d84:	2100      	movs	r1, #0
 8006d86:	f06f 0004 	mvn.w	r0, #4
 8006d8a:	f7ff ffbf 	bl	8006d0c <__NVIC_SetPriority>
#endif
}
 8006d8e:	bf00      	nop
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d9a:	f3ef 8305 	mrs	r3, IPSR
 8006d9e:	603b      	str	r3, [r7, #0]
  return(result);
 8006da0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006da6:	f06f 0305 	mvn.w	r3, #5
 8006daa:	607b      	str	r3, [r7, #4]
 8006dac:	e00c      	b.n	8006dc8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006dae:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd8 <osKernelInitialize+0x44>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d105      	bne.n	8006dc2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006db6:	4b08      	ldr	r3, [pc, #32]	@ (8006dd8 <osKernelInitialize+0x44>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	607b      	str	r3, [r7, #4]
 8006dc0:	e002      	b.n	8006dc8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006dc8:	687b      	ldr	r3, [r7, #4]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20000578 	.word	0x20000578

08006ddc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006de2:	f3ef 8305 	mrs	r3, IPSR
 8006de6:	603b      	str	r3, [r7, #0]
  return(result);
 8006de8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006dee:	f06f 0305 	mvn.w	r3, #5
 8006df2:	607b      	str	r3, [r7, #4]
 8006df4:	e010      	b.n	8006e18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006df6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e24 <osKernelStart+0x48>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d109      	bne.n	8006e12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006dfe:	f7ff ffbf 	bl	8006d80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e02:	4b08      	ldr	r3, [pc, #32]	@ (8006e24 <osKernelStart+0x48>)
 8006e04:	2202      	movs	r2, #2
 8006e06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e08:	f001 f892 	bl	8007f30 <vTaskStartScheduler>
      stat = osOK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	607b      	str	r3, [r7, #4]
 8006e10:	e002      	b.n	8006e18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006e12:	f04f 33ff 	mov.w	r3, #4294967295
 8006e16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e18:	687b      	ldr	r3, [r7, #4]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20000578 	.word	0x20000578

08006e28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08e      	sub	sp, #56	@ 0x38
 8006e2c:	af04      	add	r7, sp, #16
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e38:	f3ef 8305 	mrs	r3, IPSR
 8006e3c:	617b      	str	r3, [r7, #20]
  return(result);
 8006e3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d17e      	bne.n	8006f42 <osThreadNew+0x11a>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d07b      	beq.n	8006f42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006e4a:	2380      	movs	r3, #128	@ 0x80
 8006e4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006e4e:	2318      	movs	r3, #24
 8006e50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006e56:	f04f 33ff 	mov.w	r3, #4294967295
 8006e5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d045      	beq.n	8006eee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <osThreadNew+0x48>
        name = attr->name;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d008      	beq.n	8006e96 <osThreadNew+0x6e>
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	2b38      	cmp	r3, #56	@ 0x38
 8006e88:	d805      	bhi.n	8006e96 <osThreadNew+0x6e>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <osThreadNew+0x72>
        return (NULL);
 8006e96:	2300      	movs	r3, #0
 8006e98:	e054      	b.n	8006f44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	089b      	lsrs	r3, r3, #2
 8006ea8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00e      	beq.n	8006ed0 <osThreadNew+0xa8>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	2ba7      	cmp	r3, #167	@ 0xa7
 8006eb8:	d90a      	bls.n	8006ed0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d006      	beq.n	8006ed0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <osThreadNew+0xa8>
        mem = 1;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	e010      	b.n	8006ef2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10c      	bne.n	8006ef2 <osThreadNew+0xca>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d108      	bne.n	8006ef2 <osThreadNew+0xca>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d104      	bne.n	8006ef2 <osThreadNew+0xca>
          mem = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	61bb      	str	r3, [r7, #24]
 8006eec:	e001      	b.n	8006ef2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d110      	bne.n	8006f1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f00:	9202      	str	r2, [sp, #8]
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	6a3a      	ldr	r2, [r7, #32]
 8006f0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 fe1a 	bl	8007b48 <xTaskCreateStatic>
 8006f14:	4603      	mov	r3, r0
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	e013      	b.n	8006f42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d110      	bne.n	8006f42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	f107 0310 	add.w	r3, r7, #16
 8006f28:	9301      	str	r3, [sp, #4]
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 fe68 	bl	8007c08 <xTaskCreate>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d001      	beq.n	8006f42 <osThreadNew+0x11a>
            hTask = NULL;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006f42:	693b      	ldr	r3, [r7, #16]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3728      	adds	r7, #40	@ 0x28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f54:	f3ef 8305 	mrs	r3, IPSR
 8006f58:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <osDelay+0x1c>
    stat = osErrorISR;
 8006f60:	f06f 0305 	mvn.w	r3, #5
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	e007      	b.n	8006f78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 ffa6 	bl	8007ec4 <vTaskDelay>
    }
  }

  return (stat);
 8006f78:	68fb      	ldr	r3, [r7, #12]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4a07      	ldr	r2, [pc, #28]	@ (8006fb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4a06      	ldr	r2, [pc, #24]	@ (8006fb4 <vApplicationGetIdleTaskMemory+0x30>)
 8006f9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2280      	movs	r2, #128	@ 0x80
 8006fa0:	601a      	str	r2, [r3, #0]
}
 8006fa2:	bf00      	nop
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	2000057c 	.word	0x2000057c
 8006fb4:	20000624 	.word	0x20000624

08006fb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4a07      	ldr	r2, [pc, #28]	@ (8006fe4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006fc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	4a06      	ldr	r2, [pc, #24]	@ (8006fe8 <vApplicationGetTimerTaskMemory+0x30>)
 8006fce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006fd6:	601a      	str	r2, [r3, #0]
}
 8006fd8:	bf00      	nop
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	20000824 	.word	0x20000824
 8006fe8:	200008cc 	.word	0x200008cc

08006fec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f103 0208 	add.w	r2, r3, #8
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f04f 32ff 	mov.w	r2, #4294967295
 8007004:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f103 0208 	add.w	r2, r3, #8
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f103 0208 	add.w	r2, r3, #8
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800703a:	bf00      	nop
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007046:	b480      	push	{r7}
 8007048:	b085      	sub	sp, #20
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	601a      	str	r2, [r3, #0]
}
 8007082:	bf00      	nop
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800708e:	b480      	push	{r7}
 8007090:	b085      	sub	sp, #20
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a4:	d103      	bne.n	80070ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	e00c      	b.n	80070c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	3308      	adds	r3, #8
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	e002      	b.n	80070bc <vListInsert+0x2e>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d2f6      	bcs.n	80070b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	601a      	str	r2, [r3, #0]
}
 80070f4:	bf00      	nop
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6892      	ldr	r2, [r2, #8]
 8007116:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6852      	ldr	r2, [r2, #4]
 8007120:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	429a      	cmp	r2, r3
 800712a:	d103      	bne.n	8007134 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	1e5a      	subs	r2, r3, #1
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10b      	bne.n	8007180 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800717a:	bf00      	nop
 800717c:	bf00      	nop
 800717e:	e7fd      	b.n	800717c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007180:	f002 f8aa 	bl	80092d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800718c:	68f9      	ldr	r1, [r7, #12]
 800718e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007190:	fb01 f303 	mul.w	r3, r1, r3
 8007194:	441a      	add	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b0:	3b01      	subs	r3, #1
 80071b2:	68f9      	ldr	r1, [r7, #12]
 80071b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80071b6:	fb01 f303 	mul.w	r3, r1, r3
 80071ba:	441a      	add	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	22ff      	movs	r2, #255	@ 0xff
 80071c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	22ff      	movs	r2, #255	@ 0xff
 80071cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d114      	bne.n	8007200 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d01a      	beq.n	8007214 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3310      	adds	r3, #16
 80071e2:	4618      	mov	r0, r3
 80071e4:	f001 f942 	bl	800846c <xTaskRemoveFromEventList>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d012      	beq.n	8007214 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80071ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007224 <xQueueGenericReset+0xd0>)
 80071f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	e009      	b.n	8007214 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	3310      	adds	r3, #16
 8007204:	4618      	mov	r0, r3
 8007206:	f7ff fef1 	bl	8006fec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3324      	adds	r3, #36	@ 0x24
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff feec 	bl	8006fec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007214:	f002 f892 	bl	800933c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007218:	2301      	movs	r3, #1
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	e000ed04 	.word	0xe000ed04

08007228 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08e      	sub	sp, #56	@ 0x38
 800722c:	af02      	add	r7, sp, #8
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10b      	bne.n	8007254 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800724e:	bf00      	nop
 8007250:	bf00      	nop
 8007252:	e7fd      	b.n	8007250 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10b      	bne.n	8007272 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800725a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800726c:	bf00      	nop
 800726e:	bf00      	nop
 8007270:	e7fd      	b.n	800726e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <xQueueGenericCreateStatic+0x56>
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <xQueueGenericCreateStatic+0x5a>
 800727e:	2301      	movs	r3, #1
 8007280:	e000      	b.n	8007284 <xQueueGenericCreateStatic+0x5c>
 8007282:	2300      	movs	r3, #0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10b      	bne.n	80072a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	623b      	str	r3, [r7, #32]
}
 800729a:	bf00      	nop
 800729c:	bf00      	nop
 800729e:	e7fd      	b.n	800729c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d102      	bne.n	80072ac <xQueueGenericCreateStatic+0x84>
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <xQueueGenericCreateStatic+0x88>
 80072ac:	2301      	movs	r3, #1
 80072ae:	e000      	b.n	80072b2 <xQueueGenericCreateStatic+0x8a>
 80072b0:	2300      	movs	r3, #0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10b      	bne.n	80072ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	61fb      	str	r3, [r7, #28]
}
 80072c8:	bf00      	nop
 80072ca:	bf00      	nop
 80072cc:	e7fd      	b.n	80072ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80072ce:	2350      	movs	r3, #80	@ 0x50
 80072d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2b50      	cmp	r3, #80	@ 0x50
 80072d6:	d00b      	beq.n	80072f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80072d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	61bb      	str	r3, [r7, #24]
}
 80072ea:	bf00      	nop
 80072ec:	bf00      	nop
 80072ee:	e7fd      	b.n	80072ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80072f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80072f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00d      	beq.n	8007318 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80072fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007304:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	4613      	mov	r3, r2
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	68b9      	ldr	r1, [r7, #8]
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 f805 	bl	8007322 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800731a:	4618      	mov	r0, r3
 800731c:	3730      	adds	r7, #48	@ 0x30
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	607a      	str	r2, [r7, #4]
 800732e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d103      	bne.n	800733e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	e002      	b.n	8007344 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007350:	2101      	movs	r1, #1
 8007352:	69b8      	ldr	r0, [r7, #24]
 8007354:	f7ff fefe 	bl	8007154 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	78fa      	ldrb	r2, [r7, #3]
 800735c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007360:	bf00      	nop
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08e      	sub	sp, #56	@ 0x38
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007376:	2300      	movs	r3, #0
 8007378:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800737e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10b      	bne.n	800739c <xQueueGenericSend+0x34>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007396:	bf00      	nop
 8007398:	bf00      	nop
 800739a:	e7fd      	b.n	8007398 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d103      	bne.n	80073aa <xQueueGenericSend+0x42>
 80073a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <xQueueGenericSend+0x46>
 80073aa:	2301      	movs	r3, #1
 80073ac:	e000      	b.n	80073b0 <xQueueGenericSend+0x48>
 80073ae:	2300      	movs	r3, #0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10b      	bne.n	80073cc <xQueueGenericSend+0x64>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80073c6:	bf00      	nop
 80073c8:	bf00      	nop
 80073ca:	e7fd      	b.n	80073c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d103      	bne.n	80073da <xQueueGenericSend+0x72>
 80073d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d101      	bne.n	80073de <xQueueGenericSend+0x76>
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <xQueueGenericSend+0x78>
 80073de:	2300      	movs	r3, #0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10b      	bne.n	80073fc <xQueueGenericSend+0x94>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	623b      	str	r3, [r7, #32]
}
 80073f6:	bf00      	nop
 80073f8:	bf00      	nop
 80073fa:	e7fd      	b.n	80073f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073fc:	f001 f9fc 	bl	80087f8 <xTaskGetSchedulerState>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d102      	bne.n	800740c <xQueueGenericSend+0xa4>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <xQueueGenericSend+0xa8>
 800740c:	2301      	movs	r3, #1
 800740e:	e000      	b.n	8007412 <xQueueGenericSend+0xaa>
 8007410:	2300      	movs	r3, #0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10b      	bne.n	800742e <xQueueGenericSend+0xc6>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	61fb      	str	r3, [r7, #28]
}
 8007428:	bf00      	nop
 800742a:	bf00      	nop
 800742c:	e7fd      	b.n	800742a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800742e:	f001 ff53 	bl	80092d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007434:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800743a:	429a      	cmp	r2, r3
 800743c:	d302      	bcc.n	8007444 <xQueueGenericSend+0xdc>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b02      	cmp	r3, #2
 8007442:	d129      	bne.n	8007498 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	68b9      	ldr	r1, [r7, #8]
 8007448:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800744a:	f000 fa0f 	bl	800786c <prvCopyDataToQueue>
 800744e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007454:	2b00      	cmp	r3, #0
 8007456:	d010      	beq.n	800747a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745a:	3324      	adds	r3, #36	@ 0x24
 800745c:	4618      	mov	r0, r3
 800745e:	f001 f805 	bl	800846c <xTaskRemoveFromEventList>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d013      	beq.n	8007490 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007468:	4b3f      	ldr	r3, [pc, #252]	@ (8007568 <xQueueGenericSend+0x200>)
 800746a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	e00a      	b.n	8007490 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800747a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d007      	beq.n	8007490 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007480:	4b39      	ldr	r3, [pc, #228]	@ (8007568 <xQueueGenericSend+0x200>)
 8007482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007490:	f001 ff54 	bl	800933c <vPortExitCritical>
				return pdPASS;
 8007494:	2301      	movs	r3, #1
 8007496:	e063      	b.n	8007560 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d103      	bne.n	80074a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800749e:	f001 ff4d 	bl	800933c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	e05c      	b.n	8007560 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d106      	bne.n	80074ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074ac:	f107 0314 	add.w	r3, r7, #20
 80074b0:	4618      	mov	r0, r3
 80074b2:	f001 f83f 	bl	8008534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074b6:	2301      	movs	r3, #1
 80074b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074ba:	f001 ff3f 	bl	800933c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074be:	f000 fda7 	bl	8008010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074c2:	f001 ff09 	bl	80092d8 <vPortEnterCritical>
 80074c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074cc:	b25b      	sxtb	r3, r3
 80074ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d2:	d103      	bne.n	80074dc <xQueueGenericSend+0x174>
 80074d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074e2:	b25b      	sxtb	r3, r3
 80074e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e8:	d103      	bne.n	80074f2 <xQueueGenericSend+0x18a>
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074f2:	f001 ff23 	bl	800933c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074f6:	1d3a      	adds	r2, r7, #4
 80074f8:	f107 0314 	add.w	r3, r7, #20
 80074fc:	4611      	mov	r1, r2
 80074fe:	4618      	mov	r0, r3
 8007500:	f001 f82e 	bl	8008560 <xTaskCheckForTimeOut>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d124      	bne.n	8007554 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800750a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800750c:	f000 faa6 	bl	8007a5c <prvIsQueueFull>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d018      	beq.n	8007548 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007518:	3310      	adds	r3, #16
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	4611      	mov	r1, r2
 800751e:	4618      	mov	r0, r3
 8007520:	f000 ff52 	bl	80083c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007524:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007526:	f000 fa31 	bl	800798c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800752a:	f000 fd7f 	bl	800802c <xTaskResumeAll>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	f47f af7c 	bne.w	800742e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007536:	4b0c      	ldr	r3, [pc, #48]	@ (8007568 <xQueueGenericSend+0x200>)
 8007538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	e772      	b.n	800742e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007548:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800754a:	f000 fa1f 	bl	800798c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800754e:	f000 fd6d 	bl	800802c <xTaskResumeAll>
 8007552:	e76c      	b.n	800742e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007554:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007556:	f000 fa19 	bl	800798c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800755a:	f000 fd67 	bl	800802c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800755e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007560:	4618      	mov	r0, r3
 8007562:	3738      	adds	r7, #56	@ 0x38
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	e000ed04 	.word	0xe000ed04

0800756c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b090      	sub	sp, #64	@ 0x40
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800757e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10b      	bne.n	800759c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007596:	bf00      	nop
 8007598:	bf00      	nop
 800759a:	e7fd      	b.n	8007598 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d103      	bne.n	80075aa <xQueueGenericSendFromISR+0x3e>
 80075a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <xQueueGenericSendFromISR+0x42>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e000      	b.n	80075b0 <xQueueGenericSendFromISR+0x44>
 80075ae:	2300      	movs	r3, #0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10b      	bne.n	80075cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80075c6:	bf00      	nop
 80075c8:	bf00      	nop
 80075ca:	e7fd      	b.n	80075c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d103      	bne.n	80075da <xQueueGenericSendFromISR+0x6e>
 80075d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d101      	bne.n	80075de <xQueueGenericSendFromISR+0x72>
 80075da:	2301      	movs	r3, #1
 80075dc:	e000      	b.n	80075e0 <xQueueGenericSendFromISR+0x74>
 80075de:	2300      	movs	r3, #0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10b      	bne.n	80075fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80075e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	623b      	str	r3, [r7, #32]
}
 80075f6:	bf00      	nop
 80075f8:	bf00      	nop
 80075fa:	e7fd      	b.n	80075f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075fc:	f001 ff4c 	bl	8009498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007600:	f3ef 8211 	mrs	r2, BASEPRI
 8007604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	61fa      	str	r2, [r7, #28]
 8007616:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007618:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800761a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800761c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800761e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007624:	429a      	cmp	r2, r3
 8007626:	d302      	bcc.n	800762e <xQueueGenericSendFromISR+0xc2>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2b02      	cmp	r3, #2
 800762c:	d12f      	bne.n	800768e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800762e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007630:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007634:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007644:	f000 f912 	bl	800786c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007648:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800764c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007650:	d112      	bne.n	8007678 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007656:	2b00      	cmp	r3, #0
 8007658:	d016      	beq.n	8007688 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800765a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765c:	3324      	adds	r3, #36	@ 0x24
 800765e:	4618      	mov	r0, r3
 8007660:	f000 ff04 	bl	800846c <xTaskRemoveFromEventList>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00e      	beq.n	8007688 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00b      	beq.n	8007688 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	e007      	b.n	8007688 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007678:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800767c:	3301      	adds	r3, #1
 800767e:	b2db      	uxtb	r3, r3
 8007680:	b25a      	sxtb	r2, r3
 8007682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007688:	2301      	movs	r3, #1
 800768a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800768c:	e001      	b.n	8007692 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800768e:	2300      	movs	r3, #0
 8007690:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007694:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800769c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800769e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3740      	adds	r7, #64	@ 0x40
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08c      	sub	sp, #48	@ 0x30
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80076b4:	2300      	movs	r3, #0
 80076b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10b      	bne.n	80076da <xQueueReceive+0x32>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	623b      	str	r3, [r7, #32]
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
 80076d8:	e7fd      	b.n	80076d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d103      	bne.n	80076e8 <xQueueReceive+0x40>
 80076e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <xQueueReceive+0x44>
 80076e8:	2301      	movs	r3, #1
 80076ea:	e000      	b.n	80076ee <xQueueReceive+0x46>
 80076ec:	2300      	movs	r3, #0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10b      	bne.n	800770a <xQueueReceive+0x62>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	61fb      	str	r3, [r7, #28]
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop
 8007708:	e7fd      	b.n	8007706 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800770a:	f001 f875 	bl	80087f8 <xTaskGetSchedulerState>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d102      	bne.n	800771a <xQueueReceive+0x72>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <xQueueReceive+0x76>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <xQueueReceive+0x78>
 800771e:	2300      	movs	r3, #0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10b      	bne.n	800773c <xQueueReceive+0x94>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	61bb      	str	r3, [r7, #24]
}
 8007736:	bf00      	nop
 8007738:	bf00      	nop
 800773a:	e7fd      	b.n	8007738 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800773c:	f001 fdcc 	bl	80092d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007744:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01f      	beq.n	800778c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800774c:	68b9      	ldr	r1, [r7, #8]
 800774e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007750:	f000 f8f6 	bl	8007940 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007756:	1e5a      	subs	r2, r3, #1
 8007758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800775c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00f      	beq.n	8007784 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007766:	3310      	adds	r3, #16
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fe7f 	bl	800846c <xTaskRemoveFromEventList>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d007      	beq.n	8007784 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007774:	4b3c      	ldr	r3, [pc, #240]	@ (8007868 <xQueueReceive+0x1c0>)
 8007776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007784:	f001 fdda 	bl	800933c <vPortExitCritical>
				return pdPASS;
 8007788:	2301      	movs	r3, #1
 800778a:	e069      	b.n	8007860 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d103      	bne.n	800779a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007792:	f001 fdd3 	bl	800933c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007796:	2300      	movs	r3, #0
 8007798:	e062      	b.n	8007860 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800779a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d106      	bne.n	80077ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077a0:	f107 0310 	add.w	r3, r7, #16
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 fec5 	bl	8008534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077aa:	2301      	movs	r3, #1
 80077ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077ae:	f001 fdc5 	bl	800933c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077b2:	f000 fc2d 	bl	8008010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077b6:	f001 fd8f 	bl	80092d8 <vPortEnterCritical>
 80077ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077c0:	b25b      	sxtb	r3, r3
 80077c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c6:	d103      	bne.n	80077d0 <xQueueReceive+0x128>
 80077c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077d6:	b25b      	sxtb	r3, r3
 80077d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077dc:	d103      	bne.n	80077e6 <xQueueReceive+0x13e>
 80077de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077e6:	f001 fda9 	bl	800933c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077ea:	1d3a      	adds	r2, r7, #4
 80077ec:	f107 0310 	add.w	r3, r7, #16
 80077f0:	4611      	mov	r1, r2
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 feb4 	bl	8008560 <xTaskCheckForTimeOut>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d123      	bne.n	8007846 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007800:	f000 f916 	bl	8007a30 <prvIsQueueEmpty>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d017      	beq.n	800783a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800780a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780c:	3324      	adds	r3, #36	@ 0x24
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	4611      	mov	r1, r2
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fdd8 	bl	80083c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007818:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800781a:	f000 f8b7 	bl	800798c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800781e:	f000 fc05 	bl	800802c <xTaskResumeAll>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d189      	bne.n	800773c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007828:	4b0f      	ldr	r3, [pc, #60]	@ (8007868 <xQueueReceive+0x1c0>)
 800782a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	e780      	b.n	800773c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800783a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800783c:	f000 f8a6 	bl	800798c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007840:	f000 fbf4 	bl	800802c <xTaskResumeAll>
 8007844:	e77a      	b.n	800773c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007848:	f000 f8a0 	bl	800798c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800784c:	f000 fbee 	bl	800802c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007850:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007852:	f000 f8ed 	bl	8007a30 <prvIsQueueEmpty>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	f43f af6f 	beq.w	800773c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800785e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007860:	4618      	mov	r0, r3
 8007862:	3730      	adds	r7, #48	@ 0x30
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	e000ed04 	.word	0xe000ed04

0800786c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007878:	2300      	movs	r3, #0
 800787a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007880:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10d      	bne.n	80078a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d14d      	bne.n	800792e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	4618      	mov	r0, r3
 8007898:	f000 ffcc 	bl	8008834 <xTaskPriorityDisinherit>
 800789c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	609a      	str	r2, [r3, #8]
 80078a4:	e043      	b.n	800792e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d119      	bne.n	80078e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6858      	ldr	r0, [r3, #4]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b4:	461a      	mov	r2, r3
 80078b6:	68b9      	ldr	r1, [r7, #8]
 80078b8:	f003 f8ef 	bl	800aa9a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c4:	441a      	add	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d32b      	bcc.n	800792e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	605a      	str	r2, [r3, #4]
 80078de:	e026      	b.n	800792e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	68d8      	ldr	r0, [r3, #12]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e8:	461a      	mov	r2, r3
 80078ea:	68b9      	ldr	r1, [r7, #8]
 80078ec:	f003 f8d5 	bl	800aa9a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f8:	425b      	negs	r3, r3
 80078fa:	441a      	add	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	429a      	cmp	r2, r3
 800790a:	d207      	bcs.n	800791c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007914:	425b      	negs	r3, r3
 8007916:	441a      	add	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d105      	bne.n	800792e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d002      	beq.n	800792e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	3b01      	subs	r3, #1
 800792c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	1c5a      	adds	r2, r3, #1
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007936:	697b      	ldr	r3, [r7, #20]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3718      	adds	r7, #24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d018      	beq.n	8007984 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68da      	ldr	r2, [r3, #12]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795a:	441a      	add	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	429a      	cmp	r2, r3
 800796a:	d303      	bcc.n	8007974 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	68d9      	ldr	r1, [r3, #12]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797c:	461a      	mov	r2, r3
 800797e:	6838      	ldr	r0, [r7, #0]
 8007980:	f003 f88b 	bl	800aa9a <memcpy>
	}
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007994:	f001 fca0 	bl	80092d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800799e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079a0:	e011      	b.n	80079c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d012      	beq.n	80079d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	3324      	adds	r3, #36	@ 0x24
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 fd5c 	bl	800846c <xTaskRemoveFromEventList>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079ba:	f000 fe35 	bl	8008628 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079be:	7bfb      	ldrb	r3, [r7, #15]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	dce9      	bgt.n	80079a2 <prvUnlockQueue+0x16>
 80079ce:	e000      	b.n	80079d2 <prvUnlockQueue+0x46>
					break;
 80079d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	22ff      	movs	r2, #255	@ 0xff
 80079d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80079da:	f001 fcaf 	bl	800933c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079de:	f001 fc7b 	bl	80092d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079ea:	e011      	b.n	8007a10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d012      	beq.n	8007a1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3310      	adds	r3, #16
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fd37 	bl	800846c <xTaskRemoveFromEventList>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a04:	f000 fe10 	bl	8008628 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	dce9      	bgt.n	80079ec <prvUnlockQueue+0x60>
 8007a18:	e000      	b.n	8007a1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	22ff      	movs	r2, #255	@ 0xff
 8007a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007a24:	f001 fc8a 	bl	800933c <vPortExitCritical>
}
 8007a28:	bf00      	nop
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a38:	f001 fc4e 	bl	80092d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d102      	bne.n	8007a4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a44:	2301      	movs	r3, #1
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	e001      	b.n	8007a4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a4e:	f001 fc75 	bl	800933c <vPortExitCritical>

	return xReturn;
 8007a52:	68fb      	ldr	r3, [r7, #12]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a64:	f001 fc38 	bl	80092d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d102      	bne.n	8007a7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a74:	2301      	movs	r3, #1
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	e001      	b.n	8007a7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a7e:	f001 fc5d 	bl	800933c <vPortExitCritical>

	return xReturn;
 8007a82:	68fb      	ldr	r3, [r7, #12]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	e014      	b.n	8007ac6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8007adc <vQueueAddToRegistry+0x50>)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10b      	bne.n	8007ac0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007aa8:	490c      	ldr	r1, [pc, #48]	@ (8007adc <vQueueAddToRegistry+0x50>)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8007adc <vQueueAddToRegistry+0x50>)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	4413      	add	r3, r2
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007abe:	e006      	b.n	8007ace <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	60fb      	str	r3, [r7, #12]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2b07      	cmp	r3, #7
 8007aca:	d9e7      	bls.n	8007a9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007acc:	bf00      	nop
 8007ace:	bf00      	nop
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	20000ccc 	.word	0x20000ccc

08007ae0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007af0:	f001 fbf2 	bl	80092d8 <vPortEnterCritical>
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007afa:	b25b      	sxtb	r3, r3
 8007afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b00:	d103      	bne.n	8007b0a <vQueueWaitForMessageRestricted+0x2a>
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b10:	b25b      	sxtb	r3, r3
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b16:	d103      	bne.n	8007b20 <vQueueWaitForMessageRestricted+0x40>
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b20:	f001 fc0c 	bl	800933c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d106      	bne.n	8007b3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	3324      	adds	r3, #36	@ 0x24
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	68b9      	ldr	r1, [r7, #8]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 fc6d 	bl	8008414 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b3a:	6978      	ldr	r0, [r7, #20]
 8007b3c:	f7ff ff26 	bl	800798c <prvUnlockQueue>
	}
 8007b40:	bf00      	nop
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08e      	sub	sp, #56	@ 0x38
 8007b4c:	af04      	add	r7, sp, #16
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
 8007b54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10b      	bne.n	8007b74 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	623b      	str	r3, [r7, #32]
}
 8007b6e:	bf00      	nop
 8007b70:	bf00      	nop
 8007b72:	e7fd      	b.n	8007b70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10b      	bne.n	8007b92 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	61fb      	str	r3, [r7, #28]
}
 8007b8c:	bf00      	nop
 8007b8e:	bf00      	nop
 8007b90:	e7fd      	b.n	8007b8e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b92:	23a8      	movs	r3, #168	@ 0xa8
 8007b94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	2ba8      	cmp	r3, #168	@ 0xa8
 8007b9a:	d00b      	beq.n	8007bb4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	61bb      	str	r3, [r7, #24]
}
 8007bae:	bf00      	nop
 8007bb0:	bf00      	nop
 8007bb2:	e7fd      	b.n	8007bb0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bb4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d01e      	beq.n	8007bfa <xTaskCreateStatic+0xb2>
 8007bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d01b      	beq.n	8007bfa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9303      	str	r3, [sp, #12]
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bda:	9302      	str	r3, [sp, #8]
 8007bdc:	f107 0314 	add.w	r3, r7, #20
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 f851 	bl	8007c94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bf2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007bf4:	f000 f8f6 	bl	8007de4 <prvAddNewTaskToReadyList>
 8007bf8:	e001      	b.n	8007bfe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bfe:	697b      	ldr	r3, [r7, #20]
	}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3728      	adds	r7, #40	@ 0x28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08c      	sub	sp, #48	@ 0x30
 8007c0c:	af04      	add	r7, sp, #16
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	4613      	mov	r3, r2
 8007c16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c18:	88fb      	ldrh	r3, [r7, #6]
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f001 fc7d 	bl	800951c <pvPortMalloc>
 8007c22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00e      	beq.n	8007c48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c2a:	20a8      	movs	r0, #168	@ 0xa8
 8007c2c:	f001 fc76 	bl	800951c <pvPortMalloc>
 8007c30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d003      	beq.n	8007c40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c3e:	e005      	b.n	8007c4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c40:	6978      	ldr	r0, [r7, #20]
 8007c42:	f001 fd39 	bl	80096b8 <vPortFree>
 8007c46:	e001      	b.n	8007c4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d017      	beq.n	8007c82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c5a:	88fa      	ldrh	r2, [r7, #6]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9303      	str	r3, [sp, #12]
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	9302      	str	r3, [sp, #8]
 8007c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c66:	9301      	str	r3, [sp, #4]
 8007c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	68b9      	ldr	r1, [r7, #8]
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 f80f 	bl	8007c94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c76:	69f8      	ldr	r0, [r7, #28]
 8007c78:	f000 f8b4 	bl	8007de4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	61bb      	str	r3, [r7, #24]
 8007c80:	e002      	b.n	8007c88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c82:	f04f 33ff 	mov.w	r3, #4294967295
 8007c86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c88:	69bb      	ldr	r3, [r7, #24]
	}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3720      	adds	r7, #32
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
	...

08007c94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	461a      	mov	r2, r3
 8007cac:	21a5      	movs	r1, #165	@ 0xa5
 8007cae:	f002 fe10 	bl	800a8d2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	f023 0307 	bic.w	r3, r3, #7
 8007cca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	f003 0307 	and.w	r3, r3, #7
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00b      	beq.n	8007cee <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	617b      	str	r3, [r7, #20]
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	e7fd      	b.n	8007cea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d01f      	beq.n	8007d34 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	61fb      	str	r3, [r7, #28]
 8007cf8:	e012      	b.n	8007d20 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	4413      	add	r3, r2
 8007d00:	7819      	ldrb	r1, [r3, #0]
 8007d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	4413      	add	r3, r2
 8007d08:	3334      	adds	r3, #52	@ 0x34
 8007d0a:	460a      	mov	r2, r1
 8007d0c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	4413      	add	r3, r2
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d006      	beq.n	8007d28 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	61fb      	str	r3, [r7, #28]
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	2b0f      	cmp	r3, #15
 8007d24:	d9e9      	bls.n	8007cfa <prvInitialiseNewTask+0x66>
 8007d26:	e000      	b.n	8007d2a <prvInitialiseNewTask+0x96>
			{
				break;
 8007d28:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d32:	e003      	b.n	8007d3c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3e:	2b37      	cmp	r3, #55	@ 0x37
 8007d40:	d901      	bls.n	8007d46 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d42:	2337      	movs	r3, #55	@ 0x37
 8007d44:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d50:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d54:	2200      	movs	r2, #0
 8007d56:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7ff f965 	bl	800702c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d64:	3318      	adds	r3, #24
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7ff f960 	bl	800702c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d80:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d84:	2200      	movs	r2, #0
 8007d86:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d94:	3354      	adds	r3, #84	@ 0x54
 8007d96:	224c      	movs	r2, #76	@ 0x4c
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f002 fd99 	bl	800a8d2 <memset>
 8007da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da2:	4a0d      	ldr	r2, [pc, #52]	@ (8007dd8 <prvInitialiseNewTask+0x144>)
 8007da4:	659a      	str	r2, [r3, #88]	@ 0x58
 8007da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da8:	4a0c      	ldr	r2, [pc, #48]	@ (8007ddc <prvInitialiseNewTask+0x148>)
 8007daa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dae:	4a0c      	ldr	r2, [pc, #48]	@ (8007de0 <prvInitialiseNewTask+0x14c>)
 8007db0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	68f9      	ldr	r1, [r7, #12]
 8007db6:	69b8      	ldr	r0, [r7, #24]
 8007db8:	f001 f95a 	bl	8009070 <pxPortInitialiseStack>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dce:	bf00      	nop
 8007dd0:	3720      	adds	r7, #32
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20004f60 	.word	0x20004f60
 8007ddc:	20004fc8 	.word	0x20004fc8
 8007de0:	20005030 	.word	0x20005030

08007de4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007dec:	f001 fa74 	bl	80092d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007df0:	4b2d      	ldr	r3, [pc, #180]	@ (8007ea8 <prvAddNewTaskToReadyList+0xc4>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3301      	adds	r3, #1
 8007df6:	4a2c      	ldr	r2, [pc, #176]	@ (8007ea8 <prvAddNewTaskToReadyList+0xc4>)
 8007df8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007dfa:	4b2c      	ldr	r3, [pc, #176]	@ (8007eac <prvAddNewTaskToReadyList+0xc8>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d109      	bne.n	8007e16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e02:	4a2a      	ldr	r2, [pc, #168]	@ (8007eac <prvAddNewTaskToReadyList+0xc8>)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e08:	4b27      	ldr	r3, [pc, #156]	@ (8007ea8 <prvAddNewTaskToReadyList+0xc4>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d110      	bne.n	8007e32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e10:	f000 fc2e 	bl	8008670 <prvInitialiseTaskLists>
 8007e14:	e00d      	b.n	8007e32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e16:	4b26      	ldr	r3, [pc, #152]	@ (8007eb0 <prvAddNewTaskToReadyList+0xcc>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d109      	bne.n	8007e32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e1e:	4b23      	ldr	r3, [pc, #140]	@ (8007eac <prvAddNewTaskToReadyList+0xc8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d802      	bhi.n	8007e32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8007eac <prvAddNewTaskToReadyList+0xc8>)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e32:	4b20      	ldr	r3, [pc, #128]	@ (8007eb4 <prvAddNewTaskToReadyList+0xd0>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3301      	adds	r3, #1
 8007e38:	4a1e      	ldr	r2, [pc, #120]	@ (8007eb4 <prvAddNewTaskToReadyList+0xd0>)
 8007e3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8007eb4 <prvAddNewTaskToReadyList+0xd0>)
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e48:	4b1b      	ldr	r3, [pc, #108]	@ (8007eb8 <prvAddNewTaskToReadyList+0xd4>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d903      	bls.n	8007e58 <prvAddNewTaskToReadyList+0x74>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e54:	4a18      	ldr	r2, [pc, #96]	@ (8007eb8 <prvAddNewTaskToReadyList+0xd4>)
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4a15      	ldr	r2, [pc, #84]	@ (8007ebc <prvAddNewTaskToReadyList+0xd8>)
 8007e66:	441a      	add	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	4610      	mov	r0, r2
 8007e70:	f7ff f8e9 	bl	8007046 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e74:	f001 fa62 	bl	800933c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e78:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb0 <prvAddNewTaskToReadyList+0xcc>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00e      	beq.n	8007e9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e80:	4b0a      	ldr	r3, [pc, #40]	@ (8007eac <prvAddNewTaskToReadyList+0xc8>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d207      	bcs.n	8007e9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ec0 <prvAddNewTaskToReadyList+0xdc>)
 8007e90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e9e:	bf00      	nop
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	200011e0 	.word	0x200011e0
 8007eac:	20000d0c 	.word	0x20000d0c
 8007eb0:	200011ec 	.word	0x200011ec
 8007eb4:	200011fc 	.word	0x200011fc
 8007eb8:	200011e8 	.word	0x200011e8
 8007ebc:	20000d10 	.word	0x20000d10
 8007ec0:	e000ed04 	.word	0xe000ed04

08007ec4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d018      	beq.n	8007f08 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ed6:	4b14      	ldr	r3, [pc, #80]	@ (8007f28 <vTaskDelay+0x64>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00b      	beq.n	8007ef6 <vTaskDelay+0x32>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	60bb      	str	r3, [r7, #8]
}
 8007ef0:	bf00      	nop
 8007ef2:	bf00      	nop
 8007ef4:	e7fd      	b.n	8007ef2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007ef6:	f000 f88b 	bl	8008010 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007efa:	2100      	movs	r1, #0
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fd09 	bl	8008914 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f02:	f000 f893 	bl	800802c <xTaskResumeAll>
 8007f06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d107      	bne.n	8007f1e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007f0e:	4b07      	ldr	r3, [pc, #28]	@ (8007f2c <vTaskDelay+0x68>)
 8007f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f1e:	bf00      	nop
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20001208 	.word	0x20001208
 8007f2c:	e000ed04 	.word	0xe000ed04

08007f30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08a      	sub	sp, #40	@ 0x28
 8007f34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f3e:	463a      	mov	r2, r7
 8007f40:	1d39      	adds	r1, r7, #4
 8007f42:	f107 0308 	add.w	r3, r7, #8
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff f81c 	bl	8006f84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	9202      	str	r2, [sp, #8]
 8007f54:	9301      	str	r3, [sp, #4]
 8007f56:	2300      	movs	r3, #0
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	460a      	mov	r2, r1
 8007f5e:	4924      	ldr	r1, [pc, #144]	@ (8007ff0 <vTaskStartScheduler+0xc0>)
 8007f60:	4824      	ldr	r0, [pc, #144]	@ (8007ff4 <vTaskStartScheduler+0xc4>)
 8007f62:	f7ff fdf1 	bl	8007b48 <xTaskCreateStatic>
 8007f66:	4603      	mov	r3, r0
 8007f68:	4a23      	ldr	r2, [pc, #140]	@ (8007ff8 <vTaskStartScheduler+0xc8>)
 8007f6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f6c:	4b22      	ldr	r3, [pc, #136]	@ (8007ff8 <vTaskStartScheduler+0xc8>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f74:	2301      	movs	r3, #1
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	e001      	b.n	8007f7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d102      	bne.n	8007f8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f84:	f000 fd1a 	bl	80089bc <xTimerCreateTimerTask>
 8007f88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d11b      	bne.n	8007fc8 <vTaskStartScheduler+0x98>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	613b      	str	r3, [r7, #16]
}
 8007fa2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007fa4:	4b15      	ldr	r3, [pc, #84]	@ (8007ffc <vTaskStartScheduler+0xcc>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3354      	adds	r3, #84	@ 0x54
 8007faa:	4a15      	ldr	r2, [pc, #84]	@ (8008000 <vTaskStartScheduler+0xd0>)
 8007fac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007fae:	4b15      	ldr	r3, [pc, #84]	@ (8008004 <vTaskStartScheduler+0xd4>)
 8007fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007fb6:	4b14      	ldr	r3, [pc, #80]	@ (8008008 <vTaskStartScheduler+0xd8>)
 8007fb8:	2201      	movs	r2, #1
 8007fba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007fbc:	4b13      	ldr	r3, [pc, #76]	@ (800800c <vTaskStartScheduler+0xdc>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fc2:	f001 f8e5 	bl	8009190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fc6:	e00f      	b.n	8007fe8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fce:	d10b      	bne.n	8007fe8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	60fb      	str	r3, [r7, #12]
}
 8007fe2:	bf00      	nop
 8007fe4:	bf00      	nop
 8007fe6:	e7fd      	b.n	8007fe4 <vTaskStartScheduler+0xb4>
}
 8007fe8:	bf00      	nop
 8007fea:	3718      	adds	r7, #24
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	0800e1dc 	.word	0x0800e1dc
 8007ff4:	08008641 	.word	0x08008641
 8007ff8:	20001204 	.word	0x20001204
 8007ffc:	20000d0c 	.word	0x20000d0c
 8008000:	20000038 	.word	0x20000038
 8008004:	20001200 	.word	0x20001200
 8008008:	200011ec 	.word	0x200011ec
 800800c:	200011e4 	.word	0x200011e4

08008010 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008010:	b480      	push	{r7}
 8008012:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008014:	4b04      	ldr	r3, [pc, #16]	@ (8008028 <vTaskSuspendAll+0x18>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3301      	adds	r3, #1
 800801a:	4a03      	ldr	r2, [pc, #12]	@ (8008028 <vTaskSuspendAll+0x18>)
 800801c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800801e:	bf00      	nop
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	20001208 	.word	0x20001208

0800802c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008032:	2300      	movs	r3, #0
 8008034:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008036:	2300      	movs	r3, #0
 8008038:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800803a:	4b42      	ldr	r3, [pc, #264]	@ (8008144 <xTaskResumeAll+0x118>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10b      	bne.n	800805a <xTaskResumeAll+0x2e>
	__asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	603b      	str	r3, [r7, #0]
}
 8008054:	bf00      	nop
 8008056:	bf00      	nop
 8008058:	e7fd      	b.n	8008056 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800805a:	f001 f93d 	bl	80092d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800805e:	4b39      	ldr	r3, [pc, #228]	@ (8008144 <xTaskResumeAll+0x118>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3b01      	subs	r3, #1
 8008064:	4a37      	ldr	r2, [pc, #220]	@ (8008144 <xTaskResumeAll+0x118>)
 8008066:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008068:	4b36      	ldr	r3, [pc, #216]	@ (8008144 <xTaskResumeAll+0x118>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d162      	bne.n	8008136 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008070:	4b35      	ldr	r3, [pc, #212]	@ (8008148 <xTaskResumeAll+0x11c>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d05e      	beq.n	8008136 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008078:	e02f      	b.n	80080da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800807a:	4b34      	ldr	r3, [pc, #208]	@ (800814c <xTaskResumeAll+0x120>)
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3318      	adds	r3, #24
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff f83a 	bl	8007100 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3304      	adds	r3, #4
 8008090:	4618      	mov	r0, r3
 8008092:	f7ff f835 	bl	8007100 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800809a:	4b2d      	ldr	r3, [pc, #180]	@ (8008150 <xTaskResumeAll+0x124>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d903      	bls.n	80080aa <xTaskResumeAll+0x7e>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a6:	4a2a      	ldr	r2, [pc, #168]	@ (8008150 <xTaskResumeAll+0x124>)
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ae:	4613      	mov	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4a27      	ldr	r2, [pc, #156]	@ (8008154 <xTaskResumeAll+0x128>)
 80080b8:	441a      	add	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	3304      	adds	r3, #4
 80080be:	4619      	mov	r1, r3
 80080c0:	4610      	mov	r0, r2
 80080c2:	f7fe ffc0 	bl	8007046 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ca:	4b23      	ldr	r3, [pc, #140]	@ (8008158 <xTaskResumeAll+0x12c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d302      	bcc.n	80080da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80080d4:	4b21      	ldr	r3, [pc, #132]	@ (800815c <xTaskResumeAll+0x130>)
 80080d6:	2201      	movs	r2, #1
 80080d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080da:	4b1c      	ldr	r3, [pc, #112]	@ (800814c <xTaskResumeAll+0x120>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1cb      	bne.n	800807a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080e8:	f000 fb66 	bl	80087b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80080ec:	4b1c      	ldr	r3, [pc, #112]	@ (8008160 <xTaskResumeAll+0x134>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d010      	beq.n	800811a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080f8:	f000 f846 	bl	8008188 <xTaskIncrementTick>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008102:	4b16      	ldr	r3, [pc, #88]	@ (800815c <xTaskResumeAll+0x130>)
 8008104:	2201      	movs	r2, #1
 8008106:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3b01      	subs	r3, #1
 800810c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1f1      	bne.n	80080f8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008114:	4b12      	ldr	r3, [pc, #72]	@ (8008160 <xTaskResumeAll+0x134>)
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800811a:	4b10      	ldr	r3, [pc, #64]	@ (800815c <xTaskResumeAll+0x130>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d009      	beq.n	8008136 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008122:	2301      	movs	r3, #1
 8008124:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008126:	4b0f      	ldr	r3, [pc, #60]	@ (8008164 <xTaskResumeAll+0x138>)
 8008128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008136:	f001 f901 	bl	800933c <vPortExitCritical>

	return xAlreadyYielded;
 800813a:	68bb      	ldr	r3, [r7, #8]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	20001208 	.word	0x20001208
 8008148:	200011e0 	.word	0x200011e0
 800814c:	200011a0 	.word	0x200011a0
 8008150:	200011e8 	.word	0x200011e8
 8008154:	20000d10 	.word	0x20000d10
 8008158:	20000d0c 	.word	0x20000d0c
 800815c:	200011f4 	.word	0x200011f4
 8008160:	200011f0 	.word	0x200011f0
 8008164:	e000ed04 	.word	0xe000ed04

08008168 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800816e:	4b05      	ldr	r3, [pc, #20]	@ (8008184 <xTaskGetTickCount+0x1c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008174:	687b      	ldr	r3, [r7, #4]
}
 8008176:	4618      	mov	r0, r3
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	200011e4 	.word	0x200011e4

08008188 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800818e:	2300      	movs	r3, #0
 8008190:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008192:	4b4f      	ldr	r3, [pc, #316]	@ (80082d0 <xTaskIncrementTick+0x148>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	f040 8090 	bne.w	80082bc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800819c:	4b4d      	ldr	r3, [pc, #308]	@ (80082d4 <xTaskIncrementTick+0x14c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	3301      	adds	r3, #1
 80081a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081a4:	4a4b      	ldr	r2, [pc, #300]	@ (80082d4 <xTaskIncrementTick+0x14c>)
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d121      	bne.n	80081f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80081b0:	4b49      	ldr	r3, [pc, #292]	@ (80082d8 <xTaskIncrementTick+0x150>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00b      	beq.n	80081d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	603b      	str	r3, [r7, #0]
}
 80081cc:	bf00      	nop
 80081ce:	bf00      	nop
 80081d0:	e7fd      	b.n	80081ce <xTaskIncrementTick+0x46>
 80081d2:	4b41      	ldr	r3, [pc, #260]	@ (80082d8 <xTaskIncrementTick+0x150>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	4b40      	ldr	r3, [pc, #256]	@ (80082dc <xTaskIncrementTick+0x154>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a3e      	ldr	r2, [pc, #248]	@ (80082d8 <xTaskIncrementTick+0x150>)
 80081de:	6013      	str	r3, [r2, #0]
 80081e0:	4a3e      	ldr	r2, [pc, #248]	@ (80082dc <xTaskIncrementTick+0x154>)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6013      	str	r3, [r2, #0]
 80081e6:	4b3e      	ldr	r3, [pc, #248]	@ (80082e0 <xTaskIncrementTick+0x158>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3301      	adds	r3, #1
 80081ec:	4a3c      	ldr	r2, [pc, #240]	@ (80082e0 <xTaskIncrementTick+0x158>)
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	f000 fae2 	bl	80087b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081f4:	4b3b      	ldr	r3, [pc, #236]	@ (80082e4 <xTaskIncrementTick+0x15c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d349      	bcc.n	8008292 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081fe:	4b36      	ldr	r3, [pc, #216]	@ (80082d8 <xTaskIncrementTick+0x150>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d104      	bne.n	8008212 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008208:	4b36      	ldr	r3, [pc, #216]	@ (80082e4 <xTaskIncrementTick+0x15c>)
 800820a:	f04f 32ff 	mov.w	r2, #4294967295
 800820e:	601a      	str	r2, [r3, #0]
					break;
 8008210:	e03f      	b.n	8008292 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008212:	4b31      	ldr	r3, [pc, #196]	@ (80082d8 <xTaskIncrementTick+0x150>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d203      	bcs.n	8008232 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800822a:	4a2e      	ldr	r2, [pc, #184]	@ (80082e4 <xTaskIncrementTick+0x15c>)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008230:	e02f      	b.n	8008292 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	3304      	adds	r3, #4
 8008236:	4618      	mov	r0, r3
 8008238:	f7fe ff62 	bl	8007100 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008240:	2b00      	cmp	r3, #0
 8008242:	d004      	beq.n	800824e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	3318      	adds	r3, #24
 8008248:	4618      	mov	r0, r3
 800824a:	f7fe ff59 	bl	8007100 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008252:	4b25      	ldr	r3, [pc, #148]	@ (80082e8 <xTaskIncrementTick+0x160>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	429a      	cmp	r2, r3
 8008258:	d903      	bls.n	8008262 <xTaskIncrementTick+0xda>
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800825e:	4a22      	ldr	r2, [pc, #136]	@ (80082e8 <xTaskIncrementTick+0x160>)
 8008260:	6013      	str	r3, [r2, #0]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008266:	4613      	mov	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4a1f      	ldr	r2, [pc, #124]	@ (80082ec <xTaskIncrementTick+0x164>)
 8008270:	441a      	add	r2, r3
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	3304      	adds	r3, #4
 8008276:	4619      	mov	r1, r3
 8008278:	4610      	mov	r0, r2
 800827a:	f7fe fee4 	bl	8007046 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008282:	4b1b      	ldr	r3, [pc, #108]	@ (80082f0 <xTaskIncrementTick+0x168>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008288:	429a      	cmp	r2, r3
 800828a:	d3b8      	bcc.n	80081fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800828c:	2301      	movs	r3, #1
 800828e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008290:	e7b5      	b.n	80081fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008292:	4b17      	ldr	r3, [pc, #92]	@ (80082f0 <xTaskIncrementTick+0x168>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008298:	4914      	ldr	r1, [pc, #80]	@ (80082ec <xTaskIncrementTick+0x164>)
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	440b      	add	r3, r1
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d901      	bls.n	80082ae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80082aa:	2301      	movs	r3, #1
 80082ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80082ae:	4b11      	ldr	r3, [pc, #68]	@ (80082f4 <xTaskIncrementTick+0x16c>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d007      	beq.n	80082c6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80082b6:	2301      	movs	r3, #1
 80082b8:	617b      	str	r3, [r7, #20]
 80082ba:	e004      	b.n	80082c6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80082bc:	4b0e      	ldr	r3, [pc, #56]	@ (80082f8 <xTaskIncrementTick+0x170>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3301      	adds	r3, #1
 80082c2:	4a0d      	ldr	r2, [pc, #52]	@ (80082f8 <xTaskIncrementTick+0x170>)
 80082c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80082c6:	697b      	ldr	r3, [r7, #20]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	20001208 	.word	0x20001208
 80082d4:	200011e4 	.word	0x200011e4
 80082d8:	20001198 	.word	0x20001198
 80082dc:	2000119c 	.word	0x2000119c
 80082e0:	200011f8 	.word	0x200011f8
 80082e4:	20001200 	.word	0x20001200
 80082e8:	200011e8 	.word	0x200011e8
 80082ec:	20000d10 	.word	0x20000d10
 80082f0:	20000d0c 	.word	0x20000d0c
 80082f4:	200011f4 	.word	0x200011f4
 80082f8:	200011f0 	.word	0x200011f0

080082fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008302:	4b2b      	ldr	r3, [pc, #172]	@ (80083b0 <vTaskSwitchContext+0xb4>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800830a:	4b2a      	ldr	r3, [pc, #168]	@ (80083b4 <vTaskSwitchContext+0xb8>)
 800830c:	2201      	movs	r2, #1
 800830e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008310:	e047      	b.n	80083a2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008312:	4b28      	ldr	r3, [pc, #160]	@ (80083b4 <vTaskSwitchContext+0xb8>)
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008318:	4b27      	ldr	r3, [pc, #156]	@ (80083b8 <vTaskSwitchContext+0xbc>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	60fb      	str	r3, [r7, #12]
 800831e:	e011      	b.n	8008344 <vTaskSwitchContext+0x48>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10b      	bne.n	800833e <vTaskSwitchContext+0x42>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	607b      	str	r3, [r7, #4]
}
 8008338:	bf00      	nop
 800833a:	bf00      	nop
 800833c:	e7fd      	b.n	800833a <vTaskSwitchContext+0x3e>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3b01      	subs	r3, #1
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	491d      	ldr	r1, [pc, #116]	@ (80083bc <vTaskSwitchContext+0xc0>)
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	4613      	mov	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	440b      	add	r3, r1
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d0e3      	beq.n	8008320 <vTaskSwitchContext+0x24>
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	4613      	mov	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4a16      	ldr	r2, [pc, #88]	@ (80083bc <vTaskSwitchContext+0xc0>)
 8008364:	4413      	add	r3, r2
 8008366:	60bb      	str	r3, [r7, #8]
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	605a      	str	r2, [r3, #4]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	3308      	adds	r3, #8
 800837a:	429a      	cmp	r2, r3
 800837c:	d104      	bne.n	8008388 <vTaskSwitchContext+0x8c>
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	605a      	str	r2, [r3, #4]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	4a0c      	ldr	r2, [pc, #48]	@ (80083c0 <vTaskSwitchContext+0xc4>)
 8008390:	6013      	str	r3, [r2, #0]
 8008392:	4a09      	ldr	r2, [pc, #36]	@ (80083b8 <vTaskSwitchContext+0xbc>)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008398:	4b09      	ldr	r3, [pc, #36]	@ (80083c0 <vTaskSwitchContext+0xc4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3354      	adds	r3, #84	@ 0x54
 800839e:	4a09      	ldr	r2, [pc, #36]	@ (80083c4 <vTaskSwitchContext+0xc8>)
 80083a0:	6013      	str	r3, [r2, #0]
}
 80083a2:	bf00      	nop
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	20001208 	.word	0x20001208
 80083b4:	200011f4 	.word	0x200011f4
 80083b8:	200011e8 	.word	0x200011e8
 80083bc:	20000d10 	.word	0x20000d10
 80083c0:	20000d0c 	.word	0x20000d0c
 80083c4:	20000038 	.word	0x20000038

080083c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10b      	bne.n	80083f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	60fb      	str	r3, [r7, #12]
}
 80083ea:	bf00      	nop
 80083ec:	bf00      	nop
 80083ee:	e7fd      	b.n	80083ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083f0:	4b07      	ldr	r3, [pc, #28]	@ (8008410 <vTaskPlaceOnEventList+0x48>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3318      	adds	r3, #24
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7fe fe48 	bl	800708e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80083fe:	2101      	movs	r1, #1
 8008400:	6838      	ldr	r0, [r7, #0]
 8008402:	f000 fa87 	bl	8008914 <prvAddCurrentTaskToDelayedList>
}
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20000d0c 	.word	0x20000d0c

08008414 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10b      	bne.n	800843e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	617b      	str	r3, [r7, #20]
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	e7fd      	b.n	800843a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800843e:	4b0a      	ldr	r3, [pc, #40]	@ (8008468 <vTaskPlaceOnEventListRestricted+0x54>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3318      	adds	r3, #24
 8008444:	4619      	mov	r1, r3
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7fe fdfd 	bl	8007046 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d002      	beq.n	8008458 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008452:	f04f 33ff 	mov.w	r3, #4294967295
 8008456:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008458:	6879      	ldr	r1, [r7, #4]
 800845a:	68b8      	ldr	r0, [r7, #8]
 800845c:	f000 fa5a 	bl	8008914 <prvAddCurrentTaskToDelayedList>
	}
 8008460:	bf00      	nop
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	20000d0c 	.word	0x20000d0c

0800846c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10b      	bne.n	800849a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	60fb      	str	r3, [r7, #12]
}
 8008494:	bf00      	nop
 8008496:	bf00      	nop
 8008498:	e7fd      	b.n	8008496 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	3318      	adds	r3, #24
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fe fe2e 	bl	8007100 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084a4:	4b1d      	ldr	r3, [pc, #116]	@ (800851c <xTaskRemoveFromEventList+0xb0>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d11d      	bne.n	80084e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	3304      	adds	r3, #4
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fe fe25 	bl	8007100 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ba:	4b19      	ldr	r3, [pc, #100]	@ (8008520 <xTaskRemoveFromEventList+0xb4>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d903      	bls.n	80084ca <xTaskRemoveFromEventList+0x5e>
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c6:	4a16      	ldr	r2, [pc, #88]	@ (8008520 <xTaskRemoveFromEventList+0xb4>)
 80084c8:	6013      	str	r3, [r2, #0]
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ce:	4613      	mov	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4a13      	ldr	r2, [pc, #76]	@ (8008524 <xTaskRemoveFromEventList+0xb8>)
 80084d8:	441a      	add	r2, r3
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	3304      	adds	r3, #4
 80084de:	4619      	mov	r1, r3
 80084e0:	4610      	mov	r0, r2
 80084e2:	f7fe fdb0 	bl	8007046 <vListInsertEnd>
 80084e6:	e005      	b.n	80084f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	3318      	adds	r3, #24
 80084ec:	4619      	mov	r1, r3
 80084ee:	480e      	ldr	r0, [pc, #56]	@ (8008528 <xTaskRemoveFromEventList+0xbc>)
 80084f0:	f7fe fda9 	bl	8007046 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f8:	4b0c      	ldr	r3, [pc, #48]	@ (800852c <xTaskRemoveFromEventList+0xc0>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fe:	429a      	cmp	r2, r3
 8008500:	d905      	bls.n	800850e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008502:	2301      	movs	r3, #1
 8008504:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008506:	4b0a      	ldr	r3, [pc, #40]	@ (8008530 <xTaskRemoveFromEventList+0xc4>)
 8008508:	2201      	movs	r2, #1
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	e001      	b.n	8008512 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800850e:	2300      	movs	r3, #0
 8008510:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008512:	697b      	ldr	r3, [r7, #20]
}
 8008514:	4618      	mov	r0, r3
 8008516:	3718      	adds	r7, #24
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	20001208 	.word	0x20001208
 8008520:	200011e8 	.word	0x200011e8
 8008524:	20000d10 	.word	0x20000d10
 8008528:	200011a0 	.word	0x200011a0
 800852c:	20000d0c 	.word	0x20000d0c
 8008530:	200011f4 	.word	0x200011f4

08008534 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800853c:	4b06      	ldr	r3, [pc, #24]	@ (8008558 <vTaskInternalSetTimeOutState+0x24>)
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008544:	4b05      	ldr	r3, [pc, #20]	@ (800855c <vTaskInternalSetTimeOutState+0x28>)
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	605a      	str	r2, [r3, #4]
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	200011f8 	.word	0x200011f8
 800855c:	200011e4 	.word	0x200011e4

08008560 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b088      	sub	sp, #32
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10b      	bne.n	8008588 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	613b      	str	r3, [r7, #16]
}
 8008582:	bf00      	nop
 8008584:	bf00      	nop
 8008586:	e7fd      	b.n	8008584 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10b      	bne.n	80085a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	60fb      	str	r3, [r7, #12]
}
 80085a0:	bf00      	nop
 80085a2:	bf00      	nop
 80085a4:	e7fd      	b.n	80085a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80085a6:	f000 fe97 	bl	80092d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085aa:	4b1d      	ldr	r3, [pc, #116]	@ (8008620 <xTaskCheckForTimeOut+0xc0>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c2:	d102      	bne.n	80085ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085c4:	2300      	movs	r3, #0
 80085c6:	61fb      	str	r3, [r7, #28]
 80085c8:	e023      	b.n	8008612 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	4b15      	ldr	r3, [pc, #84]	@ (8008624 <xTaskCheckForTimeOut+0xc4>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d007      	beq.n	80085e6 <xTaskCheckForTimeOut+0x86>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	69ba      	ldr	r2, [r7, #24]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d302      	bcc.n	80085e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80085e0:	2301      	movs	r3, #1
 80085e2:	61fb      	str	r3, [r7, #28]
 80085e4:	e015      	b.n	8008612 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d20b      	bcs.n	8008608 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	1ad2      	subs	r2, r2, r3
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff ff99 	bl	8008534 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008602:	2300      	movs	r3, #0
 8008604:	61fb      	str	r3, [r7, #28]
 8008606:	e004      	b.n	8008612 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800860e:	2301      	movs	r3, #1
 8008610:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008612:	f000 fe93 	bl	800933c <vPortExitCritical>

	return xReturn;
 8008616:	69fb      	ldr	r3, [r7, #28]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3720      	adds	r7, #32
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	200011e4 	.word	0x200011e4
 8008624:	200011f8 	.word	0x200011f8

08008628 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008628:	b480      	push	{r7}
 800862a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800862c:	4b03      	ldr	r3, [pc, #12]	@ (800863c <vTaskMissedYield+0x14>)
 800862e:	2201      	movs	r2, #1
 8008630:	601a      	str	r2, [r3, #0]
}
 8008632:	bf00      	nop
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	200011f4 	.word	0x200011f4

08008640 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008648:	f000 f852 	bl	80086f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800864c:	4b06      	ldr	r3, [pc, #24]	@ (8008668 <prvIdleTask+0x28>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d9f9      	bls.n	8008648 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008654:	4b05      	ldr	r3, [pc, #20]	@ (800866c <prvIdleTask+0x2c>)
 8008656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008664:	e7f0      	b.n	8008648 <prvIdleTask+0x8>
 8008666:	bf00      	nop
 8008668:	20000d10 	.word	0x20000d10
 800866c:	e000ed04 	.word	0xe000ed04

08008670 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008676:	2300      	movs	r3, #0
 8008678:	607b      	str	r3, [r7, #4]
 800867a:	e00c      	b.n	8008696 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	4613      	mov	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4a12      	ldr	r2, [pc, #72]	@ (80086d0 <prvInitialiseTaskLists+0x60>)
 8008688:	4413      	add	r3, r2
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe fcae 	bl	8006fec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3301      	adds	r3, #1
 8008694:	607b      	str	r3, [r7, #4]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b37      	cmp	r3, #55	@ 0x37
 800869a:	d9ef      	bls.n	800867c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800869c:	480d      	ldr	r0, [pc, #52]	@ (80086d4 <prvInitialiseTaskLists+0x64>)
 800869e:	f7fe fca5 	bl	8006fec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086a2:	480d      	ldr	r0, [pc, #52]	@ (80086d8 <prvInitialiseTaskLists+0x68>)
 80086a4:	f7fe fca2 	bl	8006fec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086a8:	480c      	ldr	r0, [pc, #48]	@ (80086dc <prvInitialiseTaskLists+0x6c>)
 80086aa:	f7fe fc9f 	bl	8006fec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086ae:	480c      	ldr	r0, [pc, #48]	@ (80086e0 <prvInitialiseTaskLists+0x70>)
 80086b0:	f7fe fc9c 	bl	8006fec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086b4:	480b      	ldr	r0, [pc, #44]	@ (80086e4 <prvInitialiseTaskLists+0x74>)
 80086b6:	f7fe fc99 	bl	8006fec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086ba:	4b0b      	ldr	r3, [pc, #44]	@ (80086e8 <prvInitialiseTaskLists+0x78>)
 80086bc:	4a05      	ldr	r2, [pc, #20]	@ (80086d4 <prvInitialiseTaskLists+0x64>)
 80086be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086c0:	4b0a      	ldr	r3, [pc, #40]	@ (80086ec <prvInitialiseTaskLists+0x7c>)
 80086c2:	4a05      	ldr	r2, [pc, #20]	@ (80086d8 <prvInitialiseTaskLists+0x68>)
 80086c4:	601a      	str	r2, [r3, #0]
}
 80086c6:	bf00      	nop
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	20000d10 	.word	0x20000d10
 80086d4:	20001170 	.word	0x20001170
 80086d8:	20001184 	.word	0x20001184
 80086dc:	200011a0 	.word	0x200011a0
 80086e0:	200011b4 	.word	0x200011b4
 80086e4:	200011cc 	.word	0x200011cc
 80086e8:	20001198 	.word	0x20001198
 80086ec:	2000119c 	.word	0x2000119c

080086f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086f6:	e019      	b.n	800872c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086f8:	f000 fdee 	bl	80092d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086fc:	4b10      	ldr	r3, [pc, #64]	@ (8008740 <prvCheckTasksWaitingTermination+0x50>)
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	3304      	adds	r3, #4
 8008708:	4618      	mov	r0, r3
 800870a:	f7fe fcf9 	bl	8007100 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800870e:	4b0d      	ldr	r3, [pc, #52]	@ (8008744 <prvCheckTasksWaitingTermination+0x54>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3b01      	subs	r3, #1
 8008714:	4a0b      	ldr	r2, [pc, #44]	@ (8008744 <prvCheckTasksWaitingTermination+0x54>)
 8008716:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008718:	4b0b      	ldr	r3, [pc, #44]	@ (8008748 <prvCheckTasksWaitingTermination+0x58>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3b01      	subs	r3, #1
 800871e:	4a0a      	ldr	r2, [pc, #40]	@ (8008748 <prvCheckTasksWaitingTermination+0x58>)
 8008720:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008722:	f000 fe0b 	bl	800933c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f810 	bl	800874c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800872c:	4b06      	ldr	r3, [pc, #24]	@ (8008748 <prvCheckTasksWaitingTermination+0x58>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e1      	bne.n	80086f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008734:	bf00      	nop
 8008736:	bf00      	nop
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	200011b4 	.word	0x200011b4
 8008744:	200011e0 	.word	0x200011e0
 8008748:	200011c8 	.word	0x200011c8

0800874c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	3354      	adds	r3, #84	@ 0x54
 8008758:	4618      	mov	r0, r3
 800875a:	f002 f8e5 	bl	800a928 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008764:	2b00      	cmp	r3, #0
 8008766:	d108      	bne.n	800877a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800876c:	4618      	mov	r0, r3
 800876e:	f000 ffa3 	bl	80096b8 <vPortFree>
				vPortFree( pxTCB );
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 ffa0 	bl	80096b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008778:	e019      	b.n	80087ae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008780:	2b01      	cmp	r3, #1
 8008782:	d103      	bne.n	800878c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 ff97 	bl	80096b8 <vPortFree>
	}
 800878a:	e010      	b.n	80087ae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008792:	2b02      	cmp	r3, #2
 8008794:	d00b      	beq.n	80087ae <prvDeleteTCB+0x62>
	__asm volatile
 8008796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	60fb      	str	r3, [r7, #12]
}
 80087a8:	bf00      	nop
 80087aa:	bf00      	nop
 80087ac:	e7fd      	b.n	80087aa <prvDeleteTCB+0x5e>
	}
 80087ae:	bf00      	nop
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087be:	4b0c      	ldr	r3, [pc, #48]	@ (80087f0 <prvResetNextTaskUnblockTime+0x38>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d104      	bne.n	80087d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087c8:	4b0a      	ldr	r3, [pc, #40]	@ (80087f4 <prvResetNextTaskUnblockTime+0x3c>)
 80087ca:	f04f 32ff 	mov.w	r2, #4294967295
 80087ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087d0:	e008      	b.n	80087e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087d2:	4b07      	ldr	r3, [pc, #28]	@ (80087f0 <prvResetNextTaskUnblockTime+0x38>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	4a04      	ldr	r2, [pc, #16]	@ (80087f4 <prvResetNextTaskUnblockTime+0x3c>)
 80087e2:	6013      	str	r3, [r2, #0]
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	20001198 	.word	0x20001198
 80087f4:	20001200 	.word	0x20001200

080087f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80087fe:	4b0b      	ldr	r3, [pc, #44]	@ (800882c <xTaskGetSchedulerState+0x34>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d102      	bne.n	800880c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008806:	2301      	movs	r3, #1
 8008808:	607b      	str	r3, [r7, #4]
 800880a:	e008      	b.n	800881e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800880c:	4b08      	ldr	r3, [pc, #32]	@ (8008830 <xTaskGetSchedulerState+0x38>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d102      	bne.n	800881a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008814:	2302      	movs	r3, #2
 8008816:	607b      	str	r3, [r7, #4]
 8008818:	e001      	b.n	800881e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800881a:	2300      	movs	r3, #0
 800881c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800881e:	687b      	ldr	r3, [r7, #4]
	}
 8008820:	4618      	mov	r0, r3
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	200011ec 	.word	0x200011ec
 8008830:	20001208 	.word	0x20001208

08008834 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008840:	2300      	movs	r3, #0
 8008842:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d058      	beq.n	80088fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800884a:	4b2f      	ldr	r3, [pc, #188]	@ (8008908 <xTaskPriorityDisinherit+0xd4>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	429a      	cmp	r2, r3
 8008852:	d00b      	beq.n	800886c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	60fb      	str	r3, [r7, #12]
}
 8008866:	bf00      	nop
 8008868:	bf00      	nop
 800886a:	e7fd      	b.n	8008868 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10b      	bne.n	800888c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	60bb      	str	r3, [r7, #8]
}
 8008886:	bf00      	nop
 8008888:	bf00      	nop
 800888a:	e7fd      	b.n	8008888 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008890:	1e5a      	subs	r2, r3, #1
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800889e:	429a      	cmp	r2, r3
 80088a0:	d02c      	beq.n	80088fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d128      	bne.n	80088fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	3304      	adds	r3, #4
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fc26 	bl	8007100 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088cc:	4b0f      	ldr	r3, [pc, #60]	@ (800890c <xTaskPriorityDisinherit+0xd8>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d903      	bls.n	80088dc <xTaskPriorityDisinherit+0xa8>
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d8:	4a0c      	ldr	r2, [pc, #48]	@ (800890c <xTaskPriorityDisinherit+0xd8>)
 80088da:	6013      	str	r3, [r2, #0]
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088e0:	4613      	mov	r3, r2
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	4413      	add	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4a09      	ldr	r2, [pc, #36]	@ (8008910 <xTaskPriorityDisinherit+0xdc>)
 80088ea:	441a      	add	r2, r3
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	3304      	adds	r3, #4
 80088f0:	4619      	mov	r1, r3
 80088f2:	4610      	mov	r0, r2
 80088f4:	f7fe fba7 	bl	8007046 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80088f8:	2301      	movs	r3, #1
 80088fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088fc:	697b      	ldr	r3, [r7, #20]
	}
 80088fe:	4618      	mov	r0, r3
 8008900:	3718      	adds	r7, #24
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	20000d0c 	.word	0x20000d0c
 800890c:	200011e8 	.word	0x200011e8
 8008910:	20000d10 	.word	0x20000d10

08008914 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800891e:	4b21      	ldr	r3, [pc, #132]	@ (80089a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008924:	4b20      	ldr	r3, [pc, #128]	@ (80089a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3304      	adds	r3, #4
 800892a:	4618      	mov	r0, r3
 800892c:	f7fe fbe8 	bl	8007100 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008936:	d10a      	bne.n	800894e <prvAddCurrentTaskToDelayedList+0x3a>
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d007      	beq.n	800894e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800893e:	4b1a      	ldr	r3, [pc, #104]	@ (80089a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3304      	adds	r3, #4
 8008944:	4619      	mov	r1, r3
 8008946:	4819      	ldr	r0, [pc, #100]	@ (80089ac <prvAddCurrentTaskToDelayedList+0x98>)
 8008948:	f7fe fb7d 	bl	8007046 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800894c:	e026      	b.n	800899c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4413      	add	r3, r2
 8008954:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008956:	4b14      	ldr	r3, [pc, #80]	@ (80089a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	429a      	cmp	r2, r3
 8008964:	d209      	bcs.n	800897a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008966:	4b12      	ldr	r3, [pc, #72]	@ (80089b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	4b0f      	ldr	r3, [pc, #60]	@ (80089a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	3304      	adds	r3, #4
 8008970:	4619      	mov	r1, r3
 8008972:	4610      	mov	r0, r2
 8008974:	f7fe fb8b 	bl	800708e <vListInsert>
}
 8008978:	e010      	b.n	800899c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800897a:	4b0e      	ldr	r3, [pc, #56]	@ (80089b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	4b0a      	ldr	r3, [pc, #40]	@ (80089a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3304      	adds	r3, #4
 8008984:	4619      	mov	r1, r3
 8008986:	4610      	mov	r0, r2
 8008988:	f7fe fb81 	bl	800708e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800898c:	4b0a      	ldr	r3, [pc, #40]	@ (80089b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	429a      	cmp	r2, r3
 8008994:	d202      	bcs.n	800899c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008996:	4a08      	ldr	r2, [pc, #32]	@ (80089b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	6013      	str	r3, [r2, #0]
}
 800899c:	bf00      	nop
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	200011e4 	.word	0x200011e4
 80089a8:	20000d0c 	.word	0x20000d0c
 80089ac:	200011cc 	.word	0x200011cc
 80089b0:	2000119c 	.word	0x2000119c
 80089b4:	20001198 	.word	0x20001198
 80089b8:	20001200 	.word	0x20001200

080089bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08a      	sub	sp, #40	@ 0x28
 80089c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80089c2:	2300      	movs	r3, #0
 80089c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80089c6:	f000 fb13 	bl	8008ff0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80089ca:	4b1d      	ldr	r3, [pc, #116]	@ (8008a40 <xTimerCreateTimerTask+0x84>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d021      	beq.n	8008a16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80089d6:	2300      	movs	r3, #0
 80089d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80089da:	1d3a      	adds	r2, r7, #4
 80089dc:	f107 0108 	add.w	r1, r7, #8
 80089e0:	f107 030c 	add.w	r3, r7, #12
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7fe fae7 	bl	8006fb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80089ea:	6879      	ldr	r1, [r7, #4]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	9202      	str	r2, [sp, #8]
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	2302      	movs	r3, #2
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	2300      	movs	r3, #0
 80089fa:	460a      	mov	r2, r1
 80089fc:	4911      	ldr	r1, [pc, #68]	@ (8008a44 <xTimerCreateTimerTask+0x88>)
 80089fe:	4812      	ldr	r0, [pc, #72]	@ (8008a48 <xTimerCreateTimerTask+0x8c>)
 8008a00:	f7ff f8a2 	bl	8007b48 <xTaskCreateStatic>
 8008a04:	4603      	mov	r3, r0
 8008a06:	4a11      	ldr	r2, [pc, #68]	@ (8008a4c <xTimerCreateTimerTask+0x90>)
 8008a08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008a0a:	4b10      	ldr	r3, [pc, #64]	@ (8008a4c <xTimerCreateTimerTask+0x90>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008a12:	2301      	movs	r3, #1
 8008a14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10b      	bne.n	8008a34 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a20:	f383 8811 	msr	BASEPRI, r3
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	613b      	str	r3, [r7, #16]
}
 8008a2e:	bf00      	nop
 8008a30:	bf00      	nop
 8008a32:	e7fd      	b.n	8008a30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008a34:	697b      	ldr	r3, [r7, #20]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	2000123c 	.word	0x2000123c
 8008a44:	0800e1e4 	.word	0x0800e1e4
 8008a48:	08008b89 	.word	0x08008b89
 8008a4c:	20001240 	.word	0x20001240

08008a50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08a      	sub	sp, #40	@ 0x28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10b      	bne.n	8008a80 <xTimerGenericCommand+0x30>
	__asm volatile
 8008a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	623b      	str	r3, [r7, #32]
}
 8008a7a:	bf00      	nop
 8008a7c:	bf00      	nop
 8008a7e:	e7fd      	b.n	8008a7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a80:	4b19      	ldr	r3, [pc, #100]	@ (8008ae8 <xTimerGenericCommand+0x98>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d02a      	beq.n	8008ade <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b05      	cmp	r3, #5
 8008a98:	dc18      	bgt.n	8008acc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a9a:	f7ff fead 	bl	80087f8 <xTaskGetSchedulerState>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d109      	bne.n	8008ab8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008aa4:	4b10      	ldr	r3, [pc, #64]	@ (8008ae8 <xTimerGenericCommand+0x98>)
 8008aa6:	6818      	ldr	r0, [r3, #0]
 8008aa8:	f107 0110 	add.w	r1, r7, #16
 8008aac:	2300      	movs	r3, #0
 8008aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ab0:	f7fe fc5a 	bl	8007368 <xQueueGenericSend>
 8008ab4:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ab6:	e012      	b.n	8008ade <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ae8 <xTimerGenericCommand+0x98>)
 8008aba:	6818      	ldr	r0, [r3, #0]
 8008abc:	f107 0110 	add.w	r1, r7, #16
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f7fe fc50 	bl	8007368 <xQueueGenericSend>
 8008ac8:	6278      	str	r0, [r7, #36]	@ 0x24
 8008aca:	e008      	b.n	8008ade <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008acc:	4b06      	ldr	r3, [pc, #24]	@ (8008ae8 <xTimerGenericCommand+0x98>)
 8008ace:	6818      	ldr	r0, [r3, #0]
 8008ad0:	f107 0110 	add.w	r1, r7, #16
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	f7fe fd48 	bl	800756c <xQueueGenericSendFromISR>
 8008adc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3728      	adds	r7, #40	@ 0x28
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	2000123c 	.word	0x2000123c

08008aec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	af02      	add	r7, sp, #8
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008af6:	4b23      	ldr	r3, [pc, #140]	@ (8008b84 <prvProcessExpiredTimer+0x98>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	3304      	adds	r3, #4
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fe fafb 	bl	8007100 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b10:	f003 0304 	and.w	r3, r3, #4
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d023      	beq.n	8008b60 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	699a      	ldr	r2, [r3, #24]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	18d1      	adds	r1, r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	6978      	ldr	r0, [r7, #20]
 8008b26:	f000 f8d5 	bl	8008cd4 <prvInsertTimerInActiveList>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d020      	beq.n	8008b72 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b30:	2300      	movs	r3, #0
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	2300      	movs	r3, #0
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	2100      	movs	r1, #0
 8008b3a:	6978      	ldr	r0, [r7, #20]
 8008b3c:	f7ff ff88 	bl	8008a50 <xTimerGenericCommand>
 8008b40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d114      	bne.n	8008b72 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	60fb      	str	r3, [r7, #12]
}
 8008b5a:	bf00      	nop
 8008b5c:	bf00      	nop
 8008b5e:	e7fd      	b.n	8008b5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b66:	f023 0301 	bic.w	r3, r3, #1
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	6978      	ldr	r0, [r7, #20]
 8008b78:	4798      	blx	r3
}
 8008b7a:	bf00      	nop
 8008b7c:	3718      	adds	r7, #24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	20001234 	.word	0x20001234

08008b88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b90:	f107 0308 	add.w	r3, r7, #8
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 f859 	bl	8008c4c <prvGetNextExpireTime>
 8008b9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 f805 	bl	8008bb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008ba6:	f000 f8d7 	bl	8008d58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008baa:	bf00      	nop
 8008bac:	e7f0      	b.n	8008b90 <prvTimerTask+0x8>
	...

08008bb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008bba:	f7ff fa29 	bl	8008010 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bbe:	f107 0308 	add.w	r3, r7, #8
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 f866 	bl	8008c94 <prvSampleTimeNow>
 8008bc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d130      	bne.n	8008c32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10a      	bne.n	8008bec <prvProcessTimerOrBlockTask+0x3c>
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d806      	bhi.n	8008bec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008bde:	f7ff fa25 	bl	800802c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008be2:	68f9      	ldr	r1, [r7, #12]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff ff81 	bl	8008aec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008bea:	e024      	b.n	8008c36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d008      	beq.n	8008c04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008bf2:	4b13      	ldr	r3, [pc, #76]	@ (8008c40 <prvProcessTimerOrBlockTask+0x90>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <prvProcessTimerOrBlockTask+0x50>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e000      	b.n	8008c02 <prvProcessTimerOrBlockTask+0x52>
 8008c00:	2300      	movs	r3, #0
 8008c02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c04:	4b0f      	ldr	r3, [pc, #60]	@ (8008c44 <prvProcessTimerOrBlockTask+0x94>)
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	4619      	mov	r1, r3
 8008c12:	f7fe ff65 	bl	8007ae0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c16:	f7ff fa09 	bl	800802c <xTaskResumeAll>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10a      	bne.n	8008c36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c20:	4b09      	ldr	r3, [pc, #36]	@ (8008c48 <prvProcessTimerOrBlockTask+0x98>)
 8008c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	f3bf 8f6f 	isb	sy
}
 8008c30:	e001      	b.n	8008c36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c32:	f7ff f9fb 	bl	800802c <xTaskResumeAll>
}
 8008c36:	bf00      	nop
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	20001238 	.word	0x20001238
 8008c44:	2000123c 	.word	0x2000123c
 8008c48:	e000ed04 	.word	0xe000ed04

08008c4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c54:	4b0e      	ldr	r3, [pc, #56]	@ (8008c90 <prvGetNextExpireTime+0x44>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d101      	bne.n	8008c62 <prvGetNextExpireTime+0x16>
 8008c5e:	2201      	movs	r2, #1
 8008c60:	e000      	b.n	8008c64 <prvGetNextExpireTime+0x18>
 8008c62:	2200      	movs	r2, #0
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d105      	bne.n	8008c7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c70:	4b07      	ldr	r3, [pc, #28]	@ (8008c90 <prvGetNextExpireTime+0x44>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	60fb      	str	r3, [r7, #12]
 8008c7a:	e001      	b.n	8008c80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c80:	68fb      	ldr	r3, [r7, #12]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	20001234 	.word	0x20001234

08008c94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c9c:	f7ff fa64 	bl	8008168 <xTaskGetTickCount>
 8008ca0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8008cd0 <prvSampleTimeNow+0x3c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d205      	bcs.n	8008cb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008cac:	f000 f93a 	bl	8008f24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	e002      	b.n	8008cbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008cbe:	4a04      	ldr	r2, [pc, #16]	@ (8008cd0 <prvSampleTimeNow+0x3c>)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	20001244 	.word	0x20001244

08008cd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
 8008ce0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d812      	bhi.n	8008d20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	1ad2      	subs	r2, r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d302      	bcc.n	8008d0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	e01b      	b.n	8008d46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d0e:	4b10      	ldr	r3, [pc, #64]	@ (8008d50 <prvInsertTimerInActiveList+0x7c>)
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3304      	adds	r3, #4
 8008d16:	4619      	mov	r1, r3
 8008d18:	4610      	mov	r0, r2
 8008d1a:	f7fe f9b8 	bl	800708e <vListInsert>
 8008d1e:	e012      	b.n	8008d46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d206      	bcs.n	8008d36 <prvInsertTimerInActiveList+0x62>
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d302      	bcc.n	8008d36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d30:	2301      	movs	r3, #1
 8008d32:	617b      	str	r3, [r7, #20]
 8008d34:	e007      	b.n	8008d46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d36:	4b07      	ldr	r3, [pc, #28]	@ (8008d54 <prvInsertTimerInActiveList+0x80>)
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	4619      	mov	r1, r3
 8008d40:	4610      	mov	r0, r2
 8008d42:	f7fe f9a4 	bl	800708e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d46:	697b      	ldr	r3, [r7, #20]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3718      	adds	r7, #24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20001238 	.word	0x20001238
 8008d54:	20001234 	.word	0x20001234

08008d58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08e      	sub	sp, #56	@ 0x38
 8008d5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d5e:	e0ce      	b.n	8008efe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	da19      	bge.n	8008d9a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d66:	1d3b      	adds	r3, r7, #4
 8008d68:	3304      	adds	r3, #4
 8008d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10b      	bne.n	8008d8a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	61fb      	str	r3, [r7, #28]
}
 8008d84:	bf00      	nop
 8008d86:	bf00      	nop
 8008d88:	e7fd      	b.n	8008d86 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d90:	6850      	ldr	r0, [r2, #4]
 8008d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d94:	6892      	ldr	r2, [r2, #8]
 8008d96:	4611      	mov	r1, r2
 8008d98:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f2c0 80ae 	blt.w	8008efe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d004      	beq.n	8008db8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db0:	3304      	adds	r3, #4
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fe f9a4 	bl	8007100 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008db8:	463b      	mov	r3, r7
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7ff ff6a 	bl	8008c94 <prvSampleTimeNow>
 8008dc0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b09      	cmp	r3, #9
 8008dc6:	f200 8097 	bhi.w	8008ef8 <prvProcessReceivedCommands+0x1a0>
 8008dca:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd0 <prvProcessReceivedCommands+0x78>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008df9 	.word	0x08008df9
 8008dd4:	08008df9 	.word	0x08008df9
 8008dd8:	08008df9 	.word	0x08008df9
 8008ddc:	08008e6f 	.word	0x08008e6f
 8008de0:	08008e83 	.word	0x08008e83
 8008de4:	08008ecf 	.word	0x08008ecf
 8008de8:	08008df9 	.word	0x08008df9
 8008dec:	08008df9 	.word	0x08008df9
 8008df0:	08008e6f 	.word	0x08008e6f
 8008df4:	08008e83 	.word	0x08008e83
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dfe:	f043 0301 	orr.w	r3, r3, #1
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	18d1      	adds	r1, r2, r3
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e18:	f7ff ff5c 	bl	8008cd4 <prvInsertTimerInActiveList>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d06c      	beq.n	8008efc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e30:	f003 0304 	and.w	r3, r3, #4
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d061      	beq.n	8008efc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	441a      	add	r2, r3
 8008e40:	2300      	movs	r3, #0
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	2300      	movs	r3, #0
 8008e46:	2100      	movs	r1, #0
 8008e48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e4a:	f7ff fe01 	bl	8008a50 <xTimerGenericCommand>
 8008e4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e50:	6a3b      	ldr	r3, [r7, #32]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d152      	bne.n	8008efc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	61bb      	str	r3, [r7, #24]
}
 8008e68:	bf00      	nop
 8008e6a:	bf00      	nop
 8008e6c:	e7fd      	b.n	8008e6a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e74:	f023 0301 	bic.w	r3, r3, #1
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008e80:	e03d      	b.n	8008efe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e88:	f043 0301 	orr.w	r3, r3, #1
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10b      	bne.n	8008eba <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	617b      	str	r3, [r7, #20]
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop
 8008eb8:	e7fd      	b.n	8008eb6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ebc:	699a      	ldr	r2, [r3, #24]
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec0:	18d1      	adds	r1, r2, r3
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ec6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ec8:	f7ff ff04 	bl	8008cd4 <prvInsertTimerInActiveList>
					break;
 8008ecc:	e017      	b.n	8008efe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d103      	bne.n	8008ee4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008edc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ede:	f000 fbeb 	bl	80096b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ee2:	e00c      	b.n	8008efe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008eea:	f023 0301 	bic.w	r3, r3, #1
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008ef6:	e002      	b.n	8008efe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008ef8:	bf00      	nop
 8008efa:	e000      	b.n	8008efe <prvProcessReceivedCommands+0x1a6>
					break;
 8008efc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008efe:	4b08      	ldr	r3, [pc, #32]	@ (8008f20 <prvProcessReceivedCommands+0x1c8>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	1d39      	adds	r1, r7, #4
 8008f04:	2200      	movs	r2, #0
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fe fbce 	bl	80076a8 <xQueueReceive>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f47f af26 	bne.w	8008d60 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop
 8008f18:	3730      	adds	r7, #48	@ 0x30
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	2000123c 	.word	0x2000123c

08008f24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b088      	sub	sp, #32
 8008f28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f2a:	e049      	b.n	8008fc0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f2c:	4b2e      	ldr	r3, [pc, #184]	@ (8008fe8 <prvSwitchTimerLists+0xc4>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f36:	4b2c      	ldr	r3, [pc, #176]	@ (8008fe8 <prvSwitchTimerLists+0xc4>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3304      	adds	r3, #4
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fe f8db 	bl	8007100 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f58:	f003 0304 	and.w	r3, r3, #4
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d02f      	beq.n	8008fc0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	4413      	add	r3, r2
 8008f68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d90e      	bls.n	8008f90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8008fe8 <prvSwitchTimerLists+0xc4>)
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3304      	adds	r3, #4
 8008f86:	4619      	mov	r1, r3
 8008f88:	4610      	mov	r0, r2
 8008f8a:	f7fe f880 	bl	800708e <vListInsert>
 8008f8e:	e017      	b.n	8008fc0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f90:	2300      	movs	r3, #0
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	2300      	movs	r3, #0
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	2100      	movs	r1, #0
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff fd58 	bl	8008a50 <xTimerGenericCommand>
 8008fa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10b      	bne.n	8008fc0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	603b      	str	r3, [r7, #0]
}
 8008fba:	bf00      	nop
 8008fbc:	bf00      	nop
 8008fbe:	e7fd      	b.n	8008fbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fc0:	4b09      	ldr	r3, [pc, #36]	@ (8008fe8 <prvSwitchTimerLists+0xc4>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1b0      	bne.n	8008f2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008fca:	4b07      	ldr	r3, [pc, #28]	@ (8008fe8 <prvSwitchTimerLists+0xc4>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008fd0:	4b06      	ldr	r3, [pc, #24]	@ (8008fec <prvSwitchTimerLists+0xc8>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a04      	ldr	r2, [pc, #16]	@ (8008fe8 <prvSwitchTimerLists+0xc4>)
 8008fd6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008fd8:	4a04      	ldr	r2, [pc, #16]	@ (8008fec <prvSwitchTimerLists+0xc8>)
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	6013      	str	r3, [r2, #0]
}
 8008fde:	bf00      	nop
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20001234 	.word	0x20001234
 8008fec:	20001238 	.word	0x20001238

08008ff0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ff6:	f000 f96f 	bl	80092d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ffa:	4b15      	ldr	r3, [pc, #84]	@ (8009050 <prvCheckForValidListAndQueue+0x60>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d120      	bne.n	8009044 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009002:	4814      	ldr	r0, [pc, #80]	@ (8009054 <prvCheckForValidListAndQueue+0x64>)
 8009004:	f7fd fff2 	bl	8006fec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009008:	4813      	ldr	r0, [pc, #76]	@ (8009058 <prvCheckForValidListAndQueue+0x68>)
 800900a:	f7fd ffef 	bl	8006fec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800900e:	4b13      	ldr	r3, [pc, #76]	@ (800905c <prvCheckForValidListAndQueue+0x6c>)
 8009010:	4a10      	ldr	r2, [pc, #64]	@ (8009054 <prvCheckForValidListAndQueue+0x64>)
 8009012:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009014:	4b12      	ldr	r3, [pc, #72]	@ (8009060 <prvCheckForValidListAndQueue+0x70>)
 8009016:	4a10      	ldr	r2, [pc, #64]	@ (8009058 <prvCheckForValidListAndQueue+0x68>)
 8009018:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800901a:	2300      	movs	r3, #0
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	4b11      	ldr	r3, [pc, #68]	@ (8009064 <prvCheckForValidListAndQueue+0x74>)
 8009020:	4a11      	ldr	r2, [pc, #68]	@ (8009068 <prvCheckForValidListAndQueue+0x78>)
 8009022:	2110      	movs	r1, #16
 8009024:	200a      	movs	r0, #10
 8009026:	f7fe f8ff 	bl	8007228 <xQueueGenericCreateStatic>
 800902a:	4603      	mov	r3, r0
 800902c:	4a08      	ldr	r2, [pc, #32]	@ (8009050 <prvCheckForValidListAndQueue+0x60>)
 800902e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009030:	4b07      	ldr	r3, [pc, #28]	@ (8009050 <prvCheckForValidListAndQueue+0x60>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d005      	beq.n	8009044 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009038:	4b05      	ldr	r3, [pc, #20]	@ (8009050 <prvCheckForValidListAndQueue+0x60>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	490b      	ldr	r1, [pc, #44]	@ (800906c <prvCheckForValidListAndQueue+0x7c>)
 800903e:	4618      	mov	r0, r3
 8009040:	f7fe fd24 	bl	8007a8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009044:	f000 f97a 	bl	800933c <vPortExitCritical>
}
 8009048:	bf00      	nop
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	2000123c 	.word	0x2000123c
 8009054:	2000120c 	.word	0x2000120c
 8009058:	20001220 	.word	0x20001220
 800905c:	20001234 	.word	0x20001234
 8009060:	20001238 	.word	0x20001238
 8009064:	200012e8 	.word	0x200012e8
 8009068:	20001248 	.word	0x20001248
 800906c:	0800e1ec 	.word	0x0800e1ec

08009070 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	3b04      	subs	r3, #4
 8009080:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3b04      	subs	r3, #4
 800908e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f023 0201 	bic.w	r2, r3, #1
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	3b04      	subs	r3, #4
 800909e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090a0:	4a0c      	ldr	r2, [pc, #48]	@ (80090d4 <pxPortInitialiseStack+0x64>)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	3b14      	subs	r3, #20
 80090aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	3b04      	subs	r3, #4
 80090b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f06f 0202 	mvn.w	r2, #2
 80090be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3b20      	subs	r3, #32
 80090c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090c6:	68fb      	ldr	r3, [r7, #12]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	080090d9 	.word	0x080090d9

080090d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80090de:	2300      	movs	r3, #0
 80090e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090e2:	4b13      	ldr	r3, [pc, #76]	@ (8009130 <prvTaskExitError+0x58>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ea:	d00b      	beq.n	8009104 <prvTaskExitError+0x2c>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	60fb      	str	r3, [r7, #12]
}
 80090fe:	bf00      	nop
 8009100:	bf00      	nop
 8009102:	e7fd      	b.n	8009100 <prvTaskExitError+0x28>
	__asm volatile
 8009104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	60bb      	str	r3, [r7, #8]
}
 8009116:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009118:	bf00      	nop
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d0fc      	beq.n	800911a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009120:	bf00      	nop
 8009122:	bf00      	nop
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	20000028 	.word	0x20000028
	...

08009140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009140:	4b07      	ldr	r3, [pc, #28]	@ (8009160 <pxCurrentTCBConst2>)
 8009142:	6819      	ldr	r1, [r3, #0]
 8009144:	6808      	ldr	r0, [r1, #0]
 8009146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914a:	f380 8809 	msr	PSP, r0
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f04f 0000 	mov.w	r0, #0
 8009156:	f380 8811 	msr	BASEPRI, r0
 800915a:	4770      	bx	lr
 800915c:	f3af 8000 	nop.w

08009160 <pxCurrentTCBConst2>:
 8009160:	20000d0c 	.word	0x20000d0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop

08009168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009168:	4808      	ldr	r0, [pc, #32]	@ (800918c <prvPortStartFirstTask+0x24>)
 800916a:	6800      	ldr	r0, [r0, #0]
 800916c:	6800      	ldr	r0, [r0, #0]
 800916e:	f380 8808 	msr	MSP, r0
 8009172:	f04f 0000 	mov.w	r0, #0
 8009176:	f380 8814 	msr	CONTROL, r0
 800917a:	b662      	cpsie	i
 800917c:	b661      	cpsie	f
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	df00      	svc	0
 8009188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800918a:	bf00      	nop
 800918c:	e000ed08 	.word	0xe000ed08

08009190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009196:	4b47      	ldr	r3, [pc, #284]	@ (80092b4 <xPortStartScheduler+0x124>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a47      	ldr	r2, [pc, #284]	@ (80092b8 <xPortStartScheduler+0x128>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d10b      	bne.n	80091b8 <xPortStartScheduler+0x28>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	613b      	str	r3, [r7, #16]
}
 80091b2:	bf00      	nop
 80091b4:	bf00      	nop
 80091b6:	e7fd      	b.n	80091b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80091b8:	4b3e      	ldr	r3, [pc, #248]	@ (80092b4 <xPortStartScheduler+0x124>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a3f      	ldr	r2, [pc, #252]	@ (80092bc <xPortStartScheduler+0x12c>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d10b      	bne.n	80091da <xPortStartScheduler+0x4a>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	60fb      	str	r3, [r7, #12]
}
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop
 80091d8:	e7fd      	b.n	80091d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091da:	4b39      	ldr	r3, [pc, #228]	@ (80092c0 <xPortStartScheduler+0x130>)
 80091dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	22ff      	movs	r2, #255	@ 0xff
 80091ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091f4:	78fb      	ldrb	r3, [r7, #3]
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	4b31      	ldr	r3, [pc, #196]	@ (80092c4 <xPortStartScheduler+0x134>)
 8009200:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009202:	4b31      	ldr	r3, [pc, #196]	@ (80092c8 <xPortStartScheduler+0x138>)
 8009204:	2207      	movs	r2, #7
 8009206:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009208:	e009      	b.n	800921e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800920a:	4b2f      	ldr	r3, [pc, #188]	@ (80092c8 <xPortStartScheduler+0x138>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3b01      	subs	r3, #1
 8009210:	4a2d      	ldr	r2, [pc, #180]	@ (80092c8 <xPortStartScheduler+0x138>)
 8009212:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009214:	78fb      	ldrb	r3, [r7, #3]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	b2db      	uxtb	r3, r3
 800921c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800921e:	78fb      	ldrb	r3, [r7, #3]
 8009220:	b2db      	uxtb	r3, r3
 8009222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009226:	2b80      	cmp	r3, #128	@ 0x80
 8009228:	d0ef      	beq.n	800920a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800922a:	4b27      	ldr	r3, [pc, #156]	@ (80092c8 <xPortStartScheduler+0x138>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f1c3 0307 	rsb	r3, r3, #7
 8009232:	2b04      	cmp	r3, #4
 8009234:	d00b      	beq.n	800924e <xPortStartScheduler+0xbe>
	__asm volatile
 8009236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	60bb      	str	r3, [r7, #8]
}
 8009248:	bf00      	nop
 800924a:	bf00      	nop
 800924c:	e7fd      	b.n	800924a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800924e:	4b1e      	ldr	r3, [pc, #120]	@ (80092c8 <xPortStartScheduler+0x138>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	021b      	lsls	r3, r3, #8
 8009254:	4a1c      	ldr	r2, [pc, #112]	@ (80092c8 <xPortStartScheduler+0x138>)
 8009256:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009258:	4b1b      	ldr	r3, [pc, #108]	@ (80092c8 <xPortStartScheduler+0x138>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009260:	4a19      	ldr	r2, [pc, #100]	@ (80092c8 <xPortStartScheduler+0x138>)
 8009262:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	b2da      	uxtb	r2, r3
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800926c:	4b17      	ldr	r3, [pc, #92]	@ (80092cc <xPortStartScheduler+0x13c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a16      	ldr	r2, [pc, #88]	@ (80092cc <xPortStartScheduler+0x13c>)
 8009272:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009276:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009278:	4b14      	ldr	r3, [pc, #80]	@ (80092cc <xPortStartScheduler+0x13c>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a13      	ldr	r2, [pc, #76]	@ (80092cc <xPortStartScheduler+0x13c>)
 800927e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009282:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009284:	f000 f8da 	bl	800943c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009288:	4b11      	ldr	r3, [pc, #68]	@ (80092d0 <xPortStartScheduler+0x140>)
 800928a:	2200      	movs	r2, #0
 800928c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800928e:	f000 f8f9 	bl	8009484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009292:	4b10      	ldr	r3, [pc, #64]	@ (80092d4 <xPortStartScheduler+0x144>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a0f      	ldr	r2, [pc, #60]	@ (80092d4 <xPortStartScheduler+0x144>)
 8009298:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800929c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800929e:	f7ff ff63 	bl	8009168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80092a2:	f7ff f82b 	bl	80082fc <vTaskSwitchContext>
	prvTaskExitError();
 80092a6:	f7ff ff17 	bl	80090d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	e000ed00 	.word	0xe000ed00
 80092b8:	410fc271 	.word	0x410fc271
 80092bc:	410fc270 	.word	0x410fc270
 80092c0:	e000e400 	.word	0xe000e400
 80092c4:	20001338 	.word	0x20001338
 80092c8:	2000133c 	.word	0x2000133c
 80092cc:	e000ed20 	.word	0xe000ed20
 80092d0:	20000028 	.word	0x20000028
 80092d4:	e000ef34 	.word	0xe000ef34

080092d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	607b      	str	r3, [r7, #4]
}
 80092f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092f2:	4b10      	ldr	r3, [pc, #64]	@ (8009334 <vPortEnterCritical+0x5c>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3301      	adds	r3, #1
 80092f8:	4a0e      	ldr	r2, [pc, #56]	@ (8009334 <vPortEnterCritical+0x5c>)
 80092fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009334 <vPortEnterCritical+0x5c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d110      	bne.n	8009326 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009304:	4b0c      	ldr	r3, [pc, #48]	@ (8009338 <vPortEnterCritical+0x60>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00b      	beq.n	8009326 <vPortEnterCritical+0x4e>
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	603b      	str	r3, [r7, #0]
}
 8009320:	bf00      	nop
 8009322:	bf00      	nop
 8009324:	e7fd      	b.n	8009322 <vPortEnterCritical+0x4a>
	}
}
 8009326:	bf00      	nop
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	20000028 	.word	0x20000028
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009342:	4b12      	ldr	r3, [pc, #72]	@ (800938c <vPortExitCritical+0x50>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10b      	bne.n	8009362 <vPortExitCritical+0x26>
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	607b      	str	r3, [r7, #4]
}
 800935c:	bf00      	nop
 800935e:	bf00      	nop
 8009360:	e7fd      	b.n	800935e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009362:	4b0a      	ldr	r3, [pc, #40]	@ (800938c <vPortExitCritical+0x50>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3b01      	subs	r3, #1
 8009368:	4a08      	ldr	r2, [pc, #32]	@ (800938c <vPortExitCritical+0x50>)
 800936a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800936c:	4b07      	ldr	r3, [pc, #28]	@ (800938c <vPortExitCritical+0x50>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d105      	bne.n	8009380 <vPortExitCritical+0x44>
 8009374:	2300      	movs	r3, #0
 8009376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	f383 8811 	msr	BASEPRI, r3
}
 800937e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	20000028 	.word	0x20000028

08009390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009390:	f3ef 8009 	mrs	r0, PSP
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	4b15      	ldr	r3, [pc, #84]	@ (80093f0 <pxCurrentTCBConst>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	f01e 0f10 	tst.w	lr, #16
 80093a0:	bf08      	it	eq
 80093a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80093a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093aa:	6010      	str	r0, [r2, #0]
 80093ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80093b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80093b4:	f380 8811 	msr	BASEPRI, r0
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	f3bf 8f6f 	isb	sy
 80093c0:	f7fe ff9c 	bl	80082fc <vTaskSwitchContext>
 80093c4:	f04f 0000 	mov.w	r0, #0
 80093c8:	f380 8811 	msr	BASEPRI, r0
 80093cc:	bc09      	pop	{r0, r3}
 80093ce:	6819      	ldr	r1, [r3, #0]
 80093d0:	6808      	ldr	r0, [r1, #0]
 80093d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d6:	f01e 0f10 	tst.w	lr, #16
 80093da:	bf08      	it	eq
 80093dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80093e0:	f380 8809 	msr	PSP, r0
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	f3af 8000 	nop.w

080093f0 <pxCurrentTCBConst>:
 80093f0:	20000d0c 	.word	0x20000d0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093f4:	bf00      	nop
 80093f6:	bf00      	nop

080093f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
	__asm volatile
 80093fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	607b      	str	r3, [r7, #4]
}
 8009410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009412:	f7fe feb9 	bl	8008188 <xTaskIncrementTick>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d003      	beq.n	8009424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800941c:	4b06      	ldr	r3, [pc, #24]	@ (8009438 <xPortSysTickHandler+0x40>)
 800941e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	2300      	movs	r3, #0
 8009426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	f383 8811 	msr	BASEPRI, r3
}
 800942e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009430:	bf00      	nop
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	e000ed04 	.word	0xe000ed04

0800943c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800943c:	b480      	push	{r7}
 800943e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009440:	4b0b      	ldr	r3, [pc, #44]	@ (8009470 <vPortSetupTimerInterrupt+0x34>)
 8009442:	2200      	movs	r2, #0
 8009444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009446:	4b0b      	ldr	r3, [pc, #44]	@ (8009474 <vPortSetupTimerInterrupt+0x38>)
 8009448:	2200      	movs	r2, #0
 800944a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800944c:	4b0a      	ldr	r3, [pc, #40]	@ (8009478 <vPortSetupTimerInterrupt+0x3c>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a0a      	ldr	r2, [pc, #40]	@ (800947c <vPortSetupTimerInterrupt+0x40>)
 8009452:	fba2 2303 	umull	r2, r3, r2, r3
 8009456:	099b      	lsrs	r3, r3, #6
 8009458:	4a09      	ldr	r2, [pc, #36]	@ (8009480 <vPortSetupTimerInterrupt+0x44>)
 800945a:	3b01      	subs	r3, #1
 800945c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800945e:	4b04      	ldr	r3, [pc, #16]	@ (8009470 <vPortSetupTimerInterrupt+0x34>)
 8009460:	2207      	movs	r2, #7
 8009462:	601a      	str	r2, [r3, #0]
}
 8009464:	bf00      	nop
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	e000e010 	.word	0xe000e010
 8009474:	e000e018 	.word	0xe000e018
 8009478:	2000001c 	.word	0x2000001c
 800947c:	10624dd3 	.word	0x10624dd3
 8009480:	e000e014 	.word	0xe000e014

08009484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009484:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009494 <vPortEnableVFP+0x10>
 8009488:	6801      	ldr	r1, [r0, #0]
 800948a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800948e:	6001      	str	r1, [r0, #0]
 8009490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009492:	bf00      	nop
 8009494:	e000ed88 	.word	0xe000ed88

08009498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800949e:	f3ef 8305 	mrs	r3, IPSR
 80094a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b0f      	cmp	r3, #15
 80094a8:	d915      	bls.n	80094d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80094aa:	4a18      	ldr	r2, [pc, #96]	@ (800950c <vPortValidateInterruptPriority+0x74>)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	4413      	add	r3, r2
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80094b4:	4b16      	ldr	r3, [pc, #88]	@ (8009510 <vPortValidateInterruptPriority+0x78>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	7afa      	ldrb	r2, [r7, #11]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d20b      	bcs.n	80094d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	607b      	str	r3, [r7, #4]
}
 80094d0:	bf00      	nop
 80094d2:	bf00      	nop
 80094d4:	e7fd      	b.n	80094d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80094d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009514 <vPortValidateInterruptPriority+0x7c>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80094de:	4b0e      	ldr	r3, [pc, #56]	@ (8009518 <vPortValidateInterruptPriority+0x80>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d90b      	bls.n	80094fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	603b      	str	r3, [r7, #0]
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	e7fd      	b.n	80094fa <vPortValidateInterruptPriority+0x62>
	}
 80094fe:	bf00      	nop
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	e000e3f0 	.word	0xe000e3f0
 8009510:	20001338 	.word	0x20001338
 8009514:	e000ed0c 	.word	0xe000ed0c
 8009518:	2000133c 	.word	0x2000133c

0800951c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b08a      	sub	sp, #40	@ 0x28
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009524:	2300      	movs	r3, #0
 8009526:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009528:	f7fe fd72 	bl	8008010 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800952c:	4b5c      	ldr	r3, [pc, #368]	@ (80096a0 <pvPortMalloc+0x184>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009534:	f000 f924 	bl	8009780 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009538:	4b5a      	ldr	r3, [pc, #360]	@ (80096a4 <pvPortMalloc+0x188>)
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4013      	ands	r3, r2
 8009540:	2b00      	cmp	r3, #0
 8009542:	f040 8095 	bne.w	8009670 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d01e      	beq.n	800958a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800954c:	2208      	movs	r2, #8
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4413      	add	r3, r2
 8009552:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f003 0307 	and.w	r3, r3, #7
 800955a:	2b00      	cmp	r3, #0
 800955c:	d015      	beq.n	800958a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f023 0307 	bic.w	r3, r3, #7
 8009564:	3308      	adds	r3, #8
 8009566:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f003 0307 	and.w	r3, r3, #7
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00b      	beq.n	800958a <pvPortMalloc+0x6e>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	617b      	str	r3, [r7, #20]
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop
 8009588:	e7fd      	b.n	8009586 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d06f      	beq.n	8009670 <pvPortMalloc+0x154>
 8009590:	4b45      	ldr	r3, [pc, #276]	@ (80096a8 <pvPortMalloc+0x18c>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	429a      	cmp	r2, r3
 8009598:	d86a      	bhi.n	8009670 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800959a:	4b44      	ldr	r3, [pc, #272]	@ (80096ac <pvPortMalloc+0x190>)
 800959c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800959e:	4b43      	ldr	r3, [pc, #268]	@ (80096ac <pvPortMalloc+0x190>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095a4:	e004      	b.n	80095b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80095a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d903      	bls.n	80095c2 <pvPortMalloc+0xa6>
 80095ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1f1      	bne.n	80095a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095c2:	4b37      	ldr	r3, [pc, #220]	@ (80096a0 <pvPortMalloc+0x184>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d051      	beq.n	8009670 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80095cc:	6a3b      	ldr	r3, [r7, #32]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2208      	movs	r2, #8
 80095d2:	4413      	add	r3, r2
 80095d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	1ad2      	subs	r2, r2, r3
 80095e6:	2308      	movs	r3, #8
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d920      	bls.n	8009630 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4413      	add	r3, r2
 80095f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	f003 0307 	and.w	r3, r3, #7
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00b      	beq.n	8009618 <pvPortMalloc+0xfc>
	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	613b      	str	r3, [r7, #16]
}
 8009612:	bf00      	nop
 8009614:	bf00      	nop
 8009616:	e7fd      	b.n	8009614 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	1ad2      	subs	r2, r2, r3
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800962a:	69b8      	ldr	r0, [r7, #24]
 800962c:	f000 f90a 	bl	8009844 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009630:	4b1d      	ldr	r3, [pc, #116]	@ (80096a8 <pvPortMalloc+0x18c>)
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	1ad3      	subs	r3, r2, r3
 800963a:	4a1b      	ldr	r2, [pc, #108]	@ (80096a8 <pvPortMalloc+0x18c>)
 800963c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800963e:	4b1a      	ldr	r3, [pc, #104]	@ (80096a8 <pvPortMalloc+0x18c>)
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	4b1b      	ldr	r3, [pc, #108]	@ (80096b0 <pvPortMalloc+0x194>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	429a      	cmp	r2, r3
 8009648:	d203      	bcs.n	8009652 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800964a:	4b17      	ldr	r3, [pc, #92]	@ (80096a8 <pvPortMalloc+0x18c>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a18      	ldr	r2, [pc, #96]	@ (80096b0 <pvPortMalloc+0x194>)
 8009650:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009654:	685a      	ldr	r2, [r3, #4]
 8009656:	4b13      	ldr	r3, [pc, #76]	@ (80096a4 <pvPortMalloc+0x188>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	431a      	orrs	r2, r3
 800965c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800965e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009662:	2200      	movs	r2, #0
 8009664:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009666:	4b13      	ldr	r3, [pc, #76]	@ (80096b4 <pvPortMalloc+0x198>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3301      	adds	r3, #1
 800966c:	4a11      	ldr	r2, [pc, #68]	@ (80096b4 <pvPortMalloc+0x198>)
 800966e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009670:	f7fe fcdc 	bl	800802c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	f003 0307 	and.w	r3, r3, #7
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00b      	beq.n	8009696 <pvPortMalloc+0x17a>
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	60fb      	str	r3, [r7, #12]
}
 8009690:	bf00      	nop
 8009692:	bf00      	nop
 8009694:	e7fd      	b.n	8009692 <pvPortMalloc+0x176>
	return pvReturn;
 8009696:	69fb      	ldr	r3, [r7, #28]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3728      	adds	r7, #40	@ 0x28
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	20004f48 	.word	0x20004f48
 80096a4:	20004f5c 	.word	0x20004f5c
 80096a8:	20004f4c 	.word	0x20004f4c
 80096ac:	20004f40 	.word	0x20004f40
 80096b0:	20004f50 	.word	0x20004f50
 80096b4:	20004f54 	.word	0x20004f54

080096b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d04f      	beq.n	800976a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096ca:	2308      	movs	r3, #8
 80096cc:	425b      	negs	r3, r3
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	4413      	add	r3, r2
 80096d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	4b25      	ldr	r3, [pc, #148]	@ (8009774 <vPortFree+0xbc>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4013      	ands	r3, r2
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10b      	bne.n	80096fe <vPortFree+0x46>
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	60fb      	str	r3, [r7, #12]
}
 80096f8:	bf00      	nop
 80096fa:	bf00      	nop
 80096fc:	e7fd      	b.n	80096fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00b      	beq.n	800971e <vPortFree+0x66>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	60bb      	str	r3, [r7, #8]
}
 8009718:	bf00      	nop
 800971a:	bf00      	nop
 800971c:	e7fd      	b.n	800971a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	4b14      	ldr	r3, [pc, #80]	@ (8009774 <vPortFree+0xbc>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4013      	ands	r3, r2
 8009728:	2b00      	cmp	r3, #0
 800972a:	d01e      	beq.n	800976a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d11a      	bne.n	800976a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	4b0e      	ldr	r3, [pc, #56]	@ (8009774 <vPortFree+0xbc>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	43db      	mvns	r3, r3
 800973e:	401a      	ands	r2, r3
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009744:	f7fe fc64 	bl	8008010 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	685a      	ldr	r2, [r3, #4]
 800974c:	4b0a      	ldr	r3, [pc, #40]	@ (8009778 <vPortFree+0xc0>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4413      	add	r3, r2
 8009752:	4a09      	ldr	r2, [pc, #36]	@ (8009778 <vPortFree+0xc0>)
 8009754:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009756:	6938      	ldr	r0, [r7, #16]
 8009758:	f000 f874 	bl	8009844 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800975c:	4b07      	ldr	r3, [pc, #28]	@ (800977c <vPortFree+0xc4>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	3301      	adds	r3, #1
 8009762:	4a06      	ldr	r2, [pc, #24]	@ (800977c <vPortFree+0xc4>)
 8009764:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009766:	f7fe fc61 	bl	800802c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800976a:	bf00      	nop
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20004f5c 	.word	0x20004f5c
 8009778:	20004f4c 	.word	0x20004f4c
 800977c:	20004f58 	.word	0x20004f58

08009780 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009786:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800978a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800978c:	4b27      	ldr	r3, [pc, #156]	@ (800982c <prvHeapInit+0xac>)
 800978e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f003 0307 	and.w	r3, r3, #7
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00c      	beq.n	80097b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	3307      	adds	r3, #7
 800979e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f023 0307 	bic.w	r3, r3, #7
 80097a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	4a1f      	ldr	r2, [pc, #124]	@ (800982c <prvHeapInit+0xac>)
 80097b0:	4413      	add	r3, r2
 80097b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009830 <prvHeapInit+0xb0>)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097be:	4b1c      	ldr	r3, [pc, #112]	@ (8009830 <prvHeapInit+0xb0>)
 80097c0:	2200      	movs	r2, #0
 80097c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	4413      	add	r3, r2
 80097ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097cc:	2208      	movs	r2, #8
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	1a9b      	subs	r3, r3, r2
 80097d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 0307 	bic.w	r3, r3, #7
 80097da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	4a15      	ldr	r2, [pc, #84]	@ (8009834 <prvHeapInit+0xb4>)
 80097e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097e2:	4b14      	ldr	r3, [pc, #80]	@ (8009834 <prvHeapInit+0xb4>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2200      	movs	r2, #0
 80097e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80097ea:	4b12      	ldr	r3, [pc, #72]	@ (8009834 <prvHeapInit+0xb4>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2200      	movs	r2, #0
 80097f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	1ad2      	subs	r2, r2, r3
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009800:	4b0c      	ldr	r3, [pc, #48]	@ (8009834 <prvHeapInit+0xb4>)
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	4a0a      	ldr	r2, [pc, #40]	@ (8009838 <prvHeapInit+0xb8>)
 800980e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	4a09      	ldr	r2, [pc, #36]	@ (800983c <prvHeapInit+0xbc>)
 8009816:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009818:	4b09      	ldr	r3, [pc, #36]	@ (8009840 <prvHeapInit+0xc0>)
 800981a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800981e:	601a      	str	r2, [r3, #0]
}
 8009820:	bf00      	nop
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr
 800982c:	20001340 	.word	0x20001340
 8009830:	20004f40 	.word	0x20004f40
 8009834:	20004f48 	.word	0x20004f48
 8009838:	20004f50 	.word	0x20004f50
 800983c:	20004f4c 	.word	0x20004f4c
 8009840:	20004f5c 	.word	0x20004f5c

08009844 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800984c:	4b28      	ldr	r3, [pc, #160]	@ (80098f0 <prvInsertBlockIntoFreeList+0xac>)
 800984e:	60fb      	str	r3, [r7, #12]
 8009850:	e002      	b.n	8009858 <prvInsertBlockIntoFreeList+0x14>
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	60fb      	str	r3, [r7, #12]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	429a      	cmp	r2, r3
 8009860:	d8f7      	bhi.n	8009852 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	4413      	add	r3, r2
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	429a      	cmp	r2, r3
 8009872:	d108      	bne.n	8009886 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	441a      	add	r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	441a      	add	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	429a      	cmp	r2, r3
 8009898:	d118      	bne.n	80098cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	4b15      	ldr	r3, [pc, #84]	@ (80098f4 <prvInsertBlockIntoFreeList+0xb0>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d00d      	beq.n	80098c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	441a      	add	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	e008      	b.n	80098d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098c2:	4b0c      	ldr	r3, [pc, #48]	@ (80098f4 <prvInsertBlockIntoFreeList+0xb0>)
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	601a      	str	r2, [r3, #0]
 80098ca:	e003      	b.n	80098d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d002      	beq.n	80098e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098e2:	bf00      	nop
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	20004f40 	.word	0x20004f40
 80098f4:	20004f48 	.word	0x20004f48

080098f8 <__itoa>:
 80098f8:	1e93      	subs	r3, r2, #2
 80098fa:	2b22      	cmp	r3, #34	@ 0x22
 80098fc:	b510      	push	{r4, lr}
 80098fe:	460c      	mov	r4, r1
 8009900:	d904      	bls.n	800990c <__itoa+0x14>
 8009902:	2300      	movs	r3, #0
 8009904:	700b      	strb	r3, [r1, #0]
 8009906:	461c      	mov	r4, r3
 8009908:	4620      	mov	r0, r4
 800990a:	bd10      	pop	{r4, pc}
 800990c:	2a0a      	cmp	r2, #10
 800990e:	d109      	bne.n	8009924 <__itoa+0x2c>
 8009910:	2800      	cmp	r0, #0
 8009912:	da07      	bge.n	8009924 <__itoa+0x2c>
 8009914:	232d      	movs	r3, #45	@ 0x2d
 8009916:	700b      	strb	r3, [r1, #0]
 8009918:	4240      	negs	r0, r0
 800991a:	2101      	movs	r1, #1
 800991c:	4421      	add	r1, r4
 800991e:	f000 f805 	bl	800992c <__utoa>
 8009922:	e7f1      	b.n	8009908 <__itoa+0x10>
 8009924:	2100      	movs	r1, #0
 8009926:	e7f9      	b.n	800991c <__itoa+0x24>

08009928 <itoa>:
 8009928:	f7ff bfe6 	b.w	80098f8 <__itoa>

0800992c <__utoa>:
 800992c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800992e:	4c1f      	ldr	r4, [pc, #124]	@ (80099ac <__utoa+0x80>)
 8009930:	b08b      	sub	sp, #44	@ 0x2c
 8009932:	4605      	mov	r5, r0
 8009934:	460b      	mov	r3, r1
 8009936:	466e      	mov	r6, sp
 8009938:	f104 0c20 	add.w	ip, r4, #32
 800993c:	6820      	ldr	r0, [r4, #0]
 800993e:	6861      	ldr	r1, [r4, #4]
 8009940:	4637      	mov	r7, r6
 8009942:	c703      	stmia	r7!, {r0, r1}
 8009944:	3408      	adds	r4, #8
 8009946:	4564      	cmp	r4, ip
 8009948:	463e      	mov	r6, r7
 800994a:	d1f7      	bne.n	800993c <__utoa+0x10>
 800994c:	7921      	ldrb	r1, [r4, #4]
 800994e:	7139      	strb	r1, [r7, #4]
 8009950:	1e91      	subs	r1, r2, #2
 8009952:	6820      	ldr	r0, [r4, #0]
 8009954:	6038      	str	r0, [r7, #0]
 8009956:	2922      	cmp	r1, #34	@ 0x22
 8009958:	f04f 0100 	mov.w	r1, #0
 800995c:	d904      	bls.n	8009968 <__utoa+0x3c>
 800995e:	7019      	strb	r1, [r3, #0]
 8009960:	460b      	mov	r3, r1
 8009962:	4618      	mov	r0, r3
 8009964:	b00b      	add	sp, #44	@ 0x2c
 8009966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009968:	1e58      	subs	r0, r3, #1
 800996a:	4684      	mov	ip, r0
 800996c:	fbb5 f7f2 	udiv	r7, r5, r2
 8009970:	fb02 5617 	mls	r6, r2, r7, r5
 8009974:	3628      	adds	r6, #40	@ 0x28
 8009976:	446e      	add	r6, sp
 8009978:	460c      	mov	r4, r1
 800997a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800997e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009982:	462e      	mov	r6, r5
 8009984:	42b2      	cmp	r2, r6
 8009986:	f101 0101 	add.w	r1, r1, #1
 800998a:	463d      	mov	r5, r7
 800998c:	d9ee      	bls.n	800996c <__utoa+0x40>
 800998e:	2200      	movs	r2, #0
 8009990:	545a      	strb	r2, [r3, r1]
 8009992:	1919      	adds	r1, r3, r4
 8009994:	1aa5      	subs	r5, r4, r2
 8009996:	42aa      	cmp	r2, r5
 8009998:	dae3      	bge.n	8009962 <__utoa+0x36>
 800999a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800999e:	780e      	ldrb	r6, [r1, #0]
 80099a0:	7006      	strb	r6, [r0, #0]
 80099a2:	3201      	adds	r2, #1
 80099a4:	f801 5901 	strb.w	r5, [r1], #-1
 80099a8:	e7f4      	b.n	8009994 <__utoa+0x68>
 80099aa:	bf00      	nop
 80099ac:	0800e2fc 	.word	0x0800e2fc

080099b0 <__cvt>:
 80099b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099b4:	ec57 6b10 	vmov	r6, r7, d0
 80099b8:	2f00      	cmp	r7, #0
 80099ba:	460c      	mov	r4, r1
 80099bc:	4619      	mov	r1, r3
 80099be:	463b      	mov	r3, r7
 80099c0:	bfbb      	ittet	lt
 80099c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80099c6:	461f      	movlt	r7, r3
 80099c8:	2300      	movge	r3, #0
 80099ca:	232d      	movlt	r3, #45	@ 0x2d
 80099cc:	700b      	strb	r3, [r1, #0]
 80099ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80099d4:	4691      	mov	r9, r2
 80099d6:	f023 0820 	bic.w	r8, r3, #32
 80099da:	bfbc      	itt	lt
 80099dc:	4632      	movlt	r2, r6
 80099de:	4616      	movlt	r6, r2
 80099e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099e4:	d005      	beq.n	80099f2 <__cvt+0x42>
 80099e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80099ea:	d100      	bne.n	80099ee <__cvt+0x3e>
 80099ec:	3401      	adds	r4, #1
 80099ee:	2102      	movs	r1, #2
 80099f0:	e000      	b.n	80099f4 <__cvt+0x44>
 80099f2:	2103      	movs	r1, #3
 80099f4:	ab03      	add	r3, sp, #12
 80099f6:	9301      	str	r3, [sp, #4]
 80099f8:	ab02      	add	r3, sp, #8
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	ec47 6b10 	vmov	d0, r6, r7
 8009a00:	4653      	mov	r3, sl
 8009a02:	4622      	mov	r2, r4
 8009a04:	f001 f8e8 	bl	800abd8 <_dtoa_r>
 8009a08:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009a0c:	4605      	mov	r5, r0
 8009a0e:	d119      	bne.n	8009a44 <__cvt+0x94>
 8009a10:	f019 0f01 	tst.w	r9, #1
 8009a14:	d00e      	beq.n	8009a34 <__cvt+0x84>
 8009a16:	eb00 0904 	add.w	r9, r0, r4
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	4630      	mov	r0, r6
 8009a20:	4639      	mov	r1, r7
 8009a22:	f7f7 f851 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a26:	b108      	cbz	r0, 8009a2c <__cvt+0x7c>
 8009a28:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a2c:	2230      	movs	r2, #48	@ 0x30
 8009a2e:	9b03      	ldr	r3, [sp, #12]
 8009a30:	454b      	cmp	r3, r9
 8009a32:	d31e      	bcc.n	8009a72 <__cvt+0xc2>
 8009a34:	9b03      	ldr	r3, [sp, #12]
 8009a36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a38:	1b5b      	subs	r3, r3, r5
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	6013      	str	r3, [r2, #0]
 8009a3e:	b004      	add	sp, #16
 8009a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a48:	eb00 0904 	add.w	r9, r0, r4
 8009a4c:	d1e5      	bne.n	8009a1a <__cvt+0x6a>
 8009a4e:	7803      	ldrb	r3, [r0, #0]
 8009a50:	2b30      	cmp	r3, #48	@ 0x30
 8009a52:	d10a      	bne.n	8009a6a <__cvt+0xba>
 8009a54:	2200      	movs	r2, #0
 8009a56:	2300      	movs	r3, #0
 8009a58:	4630      	mov	r0, r6
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	f7f7 f834 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a60:	b918      	cbnz	r0, 8009a6a <__cvt+0xba>
 8009a62:	f1c4 0401 	rsb	r4, r4, #1
 8009a66:	f8ca 4000 	str.w	r4, [sl]
 8009a6a:	f8da 3000 	ldr.w	r3, [sl]
 8009a6e:	4499      	add	r9, r3
 8009a70:	e7d3      	b.n	8009a1a <__cvt+0x6a>
 8009a72:	1c59      	adds	r1, r3, #1
 8009a74:	9103      	str	r1, [sp, #12]
 8009a76:	701a      	strb	r2, [r3, #0]
 8009a78:	e7d9      	b.n	8009a2e <__cvt+0x7e>

08009a7a <__exponent>:
 8009a7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a7c:	2900      	cmp	r1, #0
 8009a7e:	bfba      	itte	lt
 8009a80:	4249      	neglt	r1, r1
 8009a82:	232d      	movlt	r3, #45	@ 0x2d
 8009a84:	232b      	movge	r3, #43	@ 0x2b
 8009a86:	2909      	cmp	r1, #9
 8009a88:	7002      	strb	r2, [r0, #0]
 8009a8a:	7043      	strb	r3, [r0, #1]
 8009a8c:	dd29      	ble.n	8009ae2 <__exponent+0x68>
 8009a8e:	f10d 0307 	add.w	r3, sp, #7
 8009a92:	461d      	mov	r5, r3
 8009a94:	270a      	movs	r7, #10
 8009a96:	461a      	mov	r2, r3
 8009a98:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a9c:	fb07 1416 	mls	r4, r7, r6, r1
 8009aa0:	3430      	adds	r4, #48	@ 0x30
 8009aa2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	2c63      	cmp	r4, #99	@ 0x63
 8009aaa:	f103 33ff 	add.w	r3, r3, #4294967295
 8009aae:	4631      	mov	r1, r6
 8009ab0:	dcf1      	bgt.n	8009a96 <__exponent+0x1c>
 8009ab2:	3130      	adds	r1, #48	@ 0x30
 8009ab4:	1e94      	subs	r4, r2, #2
 8009ab6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009aba:	1c41      	adds	r1, r0, #1
 8009abc:	4623      	mov	r3, r4
 8009abe:	42ab      	cmp	r3, r5
 8009ac0:	d30a      	bcc.n	8009ad8 <__exponent+0x5e>
 8009ac2:	f10d 0309 	add.w	r3, sp, #9
 8009ac6:	1a9b      	subs	r3, r3, r2
 8009ac8:	42ac      	cmp	r4, r5
 8009aca:	bf88      	it	hi
 8009acc:	2300      	movhi	r3, #0
 8009ace:	3302      	adds	r3, #2
 8009ad0:	4403      	add	r3, r0
 8009ad2:	1a18      	subs	r0, r3, r0
 8009ad4:	b003      	add	sp, #12
 8009ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ad8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009adc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009ae0:	e7ed      	b.n	8009abe <__exponent+0x44>
 8009ae2:	2330      	movs	r3, #48	@ 0x30
 8009ae4:	3130      	adds	r1, #48	@ 0x30
 8009ae6:	7083      	strb	r3, [r0, #2]
 8009ae8:	70c1      	strb	r1, [r0, #3]
 8009aea:	1d03      	adds	r3, r0, #4
 8009aec:	e7f1      	b.n	8009ad2 <__exponent+0x58>
	...

08009af0 <_printf_float>:
 8009af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af4:	b08d      	sub	sp, #52	@ 0x34
 8009af6:	460c      	mov	r4, r1
 8009af8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009afc:	4616      	mov	r6, r2
 8009afe:	461f      	mov	r7, r3
 8009b00:	4605      	mov	r5, r0
 8009b02:	f000 fefd 	bl	800a900 <_localeconv_r>
 8009b06:	6803      	ldr	r3, [r0, #0]
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7f6 fbb0 	bl	8000270 <strlen>
 8009b10:	2300      	movs	r3, #0
 8009b12:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b14:	f8d8 3000 	ldr.w	r3, [r8]
 8009b18:	9005      	str	r0, [sp, #20]
 8009b1a:	3307      	adds	r3, #7
 8009b1c:	f023 0307 	bic.w	r3, r3, #7
 8009b20:	f103 0208 	add.w	r2, r3, #8
 8009b24:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b28:	f8d4 b000 	ldr.w	fp, [r4]
 8009b2c:	f8c8 2000 	str.w	r2, [r8]
 8009b30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b34:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b38:	9307      	str	r3, [sp, #28]
 8009b3a:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b3e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b46:	4b9c      	ldr	r3, [pc, #624]	@ (8009db8 <_printf_float+0x2c8>)
 8009b48:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4c:	f7f6 ffee 	bl	8000b2c <__aeabi_dcmpun>
 8009b50:	bb70      	cbnz	r0, 8009bb0 <_printf_float+0xc0>
 8009b52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b56:	4b98      	ldr	r3, [pc, #608]	@ (8009db8 <_printf_float+0x2c8>)
 8009b58:	f04f 32ff 	mov.w	r2, #4294967295
 8009b5c:	f7f6 ffc8 	bl	8000af0 <__aeabi_dcmple>
 8009b60:	bb30      	cbnz	r0, 8009bb0 <_printf_float+0xc0>
 8009b62:	2200      	movs	r2, #0
 8009b64:	2300      	movs	r3, #0
 8009b66:	4640      	mov	r0, r8
 8009b68:	4649      	mov	r1, r9
 8009b6a:	f7f6 ffb7 	bl	8000adc <__aeabi_dcmplt>
 8009b6e:	b110      	cbz	r0, 8009b76 <_printf_float+0x86>
 8009b70:	232d      	movs	r3, #45	@ 0x2d
 8009b72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b76:	4a91      	ldr	r2, [pc, #580]	@ (8009dbc <_printf_float+0x2cc>)
 8009b78:	4b91      	ldr	r3, [pc, #580]	@ (8009dc0 <_printf_float+0x2d0>)
 8009b7a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009b7e:	bf94      	ite	ls
 8009b80:	4690      	movls	r8, r2
 8009b82:	4698      	movhi	r8, r3
 8009b84:	2303      	movs	r3, #3
 8009b86:	6123      	str	r3, [r4, #16]
 8009b88:	f02b 0304 	bic.w	r3, fp, #4
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	f04f 0900 	mov.w	r9, #0
 8009b92:	9700      	str	r7, [sp, #0]
 8009b94:	4633      	mov	r3, r6
 8009b96:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009b98:	4621      	mov	r1, r4
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f000 f9d2 	bl	8009f44 <_printf_common>
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	f040 808d 	bne.w	8009cc0 <_printf_float+0x1d0>
 8009ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8009baa:	b00d      	add	sp, #52	@ 0x34
 8009bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb0:	4642      	mov	r2, r8
 8009bb2:	464b      	mov	r3, r9
 8009bb4:	4640      	mov	r0, r8
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	f7f6 ffb8 	bl	8000b2c <__aeabi_dcmpun>
 8009bbc:	b140      	cbz	r0, 8009bd0 <_printf_float+0xe0>
 8009bbe:	464b      	mov	r3, r9
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	bfbc      	itt	lt
 8009bc4:	232d      	movlt	r3, #45	@ 0x2d
 8009bc6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009bca:	4a7e      	ldr	r2, [pc, #504]	@ (8009dc4 <_printf_float+0x2d4>)
 8009bcc:	4b7e      	ldr	r3, [pc, #504]	@ (8009dc8 <_printf_float+0x2d8>)
 8009bce:	e7d4      	b.n	8009b7a <_printf_float+0x8a>
 8009bd0:	6863      	ldr	r3, [r4, #4]
 8009bd2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009bd6:	9206      	str	r2, [sp, #24]
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	d13b      	bne.n	8009c54 <_printf_float+0x164>
 8009bdc:	2306      	movs	r3, #6
 8009bde:	6063      	str	r3, [r4, #4]
 8009be0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009be4:	2300      	movs	r3, #0
 8009be6:	6022      	str	r2, [r4, #0]
 8009be8:	9303      	str	r3, [sp, #12]
 8009bea:	ab0a      	add	r3, sp, #40	@ 0x28
 8009bec:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009bf0:	ab09      	add	r3, sp, #36	@ 0x24
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	6861      	ldr	r1, [r4, #4]
 8009bf6:	ec49 8b10 	vmov	d0, r8, r9
 8009bfa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f7ff fed6 	bl	80099b0 <__cvt>
 8009c04:	9b06      	ldr	r3, [sp, #24]
 8009c06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c08:	2b47      	cmp	r3, #71	@ 0x47
 8009c0a:	4680      	mov	r8, r0
 8009c0c:	d129      	bne.n	8009c62 <_printf_float+0x172>
 8009c0e:	1cc8      	adds	r0, r1, #3
 8009c10:	db02      	blt.n	8009c18 <_printf_float+0x128>
 8009c12:	6863      	ldr	r3, [r4, #4]
 8009c14:	4299      	cmp	r1, r3
 8009c16:	dd41      	ble.n	8009c9c <_printf_float+0x1ac>
 8009c18:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c1c:	fa5f fa8a 	uxtb.w	sl, sl
 8009c20:	3901      	subs	r1, #1
 8009c22:	4652      	mov	r2, sl
 8009c24:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c28:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c2a:	f7ff ff26 	bl	8009a7a <__exponent>
 8009c2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c30:	1813      	adds	r3, r2, r0
 8009c32:	2a01      	cmp	r2, #1
 8009c34:	4681      	mov	r9, r0
 8009c36:	6123      	str	r3, [r4, #16]
 8009c38:	dc02      	bgt.n	8009c40 <_printf_float+0x150>
 8009c3a:	6822      	ldr	r2, [r4, #0]
 8009c3c:	07d2      	lsls	r2, r2, #31
 8009c3e:	d501      	bpl.n	8009c44 <_printf_float+0x154>
 8009c40:	3301      	adds	r3, #1
 8009c42:	6123      	str	r3, [r4, #16]
 8009c44:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d0a2      	beq.n	8009b92 <_printf_float+0xa2>
 8009c4c:	232d      	movs	r3, #45	@ 0x2d
 8009c4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c52:	e79e      	b.n	8009b92 <_printf_float+0xa2>
 8009c54:	9a06      	ldr	r2, [sp, #24]
 8009c56:	2a47      	cmp	r2, #71	@ 0x47
 8009c58:	d1c2      	bne.n	8009be0 <_printf_float+0xf0>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1c0      	bne.n	8009be0 <_printf_float+0xf0>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e7bd      	b.n	8009bde <_printf_float+0xee>
 8009c62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c66:	d9db      	bls.n	8009c20 <_printf_float+0x130>
 8009c68:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009c6c:	d118      	bne.n	8009ca0 <_printf_float+0x1b0>
 8009c6e:	2900      	cmp	r1, #0
 8009c70:	6863      	ldr	r3, [r4, #4]
 8009c72:	dd0b      	ble.n	8009c8c <_printf_float+0x19c>
 8009c74:	6121      	str	r1, [r4, #16]
 8009c76:	b913      	cbnz	r3, 8009c7e <_printf_float+0x18e>
 8009c78:	6822      	ldr	r2, [r4, #0]
 8009c7a:	07d0      	lsls	r0, r2, #31
 8009c7c:	d502      	bpl.n	8009c84 <_printf_float+0x194>
 8009c7e:	3301      	adds	r3, #1
 8009c80:	440b      	add	r3, r1
 8009c82:	6123      	str	r3, [r4, #16]
 8009c84:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009c86:	f04f 0900 	mov.w	r9, #0
 8009c8a:	e7db      	b.n	8009c44 <_printf_float+0x154>
 8009c8c:	b913      	cbnz	r3, 8009c94 <_printf_float+0x1a4>
 8009c8e:	6822      	ldr	r2, [r4, #0]
 8009c90:	07d2      	lsls	r2, r2, #31
 8009c92:	d501      	bpl.n	8009c98 <_printf_float+0x1a8>
 8009c94:	3302      	adds	r3, #2
 8009c96:	e7f4      	b.n	8009c82 <_printf_float+0x192>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e7f2      	b.n	8009c82 <_printf_float+0x192>
 8009c9c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009ca0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ca2:	4299      	cmp	r1, r3
 8009ca4:	db05      	blt.n	8009cb2 <_printf_float+0x1c2>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	6121      	str	r1, [r4, #16]
 8009caa:	07d8      	lsls	r0, r3, #31
 8009cac:	d5ea      	bpl.n	8009c84 <_printf_float+0x194>
 8009cae:	1c4b      	adds	r3, r1, #1
 8009cb0:	e7e7      	b.n	8009c82 <_printf_float+0x192>
 8009cb2:	2900      	cmp	r1, #0
 8009cb4:	bfd4      	ite	le
 8009cb6:	f1c1 0202 	rsble	r2, r1, #2
 8009cba:	2201      	movgt	r2, #1
 8009cbc:	4413      	add	r3, r2
 8009cbe:	e7e0      	b.n	8009c82 <_printf_float+0x192>
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	055a      	lsls	r2, r3, #21
 8009cc4:	d407      	bmi.n	8009cd6 <_printf_float+0x1e6>
 8009cc6:	6923      	ldr	r3, [r4, #16]
 8009cc8:	4642      	mov	r2, r8
 8009cca:	4631      	mov	r1, r6
 8009ccc:	4628      	mov	r0, r5
 8009cce:	47b8      	blx	r7
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d12b      	bne.n	8009d2c <_printf_float+0x23c>
 8009cd4:	e767      	b.n	8009ba6 <_printf_float+0xb6>
 8009cd6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009cda:	f240 80dd 	bls.w	8009e98 <_printf_float+0x3a8>
 8009cde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f7f6 feef 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cea:	2800      	cmp	r0, #0
 8009cec:	d033      	beq.n	8009d56 <_printf_float+0x266>
 8009cee:	4a37      	ldr	r2, [pc, #220]	@ (8009dcc <_printf_float+0x2dc>)
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	4631      	mov	r1, r6
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	47b8      	blx	r7
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	f43f af54 	beq.w	8009ba6 <_printf_float+0xb6>
 8009cfe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009d02:	4543      	cmp	r3, r8
 8009d04:	db02      	blt.n	8009d0c <_printf_float+0x21c>
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	07d8      	lsls	r0, r3, #31
 8009d0a:	d50f      	bpl.n	8009d2c <_printf_float+0x23c>
 8009d0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d10:	4631      	mov	r1, r6
 8009d12:	4628      	mov	r0, r5
 8009d14:	47b8      	blx	r7
 8009d16:	3001      	adds	r0, #1
 8009d18:	f43f af45 	beq.w	8009ba6 <_printf_float+0xb6>
 8009d1c:	f04f 0900 	mov.w	r9, #0
 8009d20:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d24:	f104 0a1a 	add.w	sl, r4, #26
 8009d28:	45c8      	cmp	r8, r9
 8009d2a:	dc09      	bgt.n	8009d40 <_printf_float+0x250>
 8009d2c:	6823      	ldr	r3, [r4, #0]
 8009d2e:	079b      	lsls	r3, r3, #30
 8009d30:	f100 8103 	bmi.w	8009f3a <_printf_float+0x44a>
 8009d34:	68e0      	ldr	r0, [r4, #12]
 8009d36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d38:	4298      	cmp	r0, r3
 8009d3a:	bfb8      	it	lt
 8009d3c:	4618      	movlt	r0, r3
 8009d3e:	e734      	b.n	8009baa <_printf_float+0xba>
 8009d40:	2301      	movs	r3, #1
 8009d42:	4652      	mov	r2, sl
 8009d44:	4631      	mov	r1, r6
 8009d46:	4628      	mov	r0, r5
 8009d48:	47b8      	blx	r7
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	f43f af2b 	beq.w	8009ba6 <_printf_float+0xb6>
 8009d50:	f109 0901 	add.w	r9, r9, #1
 8009d54:	e7e8      	b.n	8009d28 <_printf_float+0x238>
 8009d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	dc39      	bgt.n	8009dd0 <_printf_float+0x2e0>
 8009d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8009dcc <_printf_float+0x2dc>)
 8009d5e:	2301      	movs	r3, #1
 8009d60:	4631      	mov	r1, r6
 8009d62:	4628      	mov	r0, r5
 8009d64:	47b8      	blx	r7
 8009d66:	3001      	adds	r0, #1
 8009d68:	f43f af1d 	beq.w	8009ba6 <_printf_float+0xb6>
 8009d6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009d70:	ea59 0303 	orrs.w	r3, r9, r3
 8009d74:	d102      	bne.n	8009d7c <_printf_float+0x28c>
 8009d76:	6823      	ldr	r3, [r4, #0]
 8009d78:	07d9      	lsls	r1, r3, #31
 8009d7a:	d5d7      	bpl.n	8009d2c <_printf_float+0x23c>
 8009d7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d80:	4631      	mov	r1, r6
 8009d82:	4628      	mov	r0, r5
 8009d84:	47b8      	blx	r7
 8009d86:	3001      	adds	r0, #1
 8009d88:	f43f af0d 	beq.w	8009ba6 <_printf_float+0xb6>
 8009d8c:	f04f 0a00 	mov.w	sl, #0
 8009d90:	f104 0b1a 	add.w	fp, r4, #26
 8009d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d96:	425b      	negs	r3, r3
 8009d98:	4553      	cmp	r3, sl
 8009d9a:	dc01      	bgt.n	8009da0 <_printf_float+0x2b0>
 8009d9c:	464b      	mov	r3, r9
 8009d9e:	e793      	b.n	8009cc8 <_printf_float+0x1d8>
 8009da0:	2301      	movs	r3, #1
 8009da2:	465a      	mov	r2, fp
 8009da4:	4631      	mov	r1, r6
 8009da6:	4628      	mov	r0, r5
 8009da8:	47b8      	blx	r7
 8009daa:	3001      	adds	r0, #1
 8009dac:	f43f aefb 	beq.w	8009ba6 <_printf_float+0xb6>
 8009db0:	f10a 0a01 	add.w	sl, sl, #1
 8009db4:	e7ee      	b.n	8009d94 <_printf_float+0x2a4>
 8009db6:	bf00      	nop
 8009db8:	7fefffff 	.word	0x7fefffff
 8009dbc:	0800e321 	.word	0x0800e321
 8009dc0:	0800e325 	.word	0x0800e325
 8009dc4:	0800e329 	.word	0x0800e329
 8009dc8:	0800e32d 	.word	0x0800e32d
 8009dcc:	0800e331 	.word	0x0800e331
 8009dd0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009dd2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009dd6:	4553      	cmp	r3, sl
 8009dd8:	bfa8      	it	ge
 8009dda:	4653      	movge	r3, sl
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	4699      	mov	r9, r3
 8009de0:	dc36      	bgt.n	8009e50 <_printf_float+0x360>
 8009de2:	f04f 0b00 	mov.w	fp, #0
 8009de6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dea:	f104 021a 	add.w	r2, r4, #26
 8009dee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009df0:	9306      	str	r3, [sp, #24]
 8009df2:	eba3 0309 	sub.w	r3, r3, r9
 8009df6:	455b      	cmp	r3, fp
 8009df8:	dc31      	bgt.n	8009e5e <_printf_float+0x36e>
 8009dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dfc:	459a      	cmp	sl, r3
 8009dfe:	dc3a      	bgt.n	8009e76 <_printf_float+0x386>
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	07da      	lsls	r2, r3, #31
 8009e04:	d437      	bmi.n	8009e76 <_printf_float+0x386>
 8009e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e08:	ebaa 0903 	sub.w	r9, sl, r3
 8009e0c:	9b06      	ldr	r3, [sp, #24]
 8009e0e:	ebaa 0303 	sub.w	r3, sl, r3
 8009e12:	4599      	cmp	r9, r3
 8009e14:	bfa8      	it	ge
 8009e16:	4699      	movge	r9, r3
 8009e18:	f1b9 0f00 	cmp.w	r9, #0
 8009e1c:	dc33      	bgt.n	8009e86 <_printf_float+0x396>
 8009e1e:	f04f 0800 	mov.w	r8, #0
 8009e22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e26:	f104 0b1a 	add.w	fp, r4, #26
 8009e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e2c:	ebaa 0303 	sub.w	r3, sl, r3
 8009e30:	eba3 0309 	sub.w	r3, r3, r9
 8009e34:	4543      	cmp	r3, r8
 8009e36:	f77f af79 	ble.w	8009d2c <_printf_float+0x23c>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	465a      	mov	r2, fp
 8009e3e:	4631      	mov	r1, r6
 8009e40:	4628      	mov	r0, r5
 8009e42:	47b8      	blx	r7
 8009e44:	3001      	adds	r0, #1
 8009e46:	f43f aeae 	beq.w	8009ba6 <_printf_float+0xb6>
 8009e4a:	f108 0801 	add.w	r8, r8, #1
 8009e4e:	e7ec      	b.n	8009e2a <_printf_float+0x33a>
 8009e50:	4642      	mov	r2, r8
 8009e52:	4631      	mov	r1, r6
 8009e54:	4628      	mov	r0, r5
 8009e56:	47b8      	blx	r7
 8009e58:	3001      	adds	r0, #1
 8009e5a:	d1c2      	bne.n	8009de2 <_printf_float+0x2f2>
 8009e5c:	e6a3      	b.n	8009ba6 <_printf_float+0xb6>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	4631      	mov	r1, r6
 8009e62:	4628      	mov	r0, r5
 8009e64:	9206      	str	r2, [sp, #24]
 8009e66:	47b8      	blx	r7
 8009e68:	3001      	adds	r0, #1
 8009e6a:	f43f ae9c 	beq.w	8009ba6 <_printf_float+0xb6>
 8009e6e:	9a06      	ldr	r2, [sp, #24]
 8009e70:	f10b 0b01 	add.w	fp, fp, #1
 8009e74:	e7bb      	b.n	8009dee <_printf_float+0x2fe>
 8009e76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e7a:	4631      	mov	r1, r6
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	47b8      	blx	r7
 8009e80:	3001      	adds	r0, #1
 8009e82:	d1c0      	bne.n	8009e06 <_printf_float+0x316>
 8009e84:	e68f      	b.n	8009ba6 <_printf_float+0xb6>
 8009e86:	9a06      	ldr	r2, [sp, #24]
 8009e88:	464b      	mov	r3, r9
 8009e8a:	4442      	add	r2, r8
 8009e8c:	4631      	mov	r1, r6
 8009e8e:	4628      	mov	r0, r5
 8009e90:	47b8      	blx	r7
 8009e92:	3001      	adds	r0, #1
 8009e94:	d1c3      	bne.n	8009e1e <_printf_float+0x32e>
 8009e96:	e686      	b.n	8009ba6 <_printf_float+0xb6>
 8009e98:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e9c:	f1ba 0f01 	cmp.w	sl, #1
 8009ea0:	dc01      	bgt.n	8009ea6 <_printf_float+0x3b6>
 8009ea2:	07db      	lsls	r3, r3, #31
 8009ea4:	d536      	bpl.n	8009f14 <_printf_float+0x424>
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	4642      	mov	r2, r8
 8009eaa:	4631      	mov	r1, r6
 8009eac:	4628      	mov	r0, r5
 8009eae:	47b8      	blx	r7
 8009eb0:	3001      	adds	r0, #1
 8009eb2:	f43f ae78 	beq.w	8009ba6 <_printf_float+0xb6>
 8009eb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eba:	4631      	mov	r1, r6
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	47b8      	blx	r7
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	f43f ae70 	beq.w	8009ba6 <_printf_float+0xb6>
 8009ec6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009eca:	2200      	movs	r2, #0
 8009ecc:	2300      	movs	r3, #0
 8009ece:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ed2:	f7f6 fdf9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ed6:	b9c0      	cbnz	r0, 8009f0a <_printf_float+0x41a>
 8009ed8:	4653      	mov	r3, sl
 8009eda:	f108 0201 	add.w	r2, r8, #1
 8009ede:	4631      	mov	r1, r6
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	47b8      	blx	r7
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d10c      	bne.n	8009f02 <_printf_float+0x412>
 8009ee8:	e65d      	b.n	8009ba6 <_printf_float+0xb6>
 8009eea:	2301      	movs	r3, #1
 8009eec:	465a      	mov	r2, fp
 8009eee:	4631      	mov	r1, r6
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	47b8      	blx	r7
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	f43f ae56 	beq.w	8009ba6 <_printf_float+0xb6>
 8009efa:	f108 0801 	add.w	r8, r8, #1
 8009efe:	45d0      	cmp	r8, sl
 8009f00:	dbf3      	blt.n	8009eea <_printf_float+0x3fa>
 8009f02:	464b      	mov	r3, r9
 8009f04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009f08:	e6df      	b.n	8009cca <_printf_float+0x1da>
 8009f0a:	f04f 0800 	mov.w	r8, #0
 8009f0e:	f104 0b1a 	add.w	fp, r4, #26
 8009f12:	e7f4      	b.n	8009efe <_printf_float+0x40e>
 8009f14:	2301      	movs	r3, #1
 8009f16:	4642      	mov	r2, r8
 8009f18:	e7e1      	b.n	8009ede <_printf_float+0x3ee>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	464a      	mov	r2, r9
 8009f1e:	4631      	mov	r1, r6
 8009f20:	4628      	mov	r0, r5
 8009f22:	47b8      	blx	r7
 8009f24:	3001      	adds	r0, #1
 8009f26:	f43f ae3e 	beq.w	8009ba6 <_printf_float+0xb6>
 8009f2a:	f108 0801 	add.w	r8, r8, #1
 8009f2e:	68e3      	ldr	r3, [r4, #12]
 8009f30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f32:	1a5b      	subs	r3, r3, r1
 8009f34:	4543      	cmp	r3, r8
 8009f36:	dcf0      	bgt.n	8009f1a <_printf_float+0x42a>
 8009f38:	e6fc      	b.n	8009d34 <_printf_float+0x244>
 8009f3a:	f04f 0800 	mov.w	r8, #0
 8009f3e:	f104 0919 	add.w	r9, r4, #25
 8009f42:	e7f4      	b.n	8009f2e <_printf_float+0x43e>

08009f44 <_printf_common>:
 8009f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f48:	4616      	mov	r6, r2
 8009f4a:	4698      	mov	r8, r3
 8009f4c:	688a      	ldr	r2, [r1, #8]
 8009f4e:	690b      	ldr	r3, [r1, #16]
 8009f50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f54:	4293      	cmp	r3, r2
 8009f56:	bfb8      	it	lt
 8009f58:	4613      	movlt	r3, r2
 8009f5a:	6033      	str	r3, [r6, #0]
 8009f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f60:	4607      	mov	r7, r0
 8009f62:	460c      	mov	r4, r1
 8009f64:	b10a      	cbz	r2, 8009f6a <_printf_common+0x26>
 8009f66:	3301      	adds	r3, #1
 8009f68:	6033      	str	r3, [r6, #0]
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	0699      	lsls	r1, r3, #26
 8009f6e:	bf42      	ittt	mi
 8009f70:	6833      	ldrmi	r3, [r6, #0]
 8009f72:	3302      	addmi	r3, #2
 8009f74:	6033      	strmi	r3, [r6, #0]
 8009f76:	6825      	ldr	r5, [r4, #0]
 8009f78:	f015 0506 	ands.w	r5, r5, #6
 8009f7c:	d106      	bne.n	8009f8c <_printf_common+0x48>
 8009f7e:	f104 0a19 	add.w	sl, r4, #25
 8009f82:	68e3      	ldr	r3, [r4, #12]
 8009f84:	6832      	ldr	r2, [r6, #0]
 8009f86:	1a9b      	subs	r3, r3, r2
 8009f88:	42ab      	cmp	r3, r5
 8009f8a:	dc26      	bgt.n	8009fda <_printf_common+0x96>
 8009f8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f90:	6822      	ldr	r2, [r4, #0]
 8009f92:	3b00      	subs	r3, #0
 8009f94:	bf18      	it	ne
 8009f96:	2301      	movne	r3, #1
 8009f98:	0692      	lsls	r2, r2, #26
 8009f9a:	d42b      	bmi.n	8009ff4 <_printf_common+0xb0>
 8009f9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009fa0:	4641      	mov	r1, r8
 8009fa2:	4638      	mov	r0, r7
 8009fa4:	47c8      	blx	r9
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	d01e      	beq.n	8009fe8 <_printf_common+0xa4>
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	6922      	ldr	r2, [r4, #16]
 8009fae:	f003 0306 	and.w	r3, r3, #6
 8009fb2:	2b04      	cmp	r3, #4
 8009fb4:	bf02      	ittt	eq
 8009fb6:	68e5      	ldreq	r5, [r4, #12]
 8009fb8:	6833      	ldreq	r3, [r6, #0]
 8009fba:	1aed      	subeq	r5, r5, r3
 8009fbc:	68a3      	ldr	r3, [r4, #8]
 8009fbe:	bf0c      	ite	eq
 8009fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fc4:	2500      	movne	r5, #0
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	bfc4      	itt	gt
 8009fca:	1a9b      	subgt	r3, r3, r2
 8009fcc:	18ed      	addgt	r5, r5, r3
 8009fce:	2600      	movs	r6, #0
 8009fd0:	341a      	adds	r4, #26
 8009fd2:	42b5      	cmp	r5, r6
 8009fd4:	d11a      	bne.n	800a00c <_printf_common+0xc8>
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	e008      	b.n	8009fec <_printf_common+0xa8>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	4652      	mov	r2, sl
 8009fde:	4641      	mov	r1, r8
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	47c8      	blx	r9
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	d103      	bne.n	8009ff0 <_printf_common+0xac>
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff0:	3501      	adds	r5, #1
 8009ff2:	e7c6      	b.n	8009f82 <_printf_common+0x3e>
 8009ff4:	18e1      	adds	r1, r4, r3
 8009ff6:	1c5a      	adds	r2, r3, #1
 8009ff8:	2030      	movs	r0, #48	@ 0x30
 8009ffa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ffe:	4422      	add	r2, r4
 800a000:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a004:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a008:	3302      	adds	r3, #2
 800a00a:	e7c7      	b.n	8009f9c <_printf_common+0x58>
 800a00c:	2301      	movs	r3, #1
 800a00e:	4622      	mov	r2, r4
 800a010:	4641      	mov	r1, r8
 800a012:	4638      	mov	r0, r7
 800a014:	47c8      	blx	r9
 800a016:	3001      	adds	r0, #1
 800a018:	d0e6      	beq.n	8009fe8 <_printf_common+0xa4>
 800a01a:	3601      	adds	r6, #1
 800a01c:	e7d9      	b.n	8009fd2 <_printf_common+0x8e>
	...

0800a020 <_printf_i>:
 800a020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a024:	7e0f      	ldrb	r7, [r1, #24]
 800a026:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a028:	2f78      	cmp	r7, #120	@ 0x78
 800a02a:	4691      	mov	r9, r2
 800a02c:	4680      	mov	r8, r0
 800a02e:	460c      	mov	r4, r1
 800a030:	469a      	mov	sl, r3
 800a032:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a036:	d807      	bhi.n	800a048 <_printf_i+0x28>
 800a038:	2f62      	cmp	r7, #98	@ 0x62
 800a03a:	d80a      	bhi.n	800a052 <_printf_i+0x32>
 800a03c:	2f00      	cmp	r7, #0
 800a03e:	f000 80d2 	beq.w	800a1e6 <_printf_i+0x1c6>
 800a042:	2f58      	cmp	r7, #88	@ 0x58
 800a044:	f000 80b9 	beq.w	800a1ba <_printf_i+0x19a>
 800a048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a04c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a050:	e03a      	b.n	800a0c8 <_printf_i+0xa8>
 800a052:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a056:	2b15      	cmp	r3, #21
 800a058:	d8f6      	bhi.n	800a048 <_printf_i+0x28>
 800a05a:	a101      	add	r1, pc, #4	@ (adr r1, 800a060 <_printf_i+0x40>)
 800a05c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a060:	0800a0b9 	.word	0x0800a0b9
 800a064:	0800a0cd 	.word	0x0800a0cd
 800a068:	0800a049 	.word	0x0800a049
 800a06c:	0800a049 	.word	0x0800a049
 800a070:	0800a049 	.word	0x0800a049
 800a074:	0800a049 	.word	0x0800a049
 800a078:	0800a0cd 	.word	0x0800a0cd
 800a07c:	0800a049 	.word	0x0800a049
 800a080:	0800a049 	.word	0x0800a049
 800a084:	0800a049 	.word	0x0800a049
 800a088:	0800a049 	.word	0x0800a049
 800a08c:	0800a1cd 	.word	0x0800a1cd
 800a090:	0800a0f7 	.word	0x0800a0f7
 800a094:	0800a187 	.word	0x0800a187
 800a098:	0800a049 	.word	0x0800a049
 800a09c:	0800a049 	.word	0x0800a049
 800a0a0:	0800a1ef 	.word	0x0800a1ef
 800a0a4:	0800a049 	.word	0x0800a049
 800a0a8:	0800a0f7 	.word	0x0800a0f7
 800a0ac:	0800a049 	.word	0x0800a049
 800a0b0:	0800a049 	.word	0x0800a049
 800a0b4:	0800a18f 	.word	0x0800a18f
 800a0b8:	6833      	ldr	r3, [r6, #0]
 800a0ba:	1d1a      	adds	r2, r3, #4
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6032      	str	r2, [r6, #0]
 800a0c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e09d      	b.n	800a208 <_printf_i+0x1e8>
 800a0cc:	6833      	ldr	r3, [r6, #0]
 800a0ce:	6820      	ldr	r0, [r4, #0]
 800a0d0:	1d19      	adds	r1, r3, #4
 800a0d2:	6031      	str	r1, [r6, #0]
 800a0d4:	0606      	lsls	r6, r0, #24
 800a0d6:	d501      	bpl.n	800a0dc <_printf_i+0xbc>
 800a0d8:	681d      	ldr	r5, [r3, #0]
 800a0da:	e003      	b.n	800a0e4 <_printf_i+0xc4>
 800a0dc:	0645      	lsls	r5, r0, #25
 800a0de:	d5fb      	bpl.n	800a0d8 <_printf_i+0xb8>
 800a0e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0e4:	2d00      	cmp	r5, #0
 800a0e6:	da03      	bge.n	800a0f0 <_printf_i+0xd0>
 800a0e8:	232d      	movs	r3, #45	@ 0x2d
 800a0ea:	426d      	negs	r5, r5
 800a0ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0f0:	4859      	ldr	r0, [pc, #356]	@ (800a258 <_printf_i+0x238>)
 800a0f2:	230a      	movs	r3, #10
 800a0f4:	e011      	b.n	800a11a <_printf_i+0xfa>
 800a0f6:	6821      	ldr	r1, [r4, #0]
 800a0f8:	6833      	ldr	r3, [r6, #0]
 800a0fa:	0608      	lsls	r0, r1, #24
 800a0fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a100:	d402      	bmi.n	800a108 <_printf_i+0xe8>
 800a102:	0649      	lsls	r1, r1, #25
 800a104:	bf48      	it	mi
 800a106:	b2ad      	uxthmi	r5, r5
 800a108:	2f6f      	cmp	r7, #111	@ 0x6f
 800a10a:	4853      	ldr	r0, [pc, #332]	@ (800a258 <_printf_i+0x238>)
 800a10c:	6033      	str	r3, [r6, #0]
 800a10e:	bf14      	ite	ne
 800a110:	230a      	movne	r3, #10
 800a112:	2308      	moveq	r3, #8
 800a114:	2100      	movs	r1, #0
 800a116:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a11a:	6866      	ldr	r6, [r4, #4]
 800a11c:	60a6      	str	r6, [r4, #8]
 800a11e:	2e00      	cmp	r6, #0
 800a120:	bfa2      	ittt	ge
 800a122:	6821      	ldrge	r1, [r4, #0]
 800a124:	f021 0104 	bicge.w	r1, r1, #4
 800a128:	6021      	strge	r1, [r4, #0]
 800a12a:	b90d      	cbnz	r5, 800a130 <_printf_i+0x110>
 800a12c:	2e00      	cmp	r6, #0
 800a12e:	d04b      	beq.n	800a1c8 <_printf_i+0x1a8>
 800a130:	4616      	mov	r6, r2
 800a132:	fbb5 f1f3 	udiv	r1, r5, r3
 800a136:	fb03 5711 	mls	r7, r3, r1, r5
 800a13a:	5dc7      	ldrb	r7, [r0, r7]
 800a13c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a140:	462f      	mov	r7, r5
 800a142:	42bb      	cmp	r3, r7
 800a144:	460d      	mov	r5, r1
 800a146:	d9f4      	bls.n	800a132 <_printf_i+0x112>
 800a148:	2b08      	cmp	r3, #8
 800a14a:	d10b      	bne.n	800a164 <_printf_i+0x144>
 800a14c:	6823      	ldr	r3, [r4, #0]
 800a14e:	07df      	lsls	r7, r3, #31
 800a150:	d508      	bpl.n	800a164 <_printf_i+0x144>
 800a152:	6923      	ldr	r3, [r4, #16]
 800a154:	6861      	ldr	r1, [r4, #4]
 800a156:	4299      	cmp	r1, r3
 800a158:	bfde      	ittt	le
 800a15a:	2330      	movle	r3, #48	@ 0x30
 800a15c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a160:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a164:	1b92      	subs	r2, r2, r6
 800a166:	6122      	str	r2, [r4, #16]
 800a168:	f8cd a000 	str.w	sl, [sp]
 800a16c:	464b      	mov	r3, r9
 800a16e:	aa03      	add	r2, sp, #12
 800a170:	4621      	mov	r1, r4
 800a172:	4640      	mov	r0, r8
 800a174:	f7ff fee6 	bl	8009f44 <_printf_common>
 800a178:	3001      	adds	r0, #1
 800a17a:	d14a      	bne.n	800a212 <_printf_i+0x1f2>
 800a17c:	f04f 30ff 	mov.w	r0, #4294967295
 800a180:	b004      	add	sp, #16
 800a182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	f043 0320 	orr.w	r3, r3, #32
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	4833      	ldr	r0, [pc, #204]	@ (800a25c <_printf_i+0x23c>)
 800a190:	2778      	movs	r7, #120	@ 0x78
 800a192:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	6831      	ldr	r1, [r6, #0]
 800a19a:	061f      	lsls	r7, r3, #24
 800a19c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a1a0:	d402      	bmi.n	800a1a8 <_printf_i+0x188>
 800a1a2:	065f      	lsls	r7, r3, #25
 800a1a4:	bf48      	it	mi
 800a1a6:	b2ad      	uxthmi	r5, r5
 800a1a8:	6031      	str	r1, [r6, #0]
 800a1aa:	07d9      	lsls	r1, r3, #31
 800a1ac:	bf44      	itt	mi
 800a1ae:	f043 0320 	orrmi.w	r3, r3, #32
 800a1b2:	6023      	strmi	r3, [r4, #0]
 800a1b4:	b11d      	cbz	r5, 800a1be <_printf_i+0x19e>
 800a1b6:	2310      	movs	r3, #16
 800a1b8:	e7ac      	b.n	800a114 <_printf_i+0xf4>
 800a1ba:	4827      	ldr	r0, [pc, #156]	@ (800a258 <_printf_i+0x238>)
 800a1bc:	e7e9      	b.n	800a192 <_printf_i+0x172>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	f023 0320 	bic.w	r3, r3, #32
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	e7f6      	b.n	800a1b6 <_printf_i+0x196>
 800a1c8:	4616      	mov	r6, r2
 800a1ca:	e7bd      	b.n	800a148 <_printf_i+0x128>
 800a1cc:	6833      	ldr	r3, [r6, #0]
 800a1ce:	6825      	ldr	r5, [r4, #0]
 800a1d0:	6961      	ldr	r1, [r4, #20]
 800a1d2:	1d18      	adds	r0, r3, #4
 800a1d4:	6030      	str	r0, [r6, #0]
 800a1d6:	062e      	lsls	r6, r5, #24
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	d501      	bpl.n	800a1e0 <_printf_i+0x1c0>
 800a1dc:	6019      	str	r1, [r3, #0]
 800a1de:	e002      	b.n	800a1e6 <_printf_i+0x1c6>
 800a1e0:	0668      	lsls	r0, r5, #25
 800a1e2:	d5fb      	bpl.n	800a1dc <_printf_i+0x1bc>
 800a1e4:	8019      	strh	r1, [r3, #0]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	6123      	str	r3, [r4, #16]
 800a1ea:	4616      	mov	r6, r2
 800a1ec:	e7bc      	b.n	800a168 <_printf_i+0x148>
 800a1ee:	6833      	ldr	r3, [r6, #0]
 800a1f0:	1d1a      	adds	r2, r3, #4
 800a1f2:	6032      	str	r2, [r6, #0]
 800a1f4:	681e      	ldr	r6, [r3, #0]
 800a1f6:	6862      	ldr	r2, [r4, #4]
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f7f5 ffe8 	bl	80001d0 <memchr>
 800a200:	b108      	cbz	r0, 800a206 <_printf_i+0x1e6>
 800a202:	1b80      	subs	r0, r0, r6
 800a204:	6060      	str	r0, [r4, #4]
 800a206:	6863      	ldr	r3, [r4, #4]
 800a208:	6123      	str	r3, [r4, #16]
 800a20a:	2300      	movs	r3, #0
 800a20c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a210:	e7aa      	b.n	800a168 <_printf_i+0x148>
 800a212:	6923      	ldr	r3, [r4, #16]
 800a214:	4632      	mov	r2, r6
 800a216:	4649      	mov	r1, r9
 800a218:	4640      	mov	r0, r8
 800a21a:	47d0      	blx	sl
 800a21c:	3001      	adds	r0, #1
 800a21e:	d0ad      	beq.n	800a17c <_printf_i+0x15c>
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	079b      	lsls	r3, r3, #30
 800a224:	d413      	bmi.n	800a24e <_printf_i+0x22e>
 800a226:	68e0      	ldr	r0, [r4, #12]
 800a228:	9b03      	ldr	r3, [sp, #12]
 800a22a:	4298      	cmp	r0, r3
 800a22c:	bfb8      	it	lt
 800a22e:	4618      	movlt	r0, r3
 800a230:	e7a6      	b.n	800a180 <_printf_i+0x160>
 800a232:	2301      	movs	r3, #1
 800a234:	4632      	mov	r2, r6
 800a236:	4649      	mov	r1, r9
 800a238:	4640      	mov	r0, r8
 800a23a:	47d0      	blx	sl
 800a23c:	3001      	adds	r0, #1
 800a23e:	d09d      	beq.n	800a17c <_printf_i+0x15c>
 800a240:	3501      	adds	r5, #1
 800a242:	68e3      	ldr	r3, [r4, #12]
 800a244:	9903      	ldr	r1, [sp, #12]
 800a246:	1a5b      	subs	r3, r3, r1
 800a248:	42ab      	cmp	r3, r5
 800a24a:	dcf2      	bgt.n	800a232 <_printf_i+0x212>
 800a24c:	e7eb      	b.n	800a226 <_printf_i+0x206>
 800a24e:	2500      	movs	r5, #0
 800a250:	f104 0619 	add.w	r6, r4, #25
 800a254:	e7f5      	b.n	800a242 <_printf_i+0x222>
 800a256:	bf00      	nop
 800a258:	0800e333 	.word	0x0800e333
 800a25c:	0800e344 	.word	0x0800e344

0800a260 <_scanf_float>:
 800a260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a264:	b087      	sub	sp, #28
 800a266:	4617      	mov	r7, r2
 800a268:	9303      	str	r3, [sp, #12]
 800a26a:	688b      	ldr	r3, [r1, #8]
 800a26c:	1e5a      	subs	r2, r3, #1
 800a26e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a272:	bf81      	itttt	hi
 800a274:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a278:	eb03 0b05 	addhi.w	fp, r3, r5
 800a27c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a280:	608b      	strhi	r3, [r1, #8]
 800a282:	680b      	ldr	r3, [r1, #0]
 800a284:	460a      	mov	r2, r1
 800a286:	f04f 0500 	mov.w	r5, #0
 800a28a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a28e:	f842 3b1c 	str.w	r3, [r2], #28
 800a292:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a296:	4680      	mov	r8, r0
 800a298:	460c      	mov	r4, r1
 800a29a:	bf98      	it	ls
 800a29c:	f04f 0b00 	movls.w	fp, #0
 800a2a0:	9201      	str	r2, [sp, #4]
 800a2a2:	4616      	mov	r6, r2
 800a2a4:	46aa      	mov	sl, r5
 800a2a6:	46a9      	mov	r9, r5
 800a2a8:	9502      	str	r5, [sp, #8]
 800a2aa:	68a2      	ldr	r2, [r4, #8]
 800a2ac:	b152      	cbz	r2, 800a2c4 <_scanf_float+0x64>
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	2b4e      	cmp	r3, #78	@ 0x4e
 800a2b4:	d864      	bhi.n	800a380 <_scanf_float+0x120>
 800a2b6:	2b40      	cmp	r3, #64	@ 0x40
 800a2b8:	d83c      	bhi.n	800a334 <_scanf_float+0xd4>
 800a2ba:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a2be:	b2c8      	uxtb	r0, r1
 800a2c0:	280e      	cmp	r0, #14
 800a2c2:	d93a      	bls.n	800a33a <_scanf_float+0xda>
 800a2c4:	f1b9 0f00 	cmp.w	r9, #0
 800a2c8:	d003      	beq.n	800a2d2 <_scanf_float+0x72>
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2d0:	6023      	str	r3, [r4, #0]
 800a2d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2d6:	f1ba 0f01 	cmp.w	sl, #1
 800a2da:	f200 8117 	bhi.w	800a50c <_scanf_float+0x2ac>
 800a2de:	9b01      	ldr	r3, [sp, #4]
 800a2e0:	429e      	cmp	r6, r3
 800a2e2:	f200 8108 	bhi.w	800a4f6 <_scanf_float+0x296>
 800a2e6:	2001      	movs	r0, #1
 800a2e8:	b007      	add	sp, #28
 800a2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ee:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a2f2:	2a0d      	cmp	r2, #13
 800a2f4:	d8e6      	bhi.n	800a2c4 <_scanf_float+0x64>
 800a2f6:	a101      	add	r1, pc, #4	@ (adr r1, 800a2fc <_scanf_float+0x9c>)
 800a2f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a2fc:	0800a443 	.word	0x0800a443
 800a300:	0800a2c5 	.word	0x0800a2c5
 800a304:	0800a2c5 	.word	0x0800a2c5
 800a308:	0800a2c5 	.word	0x0800a2c5
 800a30c:	0800a4a3 	.word	0x0800a4a3
 800a310:	0800a47b 	.word	0x0800a47b
 800a314:	0800a2c5 	.word	0x0800a2c5
 800a318:	0800a2c5 	.word	0x0800a2c5
 800a31c:	0800a451 	.word	0x0800a451
 800a320:	0800a2c5 	.word	0x0800a2c5
 800a324:	0800a2c5 	.word	0x0800a2c5
 800a328:	0800a2c5 	.word	0x0800a2c5
 800a32c:	0800a2c5 	.word	0x0800a2c5
 800a330:	0800a409 	.word	0x0800a409
 800a334:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a338:	e7db      	b.n	800a2f2 <_scanf_float+0x92>
 800a33a:	290e      	cmp	r1, #14
 800a33c:	d8c2      	bhi.n	800a2c4 <_scanf_float+0x64>
 800a33e:	a001      	add	r0, pc, #4	@ (adr r0, 800a344 <_scanf_float+0xe4>)
 800a340:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a344:	0800a3f9 	.word	0x0800a3f9
 800a348:	0800a2c5 	.word	0x0800a2c5
 800a34c:	0800a3f9 	.word	0x0800a3f9
 800a350:	0800a48f 	.word	0x0800a48f
 800a354:	0800a2c5 	.word	0x0800a2c5
 800a358:	0800a3a1 	.word	0x0800a3a1
 800a35c:	0800a3df 	.word	0x0800a3df
 800a360:	0800a3df 	.word	0x0800a3df
 800a364:	0800a3df 	.word	0x0800a3df
 800a368:	0800a3df 	.word	0x0800a3df
 800a36c:	0800a3df 	.word	0x0800a3df
 800a370:	0800a3df 	.word	0x0800a3df
 800a374:	0800a3df 	.word	0x0800a3df
 800a378:	0800a3df 	.word	0x0800a3df
 800a37c:	0800a3df 	.word	0x0800a3df
 800a380:	2b6e      	cmp	r3, #110	@ 0x6e
 800a382:	d809      	bhi.n	800a398 <_scanf_float+0x138>
 800a384:	2b60      	cmp	r3, #96	@ 0x60
 800a386:	d8b2      	bhi.n	800a2ee <_scanf_float+0x8e>
 800a388:	2b54      	cmp	r3, #84	@ 0x54
 800a38a:	d07b      	beq.n	800a484 <_scanf_float+0x224>
 800a38c:	2b59      	cmp	r3, #89	@ 0x59
 800a38e:	d199      	bne.n	800a2c4 <_scanf_float+0x64>
 800a390:	2d07      	cmp	r5, #7
 800a392:	d197      	bne.n	800a2c4 <_scanf_float+0x64>
 800a394:	2508      	movs	r5, #8
 800a396:	e02c      	b.n	800a3f2 <_scanf_float+0x192>
 800a398:	2b74      	cmp	r3, #116	@ 0x74
 800a39a:	d073      	beq.n	800a484 <_scanf_float+0x224>
 800a39c:	2b79      	cmp	r3, #121	@ 0x79
 800a39e:	e7f6      	b.n	800a38e <_scanf_float+0x12e>
 800a3a0:	6821      	ldr	r1, [r4, #0]
 800a3a2:	05c8      	lsls	r0, r1, #23
 800a3a4:	d51b      	bpl.n	800a3de <_scanf_float+0x17e>
 800a3a6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a3aa:	6021      	str	r1, [r4, #0]
 800a3ac:	f109 0901 	add.w	r9, r9, #1
 800a3b0:	f1bb 0f00 	cmp.w	fp, #0
 800a3b4:	d003      	beq.n	800a3be <_scanf_float+0x15e>
 800a3b6:	3201      	adds	r2, #1
 800a3b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a3bc:	60a2      	str	r2, [r4, #8]
 800a3be:	68a3      	ldr	r3, [r4, #8]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	60a3      	str	r3, [r4, #8]
 800a3c4:	6923      	ldr	r3, [r4, #16]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	6123      	str	r3, [r4, #16]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	607b      	str	r3, [r7, #4]
 800a3d2:	f340 8087 	ble.w	800a4e4 <_scanf_float+0x284>
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	603b      	str	r3, [r7, #0]
 800a3dc:	e765      	b.n	800a2aa <_scanf_float+0x4a>
 800a3de:	eb1a 0105 	adds.w	r1, sl, r5
 800a3e2:	f47f af6f 	bne.w	800a2c4 <_scanf_float+0x64>
 800a3e6:	6822      	ldr	r2, [r4, #0]
 800a3e8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a3ec:	6022      	str	r2, [r4, #0]
 800a3ee:	460d      	mov	r5, r1
 800a3f0:	468a      	mov	sl, r1
 800a3f2:	f806 3b01 	strb.w	r3, [r6], #1
 800a3f6:	e7e2      	b.n	800a3be <_scanf_float+0x15e>
 800a3f8:	6822      	ldr	r2, [r4, #0]
 800a3fa:	0610      	lsls	r0, r2, #24
 800a3fc:	f57f af62 	bpl.w	800a2c4 <_scanf_float+0x64>
 800a400:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a404:	6022      	str	r2, [r4, #0]
 800a406:	e7f4      	b.n	800a3f2 <_scanf_float+0x192>
 800a408:	f1ba 0f00 	cmp.w	sl, #0
 800a40c:	d10e      	bne.n	800a42c <_scanf_float+0x1cc>
 800a40e:	f1b9 0f00 	cmp.w	r9, #0
 800a412:	d10e      	bne.n	800a432 <_scanf_float+0x1d2>
 800a414:	6822      	ldr	r2, [r4, #0]
 800a416:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a41a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a41e:	d108      	bne.n	800a432 <_scanf_float+0x1d2>
 800a420:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a424:	6022      	str	r2, [r4, #0]
 800a426:	f04f 0a01 	mov.w	sl, #1
 800a42a:	e7e2      	b.n	800a3f2 <_scanf_float+0x192>
 800a42c:	f1ba 0f02 	cmp.w	sl, #2
 800a430:	d055      	beq.n	800a4de <_scanf_float+0x27e>
 800a432:	2d01      	cmp	r5, #1
 800a434:	d002      	beq.n	800a43c <_scanf_float+0x1dc>
 800a436:	2d04      	cmp	r5, #4
 800a438:	f47f af44 	bne.w	800a2c4 <_scanf_float+0x64>
 800a43c:	3501      	adds	r5, #1
 800a43e:	b2ed      	uxtb	r5, r5
 800a440:	e7d7      	b.n	800a3f2 <_scanf_float+0x192>
 800a442:	f1ba 0f01 	cmp.w	sl, #1
 800a446:	f47f af3d 	bne.w	800a2c4 <_scanf_float+0x64>
 800a44a:	f04f 0a02 	mov.w	sl, #2
 800a44e:	e7d0      	b.n	800a3f2 <_scanf_float+0x192>
 800a450:	b97d      	cbnz	r5, 800a472 <_scanf_float+0x212>
 800a452:	f1b9 0f00 	cmp.w	r9, #0
 800a456:	f47f af38 	bne.w	800a2ca <_scanf_float+0x6a>
 800a45a:	6822      	ldr	r2, [r4, #0]
 800a45c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a460:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a464:	f040 8108 	bne.w	800a678 <_scanf_float+0x418>
 800a468:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a46c:	6022      	str	r2, [r4, #0]
 800a46e:	2501      	movs	r5, #1
 800a470:	e7bf      	b.n	800a3f2 <_scanf_float+0x192>
 800a472:	2d03      	cmp	r5, #3
 800a474:	d0e2      	beq.n	800a43c <_scanf_float+0x1dc>
 800a476:	2d05      	cmp	r5, #5
 800a478:	e7de      	b.n	800a438 <_scanf_float+0x1d8>
 800a47a:	2d02      	cmp	r5, #2
 800a47c:	f47f af22 	bne.w	800a2c4 <_scanf_float+0x64>
 800a480:	2503      	movs	r5, #3
 800a482:	e7b6      	b.n	800a3f2 <_scanf_float+0x192>
 800a484:	2d06      	cmp	r5, #6
 800a486:	f47f af1d 	bne.w	800a2c4 <_scanf_float+0x64>
 800a48a:	2507      	movs	r5, #7
 800a48c:	e7b1      	b.n	800a3f2 <_scanf_float+0x192>
 800a48e:	6822      	ldr	r2, [r4, #0]
 800a490:	0591      	lsls	r1, r2, #22
 800a492:	f57f af17 	bpl.w	800a2c4 <_scanf_float+0x64>
 800a496:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a49a:	6022      	str	r2, [r4, #0]
 800a49c:	f8cd 9008 	str.w	r9, [sp, #8]
 800a4a0:	e7a7      	b.n	800a3f2 <_scanf_float+0x192>
 800a4a2:	6822      	ldr	r2, [r4, #0]
 800a4a4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a4a8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a4ac:	d006      	beq.n	800a4bc <_scanf_float+0x25c>
 800a4ae:	0550      	lsls	r0, r2, #21
 800a4b0:	f57f af08 	bpl.w	800a2c4 <_scanf_float+0x64>
 800a4b4:	f1b9 0f00 	cmp.w	r9, #0
 800a4b8:	f000 80de 	beq.w	800a678 <_scanf_float+0x418>
 800a4bc:	0591      	lsls	r1, r2, #22
 800a4be:	bf58      	it	pl
 800a4c0:	9902      	ldrpl	r1, [sp, #8]
 800a4c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a4c6:	bf58      	it	pl
 800a4c8:	eba9 0101 	subpl.w	r1, r9, r1
 800a4cc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a4d0:	bf58      	it	pl
 800a4d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a4d6:	6022      	str	r2, [r4, #0]
 800a4d8:	f04f 0900 	mov.w	r9, #0
 800a4dc:	e789      	b.n	800a3f2 <_scanf_float+0x192>
 800a4de:	f04f 0a03 	mov.w	sl, #3
 800a4e2:	e786      	b.n	800a3f2 <_scanf_float+0x192>
 800a4e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a4e8:	4639      	mov	r1, r7
 800a4ea:	4640      	mov	r0, r8
 800a4ec:	4798      	blx	r3
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	f43f aedb 	beq.w	800a2aa <_scanf_float+0x4a>
 800a4f4:	e6e6      	b.n	800a2c4 <_scanf_float+0x64>
 800a4f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4fe:	463a      	mov	r2, r7
 800a500:	4640      	mov	r0, r8
 800a502:	4798      	blx	r3
 800a504:	6923      	ldr	r3, [r4, #16]
 800a506:	3b01      	subs	r3, #1
 800a508:	6123      	str	r3, [r4, #16]
 800a50a:	e6e8      	b.n	800a2de <_scanf_float+0x7e>
 800a50c:	1e6b      	subs	r3, r5, #1
 800a50e:	2b06      	cmp	r3, #6
 800a510:	d824      	bhi.n	800a55c <_scanf_float+0x2fc>
 800a512:	2d02      	cmp	r5, #2
 800a514:	d836      	bhi.n	800a584 <_scanf_float+0x324>
 800a516:	9b01      	ldr	r3, [sp, #4]
 800a518:	429e      	cmp	r6, r3
 800a51a:	f67f aee4 	bls.w	800a2e6 <_scanf_float+0x86>
 800a51e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a522:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a526:	463a      	mov	r2, r7
 800a528:	4640      	mov	r0, r8
 800a52a:	4798      	blx	r3
 800a52c:	6923      	ldr	r3, [r4, #16]
 800a52e:	3b01      	subs	r3, #1
 800a530:	6123      	str	r3, [r4, #16]
 800a532:	e7f0      	b.n	800a516 <_scanf_float+0x2b6>
 800a534:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a538:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a53c:	463a      	mov	r2, r7
 800a53e:	4640      	mov	r0, r8
 800a540:	4798      	blx	r3
 800a542:	6923      	ldr	r3, [r4, #16]
 800a544:	3b01      	subs	r3, #1
 800a546:	6123      	str	r3, [r4, #16]
 800a548:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a54c:	fa5f fa8a 	uxtb.w	sl, sl
 800a550:	f1ba 0f02 	cmp.w	sl, #2
 800a554:	d1ee      	bne.n	800a534 <_scanf_float+0x2d4>
 800a556:	3d03      	subs	r5, #3
 800a558:	b2ed      	uxtb	r5, r5
 800a55a:	1b76      	subs	r6, r6, r5
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	05da      	lsls	r2, r3, #23
 800a560:	d530      	bpl.n	800a5c4 <_scanf_float+0x364>
 800a562:	055b      	lsls	r3, r3, #21
 800a564:	d511      	bpl.n	800a58a <_scanf_float+0x32a>
 800a566:	9b01      	ldr	r3, [sp, #4]
 800a568:	429e      	cmp	r6, r3
 800a56a:	f67f aebc 	bls.w	800a2e6 <_scanf_float+0x86>
 800a56e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a572:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a576:	463a      	mov	r2, r7
 800a578:	4640      	mov	r0, r8
 800a57a:	4798      	blx	r3
 800a57c:	6923      	ldr	r3, [r4, #16]
 800a57e:	3b01      	subs	r3, #1
 800a580:	6123      	str	r3, [r4, #16]
 800a582:	e7f0      	b.n	800a566 <_scanf_float+0x306>
 800a584:	46aa      	mov	sl, r5
 800a586:	46b3      	mov	fp, r6
 800a588:	e7de      	b.n	800a548 <_scanf_float+0x2e8>
 800a58a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a58e:	6923      	ldr	r3, [r4, #16]
 800a590:	2965      	cmp	r1, #101	@ 0x65
 800a592:	f103 33ff 	add.w	r3, r3, #4294967295
 800a596:	f106 35ff 	add.w	r5, r6, #4294967295
 800a59a:	6123      	str	r3, [r4, #16]
 800a59c:	d00c      	beq.n	800a5b8 <_scanf_float+0x358>
 800a59e:	2945      	cmp	r1, #69	@ 0x45
 800a5a0:	d00a      	beq.n	800a5b8 <_scanf_float+0x358>
 800a5a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a5a6:	463a      	mov	r2, r7
 800a5a8:	4640      	mov	r0, r8
 800a5aa:	4798      	blx	r3
 800a5ac:	6923      	ldr	r3, [r4, #16]
 800a5ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	1eb5      	subs	r5, r6, #2
 800a5b6:	6123      	str	r3, [r4, #16]
 800a5b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a5bc:	463a      	mov	r2, r7
 800a5be:	4640      	mov	r0, r8
 800a5c0:	4798      	blx	r3
 800a5c2:	462e      	mov	r6, r5
 800a5c4:	6822      	ldr	r2, [r4, #0]
 800a5c6:	f012 0210 	ands.w	r2, r2, #16
 800a5ca:	d001      	beq.n	800a5d0 <_scanf_float+0x370>
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	e68b      	b.n	800a2e8 <_scanf_float+0x88>
 800a5d0:	7032      	strb	r2, [r6, #0]
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a5d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5dc:	d11c      	bne.n	800a618 <_scanf_float+0x3b8>
 800a5de:	9b02      	ldr	r3, [sp, #8]
 800a5e0:	454b      	cmp	r3, r9
 800a5e2:	eba3 0209 	sub.w	r2, r3, r9
 800a5e6:	d123      	bne.n	800a630 <_scanf_float+0x3d0>
 800a5e8:	9901      	ldr	r1, [sp, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	4640      	mov	r0, r8
 800a5ee:	f002 fc6b 	bl	800cec8 <_strtod_r>
 800a5f2:	9b03      	ldr	r3, [sp, #12]
 800a5f4:	6821      	ldr	r1, [r4, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f011 0f02 	tst.w	r1, #2
 800a5fc:	ec57 6b10 	vmov	r6, r7, d0
 800a600:	f103 0204 	add.w	r2, r3, #4
 800a604:	d01f      	beq.n	800a646 <_scanf_float+0x3e6>
 800a606:	9903      	ldr	r1, [sp, #12]
 800a608:	600a      	str	r2, [r1, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	e9c3 6700 	strd	r6, r7, [r3]
 800a610:	68e3      	ldr	r3, [r4, #12]
 800a612:	3301      	adds	r3, #1
 800a614:	60e3      	str	r3, [r4, #12]
 800a616:	e7d9      	b.n	800a5cc <_scanf_float+0x36c>
 800a618:	9b04      	ldr	r3, [sp, #16]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d0e4      	beq.n	800a5e8 <_scanf_float+0x388>
 800a61e:	9905      	ldr	r1, [sp, #20]
 800a620:	230a      	movs	r3, #10
 800a622:	3101      	adds	r1, #1
 800a624:	4640      	mov	r0, r8
 800a626:	f002 fccf 	bl	800cfc8 <_strtol_r>
 800a62a:	9b04      	ldr	r3, [sp, #16]
 800a62c:	9e05      	ldr	r6, [sp, #20]
 800a62e:	1ac2      	subs	r2, r0, r3
 800a630:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a634:	429e      	cmp	r6, r3
 800a636:	bf28      	it	cs
 800a638:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a63c:	4910      	ldr	r1, [pc, #64]	@ (800a680 <_scanf_float+0x420>)
 800a63e:	4630      	mov	r0, r6
 800a640:	f000 f8e4 	bl	800a80c <siprintf>
 800a644:	e7d0      	b.n	800a5e8 <_scanf_float+0x388>
 800a646:	f011 0f04 	tst.w	r1, #4
 800a64a:	9903      	ldr	r1, [sp, #12]
 800a64c:	600a      	str	r2, [r1, #0]
 800a64e:	d1dc      	bne.n	800a60a <_scanf_float+0x3aa>
 800a650:	681d      	ldr	r5, [r3, #0]
 800a652:	4632      	mov	r2, r6
 800a654:	463b      	mov	r3, r7
 800a656:	4630      	mov	r0, r6
 800a658:	4639      	mov	r1, r7
 800a65a:	f7f6 fa67 	bl	8000b2c <__aeabi_dcmpun>
 800a65e:	b128      	cbz	r0, 800a66c <_scanf_float+0x40c>
 800a660:	4808      	ldr	r0, [pc, #32]	@ (800a684 <_scanf_float+0x424>)
 800a662:	f000 fa29 	bl	800aab8 <nanf>
 800a666:	ed85 0a00 	vstr	s0, [r5]
 800a66a:	e7d1      	b.n	800a610 <_scanf_float+0x3b0>
 800a66c:	4630      	mov	r0, r6
 800a66e:	4639      	mov	r1, r7
 800a670:	f7f6 faba 	bl	8000be8 <__aeabi_d2f>
 800a674:	6028      	str	r0, [r5, #0]
 800a676:	e7cb      	b.n	800a610 <_scanf_float+0x3b0>
 800a678:	f04f 0900 	mov.w	r9, #0
 800a67c:	e629      	b.n	800a2d2 <_scanf_float+0x72>
 800a67e:	bf00      	nop
 800a680:	0800e355 	.word	0x0800e355
 800a684:	0800e6ed 	.word	0x0800e6ed

0800a688 <std>:
 800a688:	2300      	movs	r3, #0
 800a68a:	b510      	push	{r4, lr}
 800a68c:	4604      	mov	r4, r0
 800a68e:	e9c0 3300 	strd	r3, r3, [r0]
 800a692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a696:	6083      	str	r3, [r0, #8]
 800a698:	8181      	strh	r1, [r0, #12]
 800a69a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a69c:	81c2      	strh	r2, [r0, #14]
 800a69e:	6183      	str	r3, [r0, #24]
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	2208      	movs	r2, #8
 800a6a4:	305c      	adds	r0, #92	@ 0x5c
 800a6a6:	f000 f914 	bl	800a8d2 <memset>
 800a6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e0 <std+0x58>)
 800a6ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800a6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e4 <std+0x5c>)
 800a6b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e8 <std+0x60>)
 800a6b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6ec <std+0x64>)
 800a6b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a6ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a6f0 <std+0x68>)
 800a6bc:	6224      	str	r4, [r4, #32]
 800a6be:	429c      	cmp	r4, r3
 800a6c0:	d006      	beq.n	800a6d0 <std+0x48>
 800a6c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a6c6:	4294      	cmp	r4, r2
 800a6c8:	d002      	beq.n	800a6d0 <std+0x48>
 800a6ca:	33d0      	adds	r3, #208	@ 0xd0
 800a6cc:	429c      	cmp	r4, r3
 800a6ce:	d105      	bne.n	800a6dc <std+0x54>
 800a6d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6d8:	f000 b9dc 	b.w	800aa94 <__retarget_lock_init_recursive>
 800a6dc:	bd10      	pop	{r4, pc}
 800a6de:	bf00      	nop
 800a6e0:	0800a84d 	.word	0x0800a84d
 800a6e4:	0800a86f 	.word	0x0800a86f
 800a6e8:	0800a8a7 	.word	0x0800a8a7
 800a6ec:	0800a8cb 	.word	0x0800a8cb
 800a6f0:	20004f60 	.word	0x20004f60

0800a6f4 <stdio_exit_handler>:
 800a6f4:	4a02      	ldr	r2, [pc, #8]	@ (800a700 <stdio_exit_handler+0xc>)
 800a6f6:	4903      	ldr	r1, [pc, #12]	@ (800a704 <stdio_exit_handler+0x10>)
 800a6f8:	4803      	ldr	r0, [pc, #12]	@ (800a708 <stdio_exit_handler+0x14>)
 800a6fa:	f000 b869 	b.w	800a7d0 <_fwalk_sglue>
 800a6fe:	bf00      	nop
 800a700:	2000002c 	.word	0x2000002c
 800a704:	0800d385 	.word	0x0800d385
 800a708:	2000003c 	.word	0x2000003c

0800a70c <cleanup_stdio>:
 800a70c:	6841      	ldr	r1, [r0, #4]
 800a70e:	4b0c      	ldr	r3, [pc, #48]	@ (800a740 <cleanup_stdio+0x34>)
 800a710:	4299      	cmp	r1, r3
 800a712:	b510      	push	{r4, lr}
 800a714:	4604      	mov	r4, r0
 800a716:	d001      	beq.n	800a71c <cleanup_stdio+0x10>
 800a718:	f002 fe34 	bl	800d384 <_fflush_r>
 800a71c:	68a1      	ldr	r1, [r4, #8]
 800a71e:	4b09      	ldr	r3, [pc, #36]	@ (800a744 <cleanup_stdio+0x38>)
 800a720:	4299      	cmp	r1, r3
 800a722:	d002      	beq.n	800a72a <cleanup_stdio+0x1e>
 800a724:	4620      	mov	r0, r4
 800a726:	f002 fe2d 	bl	800d384 <_fflush_r>
 800a72a:	68e1      	ldr	r1, [r4, #12]
 800a72c:	4b06      	ldr	r3, [pc, #24]	@ (800a748 <cleanup_stdio+0x3c>)
 800a72e:	4299      	cmp	r1, r3
 800a730:	d004      	beq.n	800a73c <cleanup_stdio+0x30>
 800a732:	4620      	mov	r0, r4
 800a734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a738:	f002 be24 	b.w	800d384 <_fflush_r>
 800a73c:	bd10      	pop	{r4, pc}
 800a73e:	bf00      	nop
 800a740:	20004f60 	.word	0x20004f60
 800a744:	20004fc8 	.word	0x20004fc8
 800a748:	20005030 	.word	0x20005030

0800a74c <global_stdio_init.part.0>:
 800a74c:	b510      	push	{r4, lr}
 800a74e:	4b0b      	ldr	r3, [pc, #44]	@ (800a77c <global_stdio_init.part.0+0x30>)
 800a750:	4c0b      	ldr	r4, [pc, #44]	@ (800a780 <global_stdio_init.part.0+0x34>)
 800a752:	4a0c      	ldr	r2, [pc, #48]	@ (800a784 <global_stdio_init.part.0+0x38>)
 800a754:	601a      	str	r2, [r3, #0]
 800a756:	4620      	mov	r0, r4
 800a758:	2200      	movs	r2, #0
 800a75a:	2104      	movs	r1, #4
 800a75c:	f7ff ff94 	bl	800a688 <std>
 800a760:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a764:	2201      	movs	r2, #1
 800a766:	2109      	movs	r1, #9
 800a768:	f7ff ff8e 	bl	800a688 <std>
 800a76c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a770:	2202      	movs	r2, #2
 800a772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a776:	2112      	movs	r1, #18
 800a778:	f7ff bf86 	b.w	800a688 <std>
 800a77c:	20005098 	.word	0x20005098
 800a780:	20004f60 	.word	0x20004f60
 800a784:	0800a6f5 	.word	0x0800a6f5

0800a788 <__sfp_lock_acquire>:
 800a788:	4801      	ldr	r0, [pc, #4]	@ (800a790 <__sfp_lock_acquire+0x8>)
 800a78a:	f000 b984 	b.w	800aa96 <__retarget_lock_acquire_recursive>
 800a78e:	bf00      	nop
 800a790:	200050a1 	.word	0x200050a1

0800a794 <__sfp_lock_release>:
 800a794:	4801      	ldr	r0, [pc, #4]	@ (800a79c <__sfp_lock_release+0x8>)
 800a796:	f000 b97f 	b.w	800aa98 <__retarget_lock_release_recursive>
 800a79a:	bf00      	nop
 800a79c:	200050a1 	.word	0x200050a1

0800a7a0 <__sinit>:
 800a7a0:	b510      	push	{r4, lr}
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	f7ff fff0 	bl	800a788 <__sfp_lock_acquire>
 800a7a8:	6a23      	ldr	r3, [r4, #32]
 800a7aa:	b11b      	cbz	r3, 800a7b4 <__sinit+0x14>
 800a7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7b0:	f7ff bff0 	b.w	800a794 <__sfp_lock_release>
 800a7b4:	4b04      	ldr	r3, [pc, #16]	@ (800a7c8 <__sinit+0x28>)
 800a7b6:	6223      	str	r3, [r4, #32]
 800a7b8:	4b04      	ldr	r3, [pc, #16]	@ (800a7cc <__sinit+0x2c>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1f5      	bne.n	800a7ac <__sinit+0xc>
 800a7c0:	f7ff ffc4 	bl	800a74c <global_stdio_init.part.0>
 800a7c4:	e7f2      	b.n	800a7ac <__sinit+0xc>
 800a7c6:	bf00      	nop
 800a7c8:	0800a70d 	.word	0x0800a70d
 800a7cc:	20005098 	.word	0x20005098

0800a7d0 <_fwalk_sglue>:
 800a7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7d4:	4607      	mov	r7, r0
 800a7d6:	4688      	mov	r8, r1
 800a7d8:	4614      	mov	r4, r2
 800a7da:	2600      	movs	r6, #0
 800a7dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7e0:	f1b9 0901 	subs.w	r9, r9, #1
 800a7e4:	d505      	bpl.n	800a7f2 <_fwalk_sglue+0x22>
 800a7e6:	6824      	ldr	r4, [r4, #0]
 800a7e8:	2c00      	cmp	r4, #0
 800a7ea:	d1f7      	bne.n	800a7dc <_fwalk_sglue+0xc>
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7f2:	89ab      	ldrh	r3, [r5, #12]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d907      	bls.n	800a808 <_fwalk_sglue+0x38>
 800a7f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	d003      	beq.n	800a808 <_fwalk_sglue+0x38>
 800a800:	4629      	mov	r1, r5
 800a802:	4638      	mov	r0, r7
 800a804:	47c0      	blx	r8
 800a806:	4306      	orrs	r6, r0
 800a808:	3568      	adds	r5, #104	@ 0x68
 800a80a:	e7e9      	b.n	800a7e0 <_fwalk_sglue+0x10>

0800a80c <siprintf>:
 800a80c:	b40e      	push	{r1, r2, r3}
 800a80e:	b500      	push	{lr}
 800a810:	b09c      	sub	sp, #112	@ 0x70
 800a812:	ab1d      	add	r3, sp, #116	@ 0x74
 800a814:	9002      	str	r0, [sp, #8]
 800a816:	9006      	str	r0, [sp, #24]
 800a818:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a81c:	4809      	ldr	r0, [pc, #36]	@ (800a844 <siprintf+0x38>)
 800a81e:	9107      	str	r1, [sp, #28]
 800a820:	9104      	str	r1, [sp, #16]
 800a822:	4909      	ldr	r1, [pc, #36]	@ (800a848 <siprintf+0x3c>)
 800a824:	f853 2b04 	ldr.w	r2, [r3], #4
 800a828:	9105      	str	r1, [sp, #20]
 800a82a:	6800      	ldr	r0, [r0, #0]
 800a82c:	9301      	str	r3, [sp, #4]
 800a82e:	a902      	add	r1, sp, #8
 800a830:	f002 fc28 	bl	800d084 <_svfiprintf_r>
 800a834:	9b02      	ldr	r3, [sp, #8]
 800a836:	2200      	movs	r2, #0
 800a838:	701a      	strb	r2, [r3, #0]
 800a83a:	b01c      	add	sp, #112	@ 0x70
 800a83c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a840:	b003      	add	sp, #12
 800a842:	4770      	bx	lr
 800a844:	20000038 	.word	0x20000038
 800a848:	ffff0208 	.word	0xffff0208

0800a84c <__sread>:
 800a84c:	b510      	push	{r4, lr}
 800a84e:	460c      	mov	r4, r1
 800a850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a854:	f000 f8d0 	bl	800a9f8 <_read_r>
 800a858:	2800      	cmp	r0, #0
 800a85a:	bfab      	itete	ge
 800a85c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a85e:	89a3      	ldrhlt	r3, [r4, #12]
 800a860:	181b      	addge	r3, r3, r0
 800a862:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a866:	bfac      	ite	ge
 800a868:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a86a:	81a3      	strhlt	r3, [r4, #12]
 800a86c:	bd10      	pop	{r4, pc}

0800a86e <__swrite>:
 800a86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a872:	461f      	mov	r7, r3
 800a874:	898b      	ldrh	r3, [r1, #12]
 800a876:	05db      	lsls	r3, r3, #23
 800a878:	4605      	mov	r5, r0
 800a87a:	460c      	mov	r4, r1
 800a87c:	4616      	mov	r6, r2
 800a87e:	d505      	bpl.n	800a88c <__swrite+0x1e>
 800a880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a884:	2302      	movs	r3, #2
 800a886:	2200      	movs	r2, #0
 800a888:	f000 f8a4 	bl	800a9d4 <_lseek_r>
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a892:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a896:	81a3      	strh	r3, [r4, #12]
 800a898:	4632      	mov	r2, r6
 800a89a:	463b      	mov	r3, r7
 800a89c:	4628      	mov	r0, r5
 800a89e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a2:	f000 b8bb 	b.w	800aa1c <_write_r>

0800a8a6 <__sseek>:
 800a8a6:	b510      	push	{r4, lr}
 800a8a8:	460c      	mov	r4, r1
 800a8aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ae:	f000 f891 	bl	800a9d4 <_lseek_r>
 800a8b2:	1c43      	adds	r3, r0, #1
 800a8b4:	89a3      	ldrh	r3, [r4, #12]
 800a8b6:	bf15      	itete	ne
 800a8b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a8ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a8be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a8c2:	81a3      	strheq	r3, [r4, #12]
 800a8c4:	bf18      	it	ne
 800a8c6:	81a3      	strhne	r3, [r4, #12]
 800a8c8:	bd10      	pop	{r4, pc}

0800a8ca <__sclose>:
 800a8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ce:	f000 b81b 	b.w	800a908 <_close_r>

0800a8d2 <memset>:
 800a8d2:	4402      	add	r2, r0
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d100      	bne.n	800a8dc <memset+0xa>
 800a8da:	4770      	bx	lr
 800a8dc:	f803 1b01 	strb.w	r1, [r3], #1
 800a8e0:	e7f9      	b.n	800a8d6 <memset+0x4>

0800a8e2 <strcat>:
 800a8e2:	b510      	push	{r4, lr}
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	7814      	ldrb	r4, [r2, #0]
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	3201      	adds	r2, #1
 800a8ec:	2c00      	cmp	r4, #0
 800a8ee:	d1fa      	bne.n	800a8e6 <strcat+0x4>
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8fa:	2a00      	cmp	r2, #0
 800a8fc:	d1f9      	bne.n	800a8f2 <strcat+0x10>
 800a8fe:	bd10      	pop	{r4, pc}

0800a900 <_localeconv_r>:
 800a900:	4800      	ldr	r0, [pc, #0]	@ (800a904 <_localeconv_r+0x4>)
 800a902:	4770      	bx	lr
 800a904:	20000178 	.word	0x20000178

0800a908 <_close_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4d06      	ldr	r5, [pc, #24]	@ (800a924 <_close_r+0x1c>)
 800a90c:	2300      	movs	r3, #0
 800a90e:	4604      	mov	r4, r0
 800a910:	4608      	mov	r0, r1
 800a912:	602b      	str	r3, [r5, #0]
 800a914:	f7f7 fba8 	bl	8002068 <_close>
 800a918:	1c43      	adds	r3, r0, #1
 800a91a:	d102      	bne.n	800a922 <_close_r+0x1a>
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	b103      	cbz	r3, 800a922 <_close_r+0x1a>
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	2000509c 	.word	0x2000509c

0800a928 <_reclaim_reent>:
 800a928:	4b29      	ldr	r3, [pc, #164]	@ (800a9d0 <_reclaim_reent+0xa8>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4283      	cmp	r3, r0
 800a92e:	b570      	push	{r4, r5, r6, lr}
 800a930:	4604      	mov	r4, r0
 800a932:	d04b      	beq.n	800a9cc <_reclaim_reent+0xa4>
 800a934:	69c3      	ldr	r3, [r0, #28]
 800a936:	b1ab      	cbz	r3, 800a964 <_reclaim_reent+0x3c>
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	b16b      	cbz	r3, 800a958 <_reclaim_reent+0x30>
 800a93c:	2500      	movs	r5, #0
 800a93e:	69e3      	ldr	r3, [r4, #28]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	5959      	ldr	r1, [r3, r5]
 800a944:	2900      	cmp	r1, #0
 800a946:	d13b      	bne.n	800a9c0 <_reclaim_reent+0x98>
 800a948:	3504      	adds	r5, #4
 800a94a:	2d80      	cmp	r5, #128	@ 0x80
 800a94c:	d1f7      	bne.n	800a93e <_reclaim_reent+0x16>
 800a94e:	69e3      	ldr	r3, [r4, #28]
 800a950:	4620      	mov	r0, r4
 800a952:	68d9      	ldr	r1, [r3, #12]
 800a954:	f000 ff04 	bl	800b760 <_free_r>
 800a958:	69e3      	ldr	r3, [r4, #28]
 800a95a:	6819      	ldr	r1, [r3, #0]
 800a95c:	b111      	cbz	r1, 800a964 <_reclaim_reent+0x3c>
 800a95e:	4620      	mov	r0, r4
 800a960:	f000 fefe 	bl	800b760 <_free_r>
 800a964:	6961      	ldr	r1, [r4, #20]
 800a966:	b111      	cbz	r1, 800a96e <_reclaim_reent+0x46>
 800a968:	4620      	mov	r0, r4
 800a96a:	f000 fef9 	bl	800b760 <_free_r>
 800a96e:	69e1      	ldr	r1, [r4, #28]
 800a970:	b111      	cbz	r1, 800a978 <_reclaim_reent+0x50>
 800a972:	4620      	mov	r0, r4
 800a974:	f000 fef4 	bl	800b760 <_free_r>
 800a978:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a97a:	b111      	cbz	r1, 800a982 <_reclaim_reent+0x5a>
 800a97c:	4620      	mov	r0, r4
 800a97e:	f000 feef 	bl	800b760 <_free_r>
 800a982:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a984:	b111      	cbz	r1, 800a98c <_reclaim_reent+0x64>
 800a986:	4620      	mov	r0, r4
 800a988:	f000 feea 	bl	800b760 <_free_r>
 800a98c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a98e:	b111      	cbz	r1, 800a996 <_reclaim_reent+0x6e>
 800a990:	4620      	mov	r0, r4
 800a992:	f000 fee5 	bl	800b760 <_free_r>
 800a996:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a998:	b111      	cbz	r1, 800a9a0 <_reclaim_reent+0x78>
 800a99a:	4620      	mov	r0, r4
 800a99c:	f000 fee0 	bl	800b760 <_free_r>
 800a9a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a9a2:	b111      	cbz	r1, 800a9aa <_reclaim_reent+0x82>
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f000 fedb 	bl	800b760 <_free_r>
 800a9aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a9ac:	b111      	cbz	r1, 800a9b4 <_reclaim_reent+0x8c>
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f000 fed6 	bl	800b760 <_free_r>
 800a9b4:	6a23      	ldr	r3, [r4, #32]
 800a9b6:	b14b      	cbz	r3, 800a9cc <_reclaim_reent+0xa4>
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9be:	4718      	bx	r3
 800a9c0:	680e      	ldr	r6, [r1, #0]
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f000 fecc 	bl	800b760 <_free_r>
 800a9c8:	4631      	mov	r1, r6
 800a9ca:	e7bb      	b.n	800a944 <_reclaim_reent+0x1c>
 800a9cc:	bd70      	pop	{r4, r5, r6, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20000038 	.word	0x20000038

0800a9d4 <_lseek_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	4d07      	ldr	r5, [pc, #28]	@ (800a9f4 <_lseek_r+0x20>)
 800a9d8:	4604      	mov	r4, r0
 800a9da:	4608      	mov	r0, r1
 800a9dc:	4611      	mov	r1, r2
 800a9de:	2200      	movs	r2, #0
 800a9e0:	602a      	str	r2, [r5, #0]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	f7f7 fb67 	bl	80020b6 <_lseek>
 800a9e8:	1c43      	adds	r3, r0, #1
 800a9ea:	d102      	bne.n	800a9f2 <_lseek_r+0x1e>
 800a9ec:	682b      	ldr	r3, [r5, #0]
 800a9ee:	b103      	cbz	r3, 800a9f2 <_lseek_r+0x1e>
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	bd38      	pop	{r3, r4, r5, pc}
 800a9f4:	2000509c 	.word	0x2000509c

0800a9f8 <_read_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	4d07      	ldr	r5, [pc, #28]	@ (800aa18 <_read_r+0x20>)
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	4608      	mov	r0, r1
 800aa00:	4611      	mov	r1, r2
 800aa02:	2200      	movs	r2, #0
 800aa04:	602a      	str	r2, [r5, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	f7f7 faf5 	bl	8001ff6 <_read>
 800aa0c:	1c43      	adds	r3, r0, #1
 800aa0e:	d102      	bne.n	800aa16 <_read_r+0x1e>
 800aa10:	682b      	ldr	r3, [r5, #0]
 800aa12:	b103      	cbz	r3, 800aa16 <_read_r+0x1e>
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	bd38      	pop	{r3, r4, r5, pc}
 800aa18:	2000509c 	.word	0x2000509c

0800aa1c <_write_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	4d07      	ldr	r5, [pc, #28]	@ (800aa3c <_write_r+0x20>)
 800aa20:	4604      	mov	r4, r0
 800aa22:	4608      	mov	r0, r1
 800aa24:	4611      	mov	r1, r2
 800aa26:	2200      	movs	r2, #0
 800aa28:	602a      	str	r2, [r5, #0]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	f7f7 fb00 	bl	8002030 <_write>
 800aa30:	1c43      	adds	r3, r0, #1
 800aa32:	d102      	bne.n	800aa3a <_write_r+0x1e>
 800aa34:	682b      	ldr	r3, [r5, #0]
 800aa36:	b103      	cbz	r3, 800aa3a <_write_r+0x1e>
 800aa38:	6023      	str	r3, [r4, #0]
 800aa3a:	bd38      	pop	{r3, r4, r5, pc}
 800aa3c:	2000509c 	.word	0x2000509c

0800aa40 <__errno>:
 800aa40:	4b01      	ldr	r3, [pc, #4]	@ (800aa48 <__errno+0x8>)
 800aa42:	6818      	ldr	r0, [r3, #0]
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	20000038 	.word	0x20000038

0800aa4c <__libc_init_array>:
 800aa4c:	b570      	push	{r4, r5, r6, lr}
 800aa4e:	4d0d      	ldr	r5, [pc, #52]	@ (800aa84 <__libc_init_array+0x38>)
 800aa50:	4c0d      	ldr	r4, [pc, #52]	@ (800aa88 <__libc_init_array+0x3c>)
 800aa52:	1b64      	subs	r4, r4, r5
 800aa54:	10a4      	asrs	r4, r4, #2
 800aa56:	2600      	movs	r6, #0
 800aa58:	42a6      	cmp	r6, r4
 800aa5a:	d109      	bne.n	800aa70 <__libc_init_array+0x24>
 800aa5c:	4d0b      	ldr	r5, [pc, #44]	@ (800aa8c <__libc_init_array+0x40>)
 800aa5e:	4c0c      	ldr	r4, [pc, #48]	@ (800aa90 <__libc_init_array+0x44>)
 800aa60:	f003 fb74 	bl	800e14c <_init>
 800aa64:	1b64      	subs	r4, r4, r5
 800aa66:	10a4      	asrs	r4, r4, #2
 800aa68:	2600      	movs	r6, #0
 800aa6a:	42a6      	cmp	r6, r4
 800aa6c:	d105      	bne.n	800aa7a <__libc_init_array+0x2e>
 800aa6e:	bd70      	pop	{r4, r5, r6, pc}
 800aa70:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa74:	4798      	blx	r3
 800aa76:	3601      	adds	r6, #1
 800aa78:	e7ee      	b.n	800aa58 <__libc_init_array+0xc>
 800aa7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa7e:	4798      	blx	r3
 800aa80:	3601      	adds	r6, #1
 800aa82:	e7f2      	b.n	800aa6a <__libc_init_array+0x1e>
 800aa84:	0800e758 	.word	0x0800e758
 800aa88:	0800e758 	.word	0x0800e758
 800aa8c:	0800e758 	.word	0x0800e758
 800aa90:	0800e75c 	.word	0x0800e75c

0800aa94 <__retarget_lock_init_recursive>:
 800aa94:	4770      	bx	lr

0800aa96 <__retarget_lock_acquire_recursive>:
 800aa96:	4770      	bx	lr

0800aa98 <__retarget_lock_release_recursive>:
 800aa98:	4770      	bx	lr

0800aa9a <memcpy>:
 800aa9a:	440a      	add	r2, r1
 800aa9c:	4291      	cmp	r1, r2
 800aa9e:	f100 33ff 	add.w	r3, r0, #4294967295
 800aaa2:	d100      	bne.n	800aaa6 <memcpy+0xc>
 800aaa4:	4770      	bx	lr
 800aaa6:	b510      	push	{r4, lr}
 800aaa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aab0:	4291      	cmp	r1, r2
 800aab2:	d1f9      	bne.n	800aaa8 <memcpy+0xe>
 800aab4:	bd10      	pop	{r4, pc}
	...

0800aab8 <nanf>:
 800aab8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aac0 <nanf+0x8>
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	7fc00000 	.word	0x7fc00000

0800aac4 <quorem>:
 800aac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac8:	6903      	ldr	r3, [r0, #16]
 800aaca:	690c      	ldr	r4, [r1, #16]
 800aacc:	42a3      	cmp	r3, r4
 800aace:	4607      	mov	r7, r0
 800aad0:	db7e      	blt.n	800abd0 <quorem+0x10c>
 800aad2:	3c01      	subs	r4, #1
 800aad4:	f101 0814 	add.w	r8, r1, #20
 800aad8:	00a3      	lsls	r3, r4, #2
 800aada:	f100 0514 	add.w	r5, r0, #20
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aae4:	9301      	str	r3, [sp, #4]
 800aae6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aaea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aaee:	3301      	adds	r3, #1
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aaf6:	fbb2 f6f3 	udiv	r6, r2, r3
 800aafa:	d32e      	bcc.n	800ab5a <quorem+0x96>
 800aafc:	f04f 0a00 	mov.w	sl, #0
 800ab00:	46c4      	mov	ip, r8
 800ab02:	46ae      	mov	lr, r5
 800ab04:	46d3      	mov	fp, sl
 800ab06:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ab0a:	b298      	uxth	r0, r3
 800ab0c:	fb06 a000 	mla	r0, r6, r0, sl
 800ab10:	0c02      	lsrs	r2, r0, #16
 800ab12:	0c1b      	lsrs	r3, r3, #16
 800ab14:	fb06 2303 	mla	r3, r6, r3, r2
 800ab18:	f8de 2000 	ldr.w	r2, [lr]
 800ab1c:	b280      	uxth	r0, r0
 800ab1e:	b292      	uxth	r2, r2
 800ab20:	1a12      	subs	r2, r2, r0
 800ab22:	445a      	add	r2, fp
 800ab24:	f8de 0000 	ldr.w	r0, [lr]
 800ab28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ab32:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ab36:	b292      	uxth	r2, r2
 800ab38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ab3c:	45e1      	cmp	r9, ip
 800ab3e:	f84e 2b04 	str.w	r2, [lr], #4
 800ab42:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ab46:	d2de      	bcs.n	800ab06 <quorem+0x42>
 800ab48:	9b00      	ldr	r3, [sp, #0]
 800ab4a:	58eb      	ldr	r3, [r5, r3]
 800ab4c:	b92b      	cbnz	r3, 800ab5a <quorem+0x96>
 800ab4e:	9b01      	ldr	r3, [sp, #4]
 800ab50:	3b04      	subs	r3, #4
 800ab52:	429d      	cmp	r5, r3
 800ab54:	461a      	mov	r2, r3
 800ab56:	d32f      	bcc.n	800abb8 <quorem+0xf4>
 800ab58:	613c      	str	r4, [r7, #16]
 800ab5a:	4638      	mov	r0, r7
 800ab5c:	f001 f9c4 	bl	800bee8 <__mcmp>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	db25      	blt.n	800abb0 <quorem+0xec>
 800ab64:	4629      	mov	r1, r5
 800ab66:	2000      	movs	r0, #0
 800ab68:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab6c:	f8d1 c000 	ldr.w	ip, [r1]
 800ab70:	fa1f fe82 	uxth.w	lr, r2
 800ab74:	fa1f f38c 	uxth.w	r3, ip
 800ab78:	eba3 030e 	sub.w	r3, r3, lr
 800ab7c:	4403      	add	r3, r0
 800ab7e:	0c12      	lsrs	r2, r2, #16
 800ab80:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ab84:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab8e:	45c1      	cmp	r9, r8
 800ab90:	f841 3b04 	str.w	r3, [r1], #4
 800ab94:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ab98:	d2e6      	bcs.n	800ab68 <quorem+0xa4>
 800ab9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aba2:	b922      	cbnz	r2, 800abae <quorem+0xea>
 800aba4:	3b04      	subs	r3, #4
 800aba6:	429d      	cmp	r5, r3
 800aba8:	461a      	mov	r2, r3
 800abaa:	d30b      	bcc.n	800abc4 <quorem+0x100>
 800abac:	613c      	str	r4, [r7, #16]
 800abae:	3601      	adds	r6, #1
 800abb0:	4630      	mov	r0, r6
 800abb2:	b003      	add	sp, #12
 800abb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb8:	6812      	ldr	r2, [r2, #0]
 800abba:	3b04      	subs	r3, #4
 800abbc:	2a00      	cmp	r2, #0
 800abbe:	d1cb      	bne.n	800ab58 <quorem+0x94>
 800abc0:	3c01      	subs	r4, #1
 800abc2:	e7c6      	b.n	800ab52 <quorem+0x8e>
 800abc4:	6812      	ldr	r2, [r2, #0]
 800abc6:	3b04      	subs	r3, #4
 800abc8:	2a00      	cmp	r2, #0
 800abca:	d1ef      	bne.n	800abac <quorem+0xe8>
 800abcc:	3c01      	subs	r4, #1
 800abce:	e7ea      	b.n	800aba6 <quorem+0xe2>
 800abd0:	2000      	movs	r0, #0
 800abd2:	e7ee      	b.n	800abb2 <quorem+0xee>
 800abd4:	0000      	movs	r0, r0
	...

0800abd8 <_dtoa_r>:
 800abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	69c7      	ldr	r7, [r0, #28]
 800abde:	b099      	sub	sp, #100	@ 0x64
 800abe0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800abe4:	ec55 4b10 	vmov	r4, r5, d0
 800abe8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800abea:	9109      	str	r1, [sp, #36]	@ 0x24
 800abec:	4683      	mov	fp, r0
 800abee:	920e      	str	r2, [sp, #56]	@ 0x38
 800abf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800abf2:	b97f      	cbnz	r7, 800ac14 <_dtoa_r+0x3c>
 800abf4:	2010      	movs	r0, #16
 800abf6:	f000 fdfd 	bl	800b7f4 <malloc>
 800abfa:	4602      	mov	r2, r0
 800abfc:	f8cb 001c 	str.w	r0, [fp, #28]
 800ac00:	b920      	cbnz	r0, 800ac0c <_dtoa_r+0x34>
 800ac02:	4ba7      	ldr	r3, [pc, #668]	@ (800aea0 <_dtoa_r+0x2c8>)
 800ac04:	21ef      	movs	r1, #239	@ 0xef
 800ac06:	48a7      	ldr	r0, [pc, #668]	@ (800aea4 <_dtoa_r+0x2cc>)
 800ac08:	f002 fc2a 	bl	800d460 <__assert_func>
 800ac0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ac10:	6007      	str	r7, [r0, #0]
 800ac12:	60c7      	str	r7, [r0, #12]
 800ac14:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ac18:	6819      	ldr	r1, [r3, #0]
 800ac1a:	b159      	cbz	r1, 800ac34 <_dtoa_r+0x5c>
 800ac1c:	685a      	ldr	r2, [r3, #4]
 800ac1e:	604a      	str	r2, [r1, #4]
 800ac20:	2301      	movs	r3, #1
 800ac22:	4093      	lsls	r3, r2
 800ac24:	608b      	str	r3, [r1, #8]
 800ac26:	4658      	mov	r0, fp
 800ac28:	f000 feda 	bl	800b9e0 <_Bfree>
 800ac2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ac30:	2200      	movs	r2, #0
 800ac32:	601a      	str	r2, [r3, #0]
 800ac34:	1e2b      	subs	r3, r5, #0
 800ac36:	bfb9      	ittee	lt
 800ac38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ac3c:	9303      	strlt	r3, [sp, #12]
 800ac3e:	2300      	movge	r3, #0
 800ac40:	6033      	strge	r3, [r6, #0]
 800ac42:	9f03      	ldr	r7, [sp, #12]
 800ac44:	4b98      	ldr	r3, [pc, #608]	@ (800aea8 <_dtoa_r+0x2d0>)
 800ac46:	bfbc      	itt	lt
 800ac48:	2201      	movlt	r2, #1
 800ac4a:	6032      	strlt	r2, [r6, #0]
 800ac4c:	43bb      	bics	r3, r7
 800ac4e:	d112      	bne.n	800ac76 <_dtoa_r+0x9e>
 800ac50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ac52:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ac56:	6013      	str	r3, [r2, #0]
 800ac58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac5c:	4323      	orrs	r3, r4
 800ac5e:	f000 854d 	beq.w	800b6fc <_dtoa_r+0xb24>
 800ac62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800aebc <_dtoa_r+0x2e4>
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f000 854f 	beq.w	800b70c <_dtoa_r+0xb34>
 800ac6e:	f10a 0303 	add.w	r3, sl, #3
 800ac72:	f000 bd49 	b.w	800b708 <_dtoa_r+0xb30>
 800ac76:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	ec51 0b17 	vmov	r0, r1, d7
 800ac80:	2300      	movs	r3, #0
 800ac82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ac86:	f7f5 ff1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac8a:	4680      	mov	r8, r0
 800ac8c:	b158      	cbz	r0, 800aca6 <_dtoa_r+0xce>
 800ac8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ac90:	2301      	movs	r3, #1
 800ac92:	6013      	str	r3, [r2, #0]
 800ac94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac96:	b113      	cbz	r3, 800ac9e <_dtoa_r+0xc6>
 800ac98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ac9a:	4b84      	ldr	r3, [pc, #528]	@ (800aeac <_dtoa_r+0x2d4>)
 800ac9c:	6013      	str	r3, [r2, #0]
 800ac9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800aec0 <_dtoa_r+0x2e8>
 800aca2:	f000 bd33 	b.w	800b70c <_dtoa_r+0xb34>
 800aca6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800acaa:	aa16      	add	r2, sp, #88	@ 0x58
 800acac:	a917      	add	r1, sp, #92	@ 0x5c
 800acae:	4658      	mov	r0, fp
 800acb0:	f001 fa3a 	bl	800c128 <__d2b>
 800acb4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800acb8:	4681      	mov	r9, r0
 800acba:	2e00      	cmp	r6, #0
 800acbc:	d077      	beq.n	800adae <_dtoa_r+0x1d6>
 800acbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800acc0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800acc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800accc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800acd0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800acd4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800acd8:	4619      	mov	r1, r3
 800acda:	2200      	movs	r2, #0
 800acdc:	4b74      	ldr	r3, [pc, #464]	@ (800aeb0 <_dtoa_r+0x2d8>)
 800acde:	f7f5 fad3 	bl	8000288 <__aeabi_dsub>
 800ace2:	a369      	add	r3, pc, #420	@ (adr r3, 800ae88 <_dtoa_r+0x2b0>)
 800ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace8:	f7f5 fc86 	bl	80005f8 <__aeabi_dmul>
 800acec:	a368      	add	r3, pc, #416	@ (adr r3, 800ae90 <_dtoa_r+0x2b8>)
 800acee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf2:	f7f5 facb 	bl	800028c <__adddf3>
 800acf6:	4604      	mov	r4, r0
 800acf8:	4630      	mov	r0, r6
 800acfa:	460d      	mov	r5, r1
 800acfc:	f7f5 fc12 	bl	8000524 <__aeabi_i2d>
 800ad00:	a365      	add	r3, pc, #404	@ (adr r3, 800ae98 <_dtoa_r+0x2c0>)
 800ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad06:	f7f5 fc77 	bl	80005f8 <__aeabi_dmul>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	4620      	mov	r0, r4
 800ad10:	4629      	mov	r1, r5
 800ad12:	f7f5 fabb 	bl	800028c <__adddf3>
 800ad16:	4604      	mov	r4, r0
 800ad18:	460d      	mov	r5, r1
 800ad1a:	f7f5 ff1d 	bl	8000b58 <__aeabi_d2iz>
 800ad1e:	2200      	movs	r2, #0
 800ad20:	4607      	mov	r7, r0
 800ad22:	2300      	movs	r3, #0
 800ad24:	4620      	mov	r0, r4
 800ad26:	4629      	mov	r1, r5
 800ad28:	f7f5 fed8 	bl	8000adc <__aeabi_dcmplt>
 800ad2c:	b140      	cbz	r0, 800ad40 <_dtoa_r+0x168>
 800ad2e:	4638      	mov	r0, r7
 800ad30:	f7f5 fbf8 	bl	8000524 <__aeabi_i2d>
 800ad34:	4622      	mov	r2, r4
 800ad36:	462b      	mov	r3, r5
 800ad38:	f7f5 fec6 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad3c:	b900      	cbnz	r0, 800ad40 <_dtoa_r+0x168>
 800ad3e:	3f01      	subs	r7, #1
 800ad40:	2f16      	cmp	r7, #22
 800ad42:	d851      	bhi.n	800ade8 <_dtoa_r+0x210>
 800ad44:	4b5b      	ldr	r3, [pc, #364]	@ (800aeb4 <_dtoa_r+0x2dc>)
 800ad46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad52:	f7f5 fec3 	bl	8000adc <__aeabi_dcmplt>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d048      	beq.n	800adec <_dtoa_r+0x214>
 800ad5a:	3f01      	subs	r7, #1
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	9312      	str	r3, [sp, #72]	@ 0x48
 800ad60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ad62:	1b9b      	subs	r3, r3, r6
 800ad64:	1e5a      	subs	r2, r3, #1
 800ad66:	bf44      	itt	mi
 800ad68:	f1c3 0801 	rsbmi	r8, r3, #1
 800ad6c:	2300      	movmi	r3, #0
 800ad6e:	9208      	str	r2, [sp, #32]
 800ad70:	bf54      	ite	pl
 800ad72:	f04f 0800 	movpl.w	r8, #0
 800ad76:	9308      	strmi	r3, [sp, #32]
 800ad78:	2f00      	cmp	r7, #0
 800ad7a:	db39      	blt.n	800adf0 <_dtoa_r+0x218>
 800ad7c:	9b08      	ldr	r3, [sp, #32]
 800ad7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ad80:	443b      	add	r3, r7
 800ad82:	9308      	str	r3, [sp, #32]
 800ad84:	2300      	movs	r3, #0
 800ad86:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad8a:	2b09      	cmp	r3, #9
 800ad8c:	d864      	bhi.n	800ae58 <_dtoa_r+0x280>
 800ad8e:	2b05      	cmp	r3, #5
 800ad90:	bfc4      	itt	gt
 800ad92:	3b04      	subgt	r3, #4
 800ad94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ad96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad98:	f1a3 0302 	sub.w	r3, r3, #2
 800ad9c:	bfcc      	ite	gt
 800ad9e:	2400      	movgt	r4, #0
 800ada0:	2401      	movle	r4, #1
 800ada2:	2b03      	cmp	r3, #3
 800ada4:	d863      	bhi.n	800ae6e <_dtoa_r+0x296>
 800ada6:	e8df f003 	tbb	[pc, r3]
 800adaa:	372a      	.short	0x372a
 800adac:	5535      	.short	0x5535
 800adae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800adb2:	441e      	add	r6, r3
 800adb4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800adb8:	2b20      	cmp	r3, #32
 800adba:	bfc1      	itttt	gt
 800adbc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800adc0:	409f      	lslgt	r7, r3
 800adc2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800adc6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800adca:	bfd6      	itet	le
 800adcc:	f1c3 0320 	rsble	r3, r3, #32
 800add0:	ea47 0003 	orrgt.w	r0, r7, r3
 800add4:	fa04 f003 	lslle.w	r0, r4, r3
 800add8:	f7f5 fb94 	bl	8000504 <__aeabi_ui2d>
 800addc:	2201      	movs	r2, #1
 800adde:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ade2:	3e01      	subs	r6, #1
 800ade4:	9214      	str	r2, [sp, #80]	@ 0x50
 800ade6:	e777      	b.n	800acd8 <_dtoa_r+0x100>
 800ade8:	2301      	movs	r3, #1
 800adea:	e7b8      	b.n	800ad5e <_dtoa_r+0x186>
 800adec:	9012      	str	r0, [sp, #72]	@ 0x48
 800adee:	e7b7      	b.n	800ad60 <_dtoa_r+0x188>
 800adf0:	427b      	negs	r3, r7
 800adf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800adf4:	2300      	movs	r3, #0
 800adf6:	eba8 0807 	sub.w	r8, r8, r7
 800adfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adfc:	e7c4      	b.n	800ad88 <_dtoa_r+0x1b0>
 800adfe:	2300      	movs	r3, #0
 800ae00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	dc35      	bgt.n	800ae74 <_dtoa_r+0x29c>
 800ae08:	2301      	movs	r3, #1
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	9307      	str	r3, [sp, #28]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae12:	e00b      	b.n	800ae2c <_dtoa_r+0x254>
 800ae14:	2301      	movs	r3, #1
 800ae16:	e7f3      	b.n	800ae00 <_dtoa_r+0x228>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae1e:	18fb      	adds	r3, r7, r3
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	3301      	adds	r3, #1
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	9307      	str	r3, [sp, #28]
 800ae28:	bfb8      	it	lt
 800ae2a:	2301      	movlt	r3, #1
 800ae2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ae30:	2100      	movs	r1, #0
 800ae32:	2204      	movs	r2, #4
 800ae34:	f102 0514 	add.w	r5, r2, #20
 800ae38:	429d      	cmp	r5, r3
 800ae3a:	d91f      	bls.n	800ae7c <_dtoa_r+0x2a4>
 800ae3c:	6041      	str	r1, [r0, #4]
 800ae3e:	4658      	mov	r0, fp
 800ae40:	f000 fd8e 	bl	800b960 <_Balloc>
 800ae44:	4682      	mov	sl, r0
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d13c      	bne.n	800aec4 <_dtoa_r+0x2ec>
 800ae4a:	4b1b      	ldr	r3, [pc, #108]	@ (800aeb8 <_dtoa_r+0x2e0>)
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ae52:	e6d8      	b.n	800ac06 <_dtoa_r+0x2e>
 800ae54:	2301      	movs	r3, #1
 800ae56:	e7e0      	b.n	800ae1a <_dtoa_r+0x242>
 800ae58:	2401      	movs	r4, #1
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ae60:	f04f 33ff 	mov.w	r3, #4294967295
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	9307      	str	r3, [sp, #28]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	2312      	movs	r3, #18
 800ae6c:	e7d0      	b.n	800ae10 <_dtoa_r+0x238>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae72:	e7f5      	b.n	800ae60 <_dtoa_r+0x288>
 800ae74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	9307      	str	r3, [sp, #28]
 800ae7a:	e7d7      	b.n	800ae2c <_dtoa_r+0x254>
 800ae7c:	3101      	adds	r1, #1
 800ae7e:	0052      	lsls	r2, r2, #1
 800ae80:	e7d8      	b.n	800ae34 <_dtoa_r+0x25c>
 800ae82:	bf00      	nop
 800ae84:	f3af 8000 	nop.w
 800ae88:	636f4361 	.word	0x636f4361
 800ae8c:	3fd287a7 	.word	0x3fd287a7
 800ae90:	8b60c8b3 	.word	0x8b60c8b3
 800ae94:	3fc68a28 	.word	0x3fc68a28
 800ae98:	509f79fb 	.word	0x509f79fb
 800ae9c:	3fd34413 	.word	0x3fd34413
 800aea0:	0800e367 	.word	0x0800e367
 800aea4:	0800e37e 	.word	0x0800e37e
 800aea8:	7ff00000 	.word	0x7ff00000
 800aeac:	0800e332 	.word	0x0800e332
 800aeb0:	3ff80000 	.word	0x3ff80000
 800aeb4:	0800e478 	.word	0x0800e478
 800aeb8:	0800e3d6 	.word	0x0800e3d6
 800aebc:	0800e363 	.word	0x0800e363
 800aec0:	0800e331 	.word	0x0800e331
 800aec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aec8:	6018      	str	r0, [r3, #0]
 800aeca:	9b07      	ldr	r3, [sp, #28]
 800aecc:	2b0e      	cmp	r3, #14
 800aece:	f200 80a4 	bhi.w	800b01a <_dtoa_r+0x442>
 800aed2:	2c00      	cmp	r4, #0
 800aed4:	f000 80a1 	beq.w	800b01a <_dtoa_r+0x442>
 800aed8:	2f00      	cmp	r7, #0
 800aeda:	dd33      	ble.n	800af44 <_dtoa_r+0x36c>
 800aedc:	4bad      	ldr	r3, [pc, #692]	@ (800b194 <_dtoa_r+0x5bc>)
 800aede:	f007 020f 	and.w	r2, r7, #15
 800aee2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aee6:	ed93 7b00 	vldr	d7, [r3]
 800aeea:	05f8      	lsls	r0, r7, #23
 800aeec:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aef0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aef4:	d516      	bpl.n	800af24 <_dtoa_r+0x34c>
 800aef6:	4ba8      	ldr	r3, [pc, #672]	@ (800b198 <_dtoa_r+0x5c0>)
 800aef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aefc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af00:	f7f5 fca4 	bl	800084c <__aeabi_ddiv>
 800af04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af08:	f004 040f 	and.w	r4, r4, #15
 800af0c:	2603      	movs	r6, #3
 800af0e:	4da2      	ldr	r5, [pc, #648]	@ (800b198 <_dtoa_r+0x5c0>)
 800af10:	b954      	cbnz	r4, 800af28 <_dtoa_r+0x350>
 800af12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af1a:	f7f5 fc97 	bl	800084c <__aeabi_ddiv>
 800af1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af22:	e028      	b.n	800af76 <_dtoa_r+0x39e>
 800af24:	2602      	movs	r6, #2
 800af26:	e7f2      	b.n	800af0e <_dtoa_r+0x336>
 800af28:	07e1      	lsls	r1, r4, #31
 800af2a:	d508      	bpl.n	800af3e <_dtoa_r+0x366>
 800af2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af30:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af34:	f7f5 fb60 	bl	80005f8 <__aeabi_dmul>
 800af38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af3c:	3601      	adds	r6, #1
 800af3e:	1064      	asrs	r4, r4, #1
 800af40:	3508      	adds	r5, #8
 800af42:	e7e5      	b.n	800af10 <_dtoa_r+0x338>
 800af44:	f000 80d2 	beq.w	800b0ec <_dtoa_r+0x514>
 800af48:	427c      	negs	r4, r7
 800af4a:	4b92      	ldr	r3, [pc, #584]	@ (800b194 <_dtoa_r+0x5bc>)
 800af4c:	4d92      	ldr	r5, [pc, #584]	@ (800b198 <_dtoa_r+0x5c0>)
 800af4e:	f004 020f 	and.w	r2, r4, #15
 800af52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af5e:	f7f5 fb4b 	bl	80005f8 <__aeabi_dmul>
 800af62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af66:	1124      	asrs	r4, r4, #4
 800af68:	2300      	movs	r3, #0
 800af6a:	2602      	movs	r6, #2
 800af6c:	2c00      	cmp	r4, #0
 800af6e:	f040 80b2 	bne.w	800b0d6 <_dtoa_r+0x4fe>
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1d3      	bne.n	800af1e <_dtoa_r+0x346>
 800af76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af78:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f000 80b7 	beq.w	800b0f0 <_dtoa_r+0x518>
 800af82:	4b86      	ldr	r3, [pc, #536]	@ (800b19c <_dtoa_r+0x5c4>)
 800af84:	2200      	movs	r2, #0
 800af86:	4620      	mov	r0, r4
 800af88:	4629      	mov	r1, r5
 800af8a:	f7f5 fda7 	bl	8000adc <__aeabi_dcmplt>
 800af8e:	2800      	cmp	r0, #0
 800af90:	f000 80ae 	beq.w	800b0f0 <_dtoa_r+0x518>
 800af94:	9b07      	ldr	r3, [sp, #28]
 800af96:	2b00      	cmp	r3, #0
 800af98:	f000 80aa 	beq.w	800b0f0 <_dtoa_r+0x518>
 800af9c:	9b00      	ldr	r3, [sp, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	dd37      	ble.n	800b012 <_dtoa_r+0x43a>
 800afa2:	1e7b      	subs	r3, r7, #1
 800afa4:	9304      	str	r3, [sp, #16]
 800afa6:	4620      	mov	r0, r4
 800afa8:	4b7d      	ldr	r3, [pc, #500]	@ (800b1a0 <_dtoa_r+0x5c8>)
 800afaa:	2200      	movs	r2, #0
 800afac:	4629      	mov	r1, r5
 800afae:	f7f5 fb23 	bl	80005f8 <__aeabi_dmul>
 800afb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afb6:	9c00      	ldr	r4, [sp, #0]
 800afb8:	3601      	adds	r6, #1
 800afba:	4630      	mov	r0, r6
 800afbc:	f7f5 fab2 	bl	8000524 <__aeabi_i2d>
 800afc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afc4:	f7f5 fb18 	bl	80005f8 <__aeabi_dmul>
 800afc8:	4b76      	ldr	r3, [pc, #472]	@ (800b1a4 <_dtoa_r+0x5cc>)
 800afca:	2200      	movs	r2, #0
 800afcc:	f7f5 f95e 	bl	800028c <__adddf3>
 800afd0:	4605      	mov	r5, r0
 800afd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800afd6:	2c00      	cmp	r4, #0
 800afd8:	f040 808d 	bne.w	800b0f6 <_dtoa_r+0x51e>
 800afdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afe0:	4b71      	ldr	r3, [pc, #452]	@ (800b1a8 <_dtoa_r+0x5d0>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	f7f5 f950 	bl	8000288 <__aeabi_dsub>
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aff0:	462a      	mov	r2, r5
 800aff2:	4633      	mov	r3, r6
 800aff4:	f7f5 fd90 	bl	8000b18 <__aeabi_dcmpgt>
 800aff8:	2800      	cmp	r0, #0
 800affa:	f040 828b 	bne.w	800b514 <_dtoa_r+0x93c>
 800affe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b002:	462a      	mov	r2, r5
 800b004:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b008:	f7f5 fd68 	bl	8000adc <__aeabi_dcmplt>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	f040 8128 	bne.w	800b262 <_dtoa_r+0x68a>
 800b012:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b016:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b01a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f2c0 815a 	blt.w	800b2d6 <_dtoa_r+0x6fe>
 800b022:	2f0e      	cmp	r7, #14
 800b024:	f300 8157 	bgt.w	800b2d6 <_dtoa_r+0x6fe>
 800b028:	4b5a      	ldr	r3, [pc, #360]	@ (800b194 <_dtoa_r+0x5bc>)
 800b02a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b02e:	ed93 7b00 	vldr	d7, [r3]
 800b032:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b034:	2b00      	cmp	r3, #0
 800b036:	ed8d 7b00 	vstr	d7, [sp]
 800b03a:	da03      	bge.n	800b044 <_dtoa_r+0x46c>
 800b03c:	9b07      	ldr	r3, [sp, #28]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f340 8101 	ble.w	800b246 <_dtoa_r+0x66e>
 800b044:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b048:	4656      	mov	r6, sl
 800b04a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b04e:	4620      	mov	r0, r4
 800b050:	4629      	mov	r1, r5
 800b052:	f7f5 fbfb 	bl	800084c <__aeabi_ddiv>
 800b056:	f7f5 fd7f 	bl	8000b58 <__aeabi_d2iz>
 800b05a:	4680      	mov	r8, r0
 800b05c:	f7f5 fa62 	bl	8000524 <__aeabi_i2d>
 800b060:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b064:	f7f5 fac8 	bl	80005f8 <__aeabi_dmul>
 800b068:	4602      	mov	r2, r0
 800b06a:	460b      	mov	r3, r1
 800b06c:	4620      	mov	r0, r4
 800b06e:	4629      	mov	r1, r5
 800b070:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b074:	f7f5 f908 	bl	8000288 <__aeabi_dsub>
 800b078:	f806 4b01 	strb.w	r4, [r6], #1
 800b07c:	9d07      	ldr	r5, [sp, #28]
 800b07e:	eba6 040a 	sub.w	r4, r6, sl
 800b082:	42a5      	cmp	r5, r4
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	f040 8117 	bne.w	800b2ba <_dtoa_r+0x6e2>
 800b08c:	f7f5 f8fe 	bl	800028c <__adddf3>
 800b090:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b094:	4604      	mov	r4, r0
 800b096:	460d      	mov	r5, r1
 800b098:	f7f5 fd3e 	bl	8000b18 <__aeabi_dcmpgt>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	f040 80f9 	bne.w	800b294 <_dtoa_r+0x6bc>
 800b0a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	f7f5 fd0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0ae:	b118      	cbz	r0, 800b0b8 <_dtoa_r+0x4e0>
 800b0b0:	f018 0f01 	tst.w	r8, #1
 800b0b4:	f040 80ee 	bne.w	800b294 <_dtoa_r+0x6bc>
 800b0b8:	4649      	mov	r1, r9
 800b0ba:	4658      	mov	r0, fp
 800b0bc:	f000 fc90 	bl	800b9e0 <_Bfree>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	7033      	strb	r3, [r6, #0]
 800b0c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b0c6:	3701      	adds	r7, #1
 800b0c8:	601f      	str	r7, [r3, #0]
 800b0ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 831d 	beq.w	800b70c <_dtoa_r+0xb34>
 800b0d2:	601e      	str	r6, [r3, #0]
 800b0d4:	e31a      	b.n	800b70c <_dtoa_r+0xb34>
 800b0d6:	07e2      	lsls	r2, r4, #31
 800b0d8:	d505      	bpl.n	800b0e6 <_dtoa_r+0x50e>
 800b0da:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b0de:	f7f5 fa8b 	bl	80005f8 <__aeabi_dmul>
 800b0e2:	3601      	adds	r6, #1
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	1064      	asrs	r4, r4, #1
 800b0e8:	3508      	adds	r5, #8
 800b0ea:	e73f      	b.n	800af6c <_dtoa_r+0x394>
 800b0ec:	2602      	movs	r6, #2
 800b0ee:	e742      	b.n	800af76 <_dtoa_r+0x39e>
 800b0f0:	9c07      	ldr	r4, [sp, #28]
 800b0f2:	9704      	str	r7, [sp, #16]
 800b0f4:	e761      	b.n	800afba <_dtoa_r+0x3e2>
 800b0f6:	4b27      	ldr	r3, [pc, #156]	@ (800b194 <_dtoa_r+0x5bc>)
 800b0f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b0fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b0fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b102:	4454      	add	r4, sl
 800b104:	2900      	cmp	r1, #0
 800b106:	d053      	beq.n	800b1b0 <_dtoa_r+0x5d8>
 800b108:	4928      	ldr	r1, [pc, #160]	@ (800b1ac <_dtoa_r+0x5d4>)
 800b10a:	2000      	movs	r0, #0
 800b10c:	f7f5 fb9e 	bl	800084c <__aeabi_ddiv>
 800b110:	4633      	mov	r3, r6
 800b112:	462a      	mov	r2, r5
 800b114:	f7f5 f8b8 	bl	8000288 <__aeabi_dsub>
 800b118:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b11c:	4656      	mov	r6, sl
 800b11e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b122:	f7f5 fd19 	bl	8000b58 <__aeabi_d2iz>
 800b126:	4605      	mov	r5, r0
 800b128:	f7f5 f9fc 	bl	8000524 <__aeabi_i2d>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b134:	f7f5 f8a8 	bl	8000288 <__aeabi_dsub>
 800b138:	3530      	adds	r5, #48	@ 0x30
 800b13a:	4602      	mov	r2, r0
 800b13c:	460b      	mov	r3, r1
 800b13e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b142:	f806 5b01 	strb.w	r5, [r6], #1
 800b146:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b14a:	f7f5 fcc7 	bl	8000adc <__aeabi_dcmplt>
 800b14e:	2800      	cmp	r0, #0
 800b150:	d171      	bne.n	800b236 <_dtoa_r+0x65e>
 800b152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b156:	4911      	ldr	r1, [pc, #68]	@ (800b19c <_dtoa_r+0x5c4>)
 800b158:	2000      	movs	r0, #0
 800b15a:	f7f5 f895 	bl	8000288 <__aeabi_dsub>
 800b15e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b162:	f7f5 fcbb 	bl	8000adc <__aeabi_dcmplt>
 800b166:	2800      	cmp	r0, #0
 800b168:	f040 8095 	bne.w	800b296 <_dtoa_r+0x6be>
 800b16c:	42a6      	cmp	r6, r4
 800b16e:	f43f af50 	beq.w	800b012 <_dtoa_r+0x43a>
 800b172:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b176:	4b0a      	ldr	r3, [pc, #40]	@ (800b1a0 <_dtoa_r+0x5c8>)
 800b178:	2200      	movs	r2, #0
 800b17a:	f7f5 fa3d 	bl	80005f8 <__aeabi_dmul>
 800b17e:	4b08      	ldr	r3, [pc, #32]	@ (800b1a0 <_dtoa_r+0x5c8>)
 800b180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b184:	2200      	movs	r2, #0
 800b186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b18a:	f7f5 fa35 	bl	80005f8 <__aeabi_dmul>
 800b18e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b192:	e7c4      	b.n	800b11e <_dtoa_r+0x546>
 800b194:	0800e478 	.word	0x0800e478
 800b198:	0800e450 	.word	0x0800e450
 800b19c:	3ff00000 	.word	0x3ff00000
 800b1a0:	40240000 	.word	0x40240000
 800b1a4:	401c0000 	.word	0x401c0000
 800b1a8:	40140000 	.word	0x40140000
 800b1ac:	3fe00000 	.word	0x3fe00000
 800b1b0:	4631      	mov	r1, r6
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	f7f5 fa20 	bl	80005f8 <__aeabi_dmul>
 800b1b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b1bc:	9415      	str	r4, [sp, #84]	@ 0x54
 800b1be:	4656      	mov	r6, sl
 800b1c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1c4:	f7f5 fcc8 	bl	8000b58 <__aeabi_d2iz>
 800b1c8:	4605      	mov	r5, r0
 800b1ca:	f7f5 f9ab 	bl	8000524 <__aeabi_i2d>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1d6:	f7f5 f857 	bl	8000288 <__aeabi_dsub>
 800b1da:	3530      	adds	r5, #48	@ 0x30
 800b1dc:	f806 5b01 	strb.w	r5, [r6], #1
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	42a6      	cmp	r6, r4
 800b1e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1ea:	f04f 0200 	mov.w	r2, #0
 800b1ee:	d124      	bne.n	800b23a <_dtoa_r+0x662>
 800b1f0:	4bac      	ldr	r3, [pc, #688]	@ (800b4a4 <_dtoa_r+0x8cc>)
 800b1f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b1f6:	f7f5 f849 	bl	800028c <__adddf3>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b202:	f7f5 fc89 	bl	8000b18 <__aeabi_dcmpgt>
 800b206:	2800      	cmp	r0, #0
 800b208:	d145      	bne.n	800b296 <_dtoa_r+0x6be>
 800b20a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b20e:	49a5      	ldr	r1, [pc, #660]	@ (800b4a4 <_dtoa_r+0x8cc>)
 800b210:	2000      	movs	r0, #0
 800b212:	f7f5 f839 	bl	8000288 <__aeabi_dsub>
 800b216:	4602      	mov	r2, r0
 800b218:	460b      	mov	r3, r1
 800b21a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b21e:	f7f5 fc5d 	bl	8000adc <__aeabi_dcmplt>
 800b222:	2800      	cmp	r0, #0
 800b224:	f43f aef5 	beq.w	800b012 <_dtoa_r+0x43a>
 800b228:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b22a:	1e73      	subs	r3, r6, #1
 800b22c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b22e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b232:	2b30      	cmp	r3, #48	@ 0x30
 800b234:	d0f8      	beq.n	800b228 <_dtoa_r+0x650>
 800b236:	9f04      	ldr	r7, [sp, #16]
 800b238:	e73e      	b.n	800b0b8 <_dtoa_r+0x4e0>
 800b23a:	4b9b      	ldr	r3, [pc, #620]	@ (800b4a8 <_dtoa_r+0x8d0>)
 800b23c:	f7f5 f9dc 	bl	80005f8 <__aeabi_dmul>
 800b240:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b244:	e7bc      	b.n	800b1c0 <_dtoa_r+0x5e8>
 800b246:	d10c      	bne.n	800b262 <_dtoa_r+0x68a>
 800b248:	4b98      	ldr	r3, [pc, #608]	@ (800b4ac <_dtoa_r+0x8d4>)
 800b24a:	2200      	movs	r2, #0
 800b24c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b250:	f7f5 f9d2 	bl	80005f8 <__aeabi_dmul>
 800b254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b258:	f7f5 fc54 	bl	8000b04 <__aeabi_dcmpge>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	f000 8157 	beq.w	800b510 <_dtoa_r+0x938>
 800b262:	2400      	movs	r4, #0
 800b264:	4625      	mov	r5, r4
 800b266:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b268:	43db      	mvns	r3, r3
 800b26a:	9304      	str	r3, [sp, #16]
 800b26c:	4656      	mov	r6, sl
 800b26e:	2700      	movs	r7, #0
 800b270:	4621      	mov	r1, r4
 800b272:	4658      	mov	r0, fp
 800b274:	f000 fbb4 	bl	800b9e0 <_Bfree>
 800b278:	2d00      	cmp	r5, #0
 800b27a:	d0dc      	beq.n	800b236 <_dtoa_r+0x65e>
 800b27c:	b12f      	cbz	r7, 800b28a <_dtoa_r+0x6b2>
 800b27e:	42af      	cmp	r7, r5
 800b280:	d003      	beq.n	800b28a <_dtoa_r+0x6b2>
 800b282:	4639      	mov	r1, r7
 800b284:	4658      	mov	r0, fp
 800b286:	f000 fbab 	bl	800b9e0 <_Bfree>
 800b28a:	4629      	mov	r1, r5
 800b28c:	4658      	mov	r0, fp
 800b28e:	f000 fba7 	bl	800b9e0 <_Bfree>
 800b292:	e7d0      	b.n	800b236 <_dtoa_r+0x65e>
 800b294:	9704      	str	r7, [sp, #16]
 800b296:	4633      	mov	r3, r6
 800b298:	461e      	mov	r6, r3
 800b29a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b29e:	2a39      	cmp	r2, #57	@ 0x39
 800b2a0:	d107      	bne.n	800b2b2 <_dtoa_r+0x6da>
 800b2a2:	459a      	cmp	sl, r3
 800b2a4:	d1f8      	bne.n	800b298 <_dtoa_r+0x6c0>
 800b2a6:	9a04      	ldr	r2, [sp, #16]
 800b2a8:	3201      	adds	r2, #1
 800b2aa:	9204      	str	r2, [sp, #16]
 800b2ac:	2230      	movs	r2, #48	@ 0x30
 800b2ae:	f88a 2000 	strb.w	r2, [sl]
 800b2b2:	781a      	ldrb	r2, [r3, #0]
 800b2b4:	3201      	adds	r2, #1
 800b2b6:	701a      	strb	r2, [r3, #0]
 800b2b8:	e7bd      	b.n	800b236 <_dtoa_r+0x65e>
 800b2ba:	4b7b      	ldr	r3, [pc, #492]	@ (800b4a8 <_dtoa_r+0x8d0>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f7f5 f99b 	bl	80005f8 <__aeabi_dmul>
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	460d      	mov	r5, r1
 800b2ca:	f7f5 fbfd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	f43f aebb 	beq.w	800b04a <_dtoa_r+0x472>
 800b2d4:	e6f0      	b.n	800b0b8 <_dtoa_r+0x4e0>
 800b2d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b2d8:	2a00      	cmp	r2, #0
 800b2da:	f000 80db 	beq.w	800b494 <_dtoa_r+0x8bc>
 800b2de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2e0:	2a01      	cmp	r2, #1
 800b2e2:	f300 80bf 	bgt.w	800b464 <_dtoa_r+0x88c>
 800b2e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b2e8:	2a00      	cmp	r2, #0
 800b2ea:	f000 80b7 	beq.w	800b45c <_dtoa_r+0x884>
 800b2ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b2f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b2f4:	4646      	mov	r6, r8
 800b2f6:	9a08      	ldr	r2, [sp, #32]
 800b2f8:	2101      	movs	r1, #1
 800b2fa:	441a      	add	r2, r3
 800b2fc:	4658      	mov	r0, fp
 800b2fe:	4498      	add	r8, r3
 800b300:	9208      	str	r2, [sp, #32]
 800b302:	f000 fc6b 	bl	800bbdc <__i2b>
 800b306:	4605      	mov	r5, r0
 800b308:	b15e      	cbz	r6, 800b322 <_dtoa_r+0x74a>
 800b30a:	9b08      	ldr	r3, [sp, #32]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	dd08      	ble.n	800b322 <_dtoa_r+0x74a>
 800b310:	42b3      	cmp	r3, r6
 800b312:	9a08      	ldr	r2, [sp, #32]
 800b314:	bfa8      	it	ge
 800b316:	4633      	movge	r3, r6
 800b318:	eba8 0803 	sub.w	r8, r8, r3
 800b31c:	1af6      	subs	r6, r6, r3
 800b31e:	1ad3      	subs	r3, r2, r3
 800b320:	9308      	str	r3, [sp, #32]
 800b322:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b324:	b1f3      	cbz	r3, 800b364 <_dtoa_r+0x78c>
 800b326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f000 80b7 	beq.w	800b49c <_dtoa_r+0x8c4>
 800b32e:	b18c      	cbz	r4, 800b354 <_dtoa_r+0x77c>
 800b330:	4629      	mov	r1, r5
 800b332:	4622      	mov	r2, r4
 800b334:	4658      	mov	r0, fp
 800b336:	f000 fd11 	bl	800bd5c <__pow5mult>
 800b33a:	464a      	mov	r2, r9
 800b33c:	4601      	mov	r1, r0
 800b33e:	4605      	mov	r5, r0
 800b340:	4658      	mov	r0, fp
 800b342:	f000 fc61 	bl	800bc08 <__multiply>
 800b346:	4649      	mov	r1, r9
 800b348:	9004      	str	r0, [sp, #16]
 800b34a:	4658      	mov	r0, fp
 800b34c:	f000 fb48 	bl	800b9e0 <_Bfree>
 800b350:	9b04      	ldr	r3, [sp, #16]
 800b352:	4699      	mov	r9, r3
 800b354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b356:	1b1a      	subs	r2, r3, r4
 800b358:	d004      	beq.n	800b364 <_dtoa_r+0x78c>
 800b35a:	4649      	mov	r1, r9
 800b35c:	4658      	mov	r0, fp
 800b35e:	f000 fcfd 	bl	800bd5c <__pow5mult>
 800b362:	4681      	mov	r9, r0
 800b364:	2101      	movs	r1, #1
 800b366:	4658      	mov	r0, fp
 800b368:	f000 fc38 	bl	800bbdc <__i2b>
 800b36c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b36e:	4604      	mov	r4, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	f000 81cf 	beq.w	800b714 <_dtoa_r+0xb3c>
 800b376:	461a      	mov	r2, r3
 800b378:	4601      	mov	r1, r0
 800b37a:	4658      	mov	r0, fp
 800b37c:	f000 fcee 	bl	800bd5c <__pow5mult>
 800b380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b382:	2b01      	cmp	r3, #1
 800b384:	4604      	mov	r4, r0
 800b386:	f300 8095 	bgt.w	800b4b4 <_dtoa_r+0x8dc>
 800b38a:	9b02      	ldr	r3, [sp, #8]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f040 8087 	bne.w	800b4a0 <_dtoa_r+0x8c8>
 800b392:	9b03      	ldr	r3, [sp, #12]
 800b394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f040 8089 	bne.w	800b4b0 <_dtoa_r+0x8d8>
 800b39e:	9b03      	ldr	r3, [sp, #12]
 800b3a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b3a4:	0d1b      	lsrs	r3, r3, #20
 800b3a6:	051b      	lsls	r3, r3, #20
 800b3a8:	b12b      	cbz	r3, 800b3b6 <_dtoa_r+0x7de>
 800b3aa:	9b08      	ldr	r3, [sp, #32]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	9308      	str	r3, [sp, #32]
 800b3b0:	f108 0801 	add.w	r8, r8, #1
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 81b0 	beq.w	800b720 <_dtoa_r+0xb48>
 800b3c0:	6923      	ldr	r3, [r4, #16]
 800b3c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b3c6:	6918      	ldr	r0, [r3, #16]
 800b3c8:	f000 fbbc 	bl	800bb44 <__hi0bits>
 800b3cc:	f1c0 0020 	rsb	r0, r0, #32
 800b3d0:	9b08      	ldr	r3, [sp, #32]
 800b3d2:	4418      	add	r0, r3
 800b3d4:	f010 001f 	ands.w	r0, r0, #31
 800b3d8:	d077      	beq.n	800b4ca <_dtoa_r+0x8f2>
 800b3da:	f1c0 0320 	rsb	r3, r0, #32
 800b3de:	2b04      	cmp	r3, #4
 800b3e0:	dd6b      	ble.n	800b4ba <_dtoa_r+0x8e2>
 800b3e2:	9b08      	ldr	r3, [sp, #32]
 800b3e4:	f1c0 001c 	rsb	r0, r0, #28
 800b3e8:	4403      	add	r3, r0
 800b3ea:	4480      	add	r8, r0
 800b3ec:	4406      	add	r6, r0
 800b3ee:	9308      	str	r3, [sp, #32]
 800b3f0:	f1b8 0f00 	cmp.w	r8, #0
 800b3f4:	dd05      	ble.n	800b402 <_dtoa_r+0x82a>
 800b3f6:	4649      	mov	r1, r9
 800b3f8:	4642      	mov	r2, r8
 800b3fa:	4658      	mov	r0, fp
 800b3fc:	f000 fd08 	bl	800be10 <__lshift>
 800b400:	4681      	mov	r9, r0
 800b402:	9b08      	ldr	r3, [sp, #32]
 800b404:	2b00      	cmp	r3, #0
 800b406:	dd05      	ble.n	800b414 <_dtoa_r+0x83c>
 800b408:	4621      	mov	r1, r4
 800b40a:	461a      	mov	r2, r3
 800b40c:	4658      	mov	r0, fp
 800b40e:	f000 fcff 	bl	800be10 <__lshift>
 800b412:	4604      	mov	r4, r0
 800b414:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b416:	2b00      	cmp	r3, #0
 800b418:	d059      	beq.n	800b4ce <_dtoa_r+0x8f6>
 800b41a:	4621      	mov	r1, r4
 800b41c:	4648      	mov	r0, r9
 800b41e:	f000 fd63 	bl	800bee8 <__mcmp>
 800b422:	2800      	cmp	r0, #0
 800b424:	da53      	bge.n	800b4ce <_dtoa_r+0x8f6>
 800b426:	1e7b      	subs	r3, r7, #1
 800b428:	9304      	str	r3, [sp, #16]
 800b42a:	4649      	mov	r1, r9
 800b42c:	2300      	movs	r3, #0
 800b42e:	220a      	movs	r2, #10
 800b430:	4658      	mov	r0, fp
 800b432:	f000 faf7 	bl	800ba24 <__multadd>
 800b436:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b438:	4681      	mov	r9, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f000 8172 	beq.w	800b724 <_dtoa_r+0xb4c>
 800b440:	2300      	movs	r3, #0
 800b442:	4629      	mov	r1, r5
 800b444:	220a      	movs	r2, #10
 800b446:	4658      	mov	r0, fp
 800b448:	f000 faec 	bl	800ba24 <__multadd>
 800b44c:	9b00      	ldr	r3, [sp, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	4605      	mov	r5, r0
 800b452:	dc67      	bgt.n	800b524 <_dtoa_r+0x94c>
 800b454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b456:	2b02      	cmp	r3, #2
 800b458:	dc41      	bgt.n	800b4de <_dtoa_r+0x906>
 800b45a:	e063      	b.n	800b524 <_dtoa_r+0x94c>
 800b45c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b45e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b462:	e746      	b.n	800b2f2 <_dtoa_r+0x71a>
 800b464:	9b07      	ldr	r3, [sp, #28]
 800b466:	1e5c      	subs	r4, r3, #1
 800b468:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b46a:	42a3      	cmp	r3, r4
 800b46c:	bfbf      	itttt	lt
 800b46e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b470:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b472:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b474:	1ae3      	sublt	r3, r4, r3
 800b476:	bfb4      	ite	lt
 800b478:	18d2      	addlt	r2, r2, r3
 800b47a:	1b1c      	subge	r4, r3, r4
 800b47c:	9b07      	ldr	r3, [sp, #28]
 800b47e:	bfbc      	itt	lt
 800b480:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b482:	2400      	movlt	r4, #0
 800b484:	2b00      	cmp	r3, #0
 800b486:	bfb5      	itete	lt
 800b488:	eba8 0603 	sublt.w	r6, r8, r3
 800b48c:	9b07      	ldrge	r3, [sp, #28]
 800b48e:	2300      	movlt	r3, #0
 800b490:	4646      	movge	r6, r8
 800b492:	e730      	b.n	800b2f6 <_dtoa_r+0x71e>
 800b494:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b496:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b498:	4646      	mov	r6, r8
 800b49a:	e735      	b.n	800b308 <_dtoa_r+0x730>
 800b49c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b49e:	e75c      	b.n	800b35a <_dtoa_r+0x782>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	e788      	b.n	800b3b6 <_dtoa_r+0x7de>
 800b4a4:	3fe00000 	.word	0x3fe00000
 800b4a8:	40240000 	.word	0x40240000
 800b4ac:	40140000 	.word	0x40140000
 800b4b0:	9b02      	ldr	r3, [sp, #8]
 800b4b2:	e780      	b.n	800b3b6 <_dtoa_r+0x7de>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4b8:	e782      	b.n	800b3c0 <_dtoa_r+0x7e8>
 800b4ba:	d099      	beq.n	800b3f0 <_dtoa_r+0x818>
 800b4bc:	9a08      	ldr	r2, [sp, #32]
 800b4be:	331c      	adds	r3, #28
 800b4c0:	441a      	add	r2, r3
 800b4c2:	4498      	add	r8, r3
 800b4c4:	441e      	add	r6, r3
 800b4c6:	9208      	str	r2, [sp, #32]
 800b4c8:	e792      	b.n	800b3f0 <_dtoa_r+0x818>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	e7f6      	b.n	800b4bc <_dtoa_r+0x8e4>
 800b4ce:	9b07      	ldr	r3, [sp, #28]
 800b4d0:	9704      	str	r7, [sp, #16]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	dc20      	bgt.n	800b518 <_dtoa_r+0x940>
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	dd1e      	ble.n	800b51c <_dtoa_r+0x944>
 800b4de:	9b00      	ldr	r3, [sp, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	f47f aec0 	bne.w	800b266 <_dtoa_r+0x68e>
 800b4e6:	4621      	mov	r1, r4
 800b4e8:	2205      	movs	r2, #5
 800b4ea:	4658      	mov	r0, fp
 800b4ec:	f000 fa9a 	bl	800ba24 <__multadd>
 800b4f0:	4601      	mov	r1, r0
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	4648      	mov	r0, r9
 800b4f6:	f000 fcf7 	bl	800bee8 <__mcmp>
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	f77f aeb3 	ble.w	800b266 <_dtoa_r+0x68e>
 800b500:	4656      	mov	r6, sl
 800b502:	2331      	movs	r3, #49	@ 0x31
 800b504:	f806 3b01 	strb.w	r3, [r6], #1
 800b508:	9b04      	ldr	r3, [sp, #16]
 800b50a:	3301      	adds	r3, #1
 800b50c:	9304      	str	r3, [sp, #16]
 800b50e:	e6ae      	b.n	800b26e <_dtoa_r+0x696>
 800b510:	9c07      	ldr	r4, [sp, #28]
 800b512:	9704      	str	r7, [sp, #16]
 800b514:	4625      	mov	r5, r4
 800b516:	e7f3      	b.n	800b500 <_dtoa_r+0x928>
 800b518:	9b07      	ldr	r3, [sp, #28]
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f000 8104 	beq.w	800b72c <_dtoa_r+0xb54>
 800b524:	2e00      	cmp	r6, #0
 800b526:	dd05      	ble.n	800b534 <_dtoa_r+0x95c>
 800b528:	4629      	mov	r1, r5
 800b52a:	4632      	mov	r2, r6
 800b52c:	4658      	mov	r0, fp
 800b52e:	f000 fc6f 	bl	800be10 <__lshift>
 800b532:	4605      	mov	r5, r0
 800b534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b536:	2b00      	cmp	r3, #0
 800b538:	d05a      	beq.n	800b5f0 <_dtoa_r+0xa18>
 800b53a:	6869      	ldr	r1, [r5, #4]
 800b53c:	4658      	mov	r0, fp
 800b53e:	f000 fa0f 	bl	800b960 <_Balloc>
 800b542:	4606      	mov	r6, r0
 800b544:	b928      	cbnz	r0, 800b552 <_dtoa_r+0x97a>
 800b546:	4b84      	ldr	r3, [pc, #528]	@ (800b758 <_dtoa_r+0xb80>)
 800b548:	4602      	mov	r2, r0
 800b54a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b54e:	f7ff bb5a 	b.w	800ac06 <_dtoa_r+0x2e>
 800b552:	692a      	ldr	r2, [r5, #16]
 800b554:	3202      	adds	r2, #2
 800b556:	0092      	lsls	r2, r2, #2
 800b558:	f105 010c 	add.w	r1, r5, #12
 800b55c:	300c      	adds	r0, #12
 800b55e:	f7ff fa9c 	bl	800aa9a <memcpy>
 800b562:	2201      	movs	r2, #1
 800b564:	4631      	mov	r1, r6
 800b566:	4658      	mov	r0, fp
 800b568:	f000 fc52 	bl	800be10 <__lshift>
 800b56c:	f10a 0301 	add.w	r3, sl, #1
 800b570:	9307      	str	r3, [sp, #28]
 800b572:	9b00      	ldr	r3, [sp, #0]
 800b574:	4453      	add	r3, sl
 800b576:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b578:	9b02      	ldr	r3, [sp, #8]
 800b57a:	f003 0301 	and.w	r3, r3, #1
 800b57e:	462f      	mov	r7, r5
 800b580:	930a      	str	r3, [sp, #40]	@ 0x28
 800b582:	4605      	mov	r5, r0
 800b584:	9b07      	ldr	r3, [sp, #28]
 800b586:	4621      	mov	r1, r4
 800b588:	3b01      	subs	r3, #1
 800b58a:	4648      	mov	r0, r9
 800b58c:	9300      	str	r3, [sp, #0]
 800b58e:	f7ff fa99 	bl	800aac4 <quorem>
 800b592:	4639      	mov	r1, r7
 800b594:	9002      	str	r0, [sp, #8]
 800b596:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b59a:	4648      	mov	r0, r9
 800b59c:	f000 fca4 	bl	800bee8 <__mcmp>
 800b5a0:	462a      	mov	r2, r5
 800b5a2:	9008      	str	r0, [sp, #32]
 800b5a4:	4621      	mov	r1, r4
 800b5a6:	4658      	mov	r0, fp
 800b5a8:	f000 fcba 	bl	800bf20 <__mdiff>
 800b5ac:	68c2      	ldr	r2, [r0, #12]
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	bb02      	cbnz	r2, 800b5f4 <_dtoa_r+0xa1c>
 800b5b2:	4601      	mov	r1, r0
 800b5b4:	4648      	mov	r0, r9
 800b5b6:	f000 fc97 	bl	800bee8 <__mcmp>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	4631      	mov	r1, r6
 800b5be:	4658      	mov	r0, fp
 800b5c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b5c2:	f000 fa0d 	bl	800b9e0 <_Bfree>
 800b5c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5ca:	9e07      	ldr	r6, [sp, #28]
 800b5cc:	ea43 0102 	orr.w	r1, r3, r2
 800b5d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5d2:	4319      	orrs	r1, r3
 800b5d4:	d110      	bne.n	800b5f8 <_dtoa_r+0xa20>
 800b5d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b5da:	d029      	beq.n	800b630 <_dtoa_r+0xa58>
 800b5dc:	9b08      	ldr	r3, [sp, #32]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	dd02      	ble.n	800b5e8 <_dtoa_r+0xa10>
 800b5e2:	9b02      	ldr	r3, [sp, #8]
 800b5e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b5e8:	9b00      	ldr	r3, [sp, #0]
 800b5ea:	f883 8000 	strb.w	r8, [r3]
 800b5ee:	e63f      	b.n	800b270 <_dtoa_r+0x698>
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	e7bb      	b.n	800b56c <_dtoa_r+0x994>
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	e7e1      	b.n	800b5bc <_dtoa_r+0x9e4>
 800b5f8:	9b08      	ldr	r3, [sp, #32]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	db04      	blt.n	800b608 <_dtoa_r+0xa30>
 800b5fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b600:	430b      	orrs	r3, r1
 800b602:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b604:	430b      	orrs	r3, r1
 800b606:	d120      	bne.n	800b64a <_dtoa_r+0xa72>
 800b608:	2a00      	cmp	r2, #0
 800b60a:	dded      	ble.n	800b5e8 <_dtoa_r+0xa10>
 800b60c:	4649      	mov	r1, r9
 800b60e:	2201      	movs	r2, #1
 800b610:	4658      	mov	r0, fp
 800b612:	f000 fbfd 	bl	800be10 <__lshift>
 800b616:	4621      	mov	r1, r4
 800b618:	4681      	mov	r9, r0
 800b61a:	f000 fc65 	bl	800bee8 <__mcmp>
 800b61e:	2800      	cmp	r0, #0
 800b620:	dc03      	bgt.n	800b62a <_dtoa_r+0xa52>
 800b622:	d1e1      	bne.n	800b5e8 <_dtoa_r+0xa10>
 800b624:	f018 0f01 	tst.w	r8, #1
 800b628:	d0de      	beq.n	800b5e8 <_dtoa_r+0xa10>
 800b62a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b62e:	d1d8      	bne.n	800b5e2 <_dtoa_r+0xa0a>
 800b630:	9a00      	ldr	r2, [sp, #0]
 800b632:	2339      	movs	r3, #57	@ 0x39
 800b634:	7013      	strb	r3, [r2, #0]
 800b636:	4633      	mov	r3, r6
 800b638:	461e      	mov	r6, r3
 800b63a:	3b01      	subs	r3, #1
 800b63c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b640:	2a39      	cmp	r2, #57	@ 0x39
 800b642:	d052      	beq.n	800b6ea <_dtoa_r+0xb12>
 800b644:	3201      	adds	r2, #1
 800b646:	701a      	strb	r2, [r3, #0]
 800b648:	e612      	b.n	800b270 <_dtoa_r+0x698>
 800b64a:	2a00      	cmp	r2, #0
 800b64c:	dd07      	ble.n	800b65e <_dtoa_r+0xa86>
 800b64e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b652:	d0ed      	beq.n	800b630 <_dtoa_r+0xa58>
 800b654:	9a00      	ldr	r2, [sp, #0]
 800b656:	f108 0301 	add.w	r3, r8, #1
 800b65a:	7013      	strb	r3, [r2, #0]
 800b65c:	e608      	b.n	800b270 <_dtoa_r+0x698>
 800b65e:	9b07      	ldr	r3, [sp, #28]
 800b660:	9a07      	ldr	r2, [sp, #28]
 800b662:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b668:	4293      	cmp	r3, r2
 800b66a:	d028      	beq.n	800b6be <_dtoa_r+0xae6>
 800b66c:	4649      	mov	r1, r9
 800b66e:	2300      	movs	r3, #0
 800b670:	220a      	movs	r2, #10
 800b672:	4658      	mov	r0, fp
 800b674:	f000 f9d6 	bl	800ba24 <__multadd>
 800b678:	42af      	cmp	r7, r5
 800b67a:	4681      	mov	r9, r0
 800b67c:	f04f 0300 	mov.w	r3, #0
 800b680:	f04f 020a 	mov.w	r2, #10
 800b684:	4639      	mov	r1, r7
 800b686:	4658      	mov	r0, fp
 800b688:	d107      	bne.n	800b69a <_dtoa_r+0xac2>
 800b68a:	f000 f9cb 	bl	800ba24 <__multadd>
 800b68e:	4607      	mov	r7, r0
 800b690:	4605      	mov	r5, r0
 800b692:	9b07      	ldr	r3, [sp, #28]
 800b694:	3301      	adds	r3, #1
 800b696:	9307      	str	r3, [sp, #28]
 800b698:	e774      	b.n	800b584 <_dtoa_r+0x9ac>
 800b69a:	f000 f9c3 	bl	800ba24 <__multadd>
 800b69e:	4629      	mov	r1, r5
 800b6a0:	4607      	mov	r7, r0
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	220a      	movs	r2, #10
 800b6a6:	4658      	mov	r0, fp
 800b6a8:	f000 f9bc 	bl	800ba24 <__multadd>
 800b6ac:	4605      	mov	r5, r0
 800b6ae:	e7f0      	b.n	800b692 <_dtoa_r+0xaba>
 800b6b0:	9b00      	ldr	r3, [sp, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	bfcc      	ite	gt
 800b6b6:	461e      	movgt	r6, r3
 800b6b8:	2601      	movle	r6, #1
 800b6ba:	4456      	add	r6, sl
 800b6bc:	2700      	movs	r7, #0
 800b6be:	4649      	mov	r1, r9
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	4658      	mov	r0, fp
 800b6c4:	f000 fba4 	bl	800be10 <__lshift>
 800b6c8:	4621      	mov	r1, r4
 800b6ca:	4681      	mov	r9, r0
 800b6cc:	f000 fc0c 	bl	800bee8 <__mcmp>
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	dcb0      	bgt.n	800b636 <_dtoa_r+0xa5e>
 800b6d4:	d102      	bne.n	800b6dc <_dtoa_r+0xb04>
 800b6d6:	f018 0f01 	tst.w	r8, #1
 800b6da:	d1ac      	bne.n	800b636 <_dtoa_r+0xa5e>
 800b6dc:	4633      	mov	r3, r6
 800b6de:	461e      	mov	r6, r3
 800b6e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6e4:	2a30      	cmp	r2, #48	@ 0x30
 800b6e6:	d0fa      	beq.n	800b6de <_dtoa_r+0xb06>
 800b6e8:	e5c2      	b.n	800b270 <_dtoa_r+0x698>
 800b6ea:	459a      	cmp	sl, r3
 800b6ec:	d1a4      	bne.n	800b638 <_dtoa_r+0xa60>
 800b6ee:	9b04      	ldr	r3, [sp, #16]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	9304      	str	r3, [sp, #16]
 800b6f4:	2331      	movs	r3, #49	@ 0x31
 800b6f6:	f88a 3000 	strb.w	r3, [sl]
 800b6fa:	e5b9      	b.n	800b270 <_dtoa_r+0x698>
 800b6fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b75c <_dtoa_r+0xb84>
 800b702:	b11b      	cbz	r3, 800b70c <_dtoa_r+0xb34>
 800b704:	f10a 0308 	add.w	r3, sl, #8
 800b708:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b70a:	6013      	str	r3, [r2, #0]
 800b70c:	4650      	mov	r0, sl
 800b70e:	b019      	add	sp, #100	@ 0x64
 800b710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b716:	2b01      	cmp	r3, #1
 800b718:	f77f ae37 	ble.w	800b38a <_dtoa_r+0x7b2>
 800b71c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b71e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b720:	2001      	movs	r0, #1
 800b722:	e655      	b.n	800b3d0 <_dtoa_r+0x7f8>
 800b724:	9b00      	ldr	r3, [sp, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	f77f aed6 	ble.w	800b4d8 <_dtoa_r+0x900>
 800b72c:	4656      	mov	r6, sl
 800b72e:	4621      	mov	r1, r4
 800b730:	4648      	mov	r0, r9
 800b732:	f7ff f9c7 	bl	800aac4 <quorem>
 800b736:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b73a:	f806 8b01 	strb.w	r8, [r6], #1
 800b73e:	9b00      	ldr	r3, [sp, #0]
 800b740:	eba6 020a 	sub.w	r2, r6, sl
 800b744:	4293      	cmp	r3, r2
 800b746:	ddb3      	ble.n	800b6b0 <_dtoa_r+0xad8>
 800b748:	4649      	mov	r1, r9
 800b74a:	2300      	movs	r3, #0
 800b74c:	220a      	movs	r2, #10
 800b74e:	4658      	mov	r0, fp
 800b750:	f000 f968 	bl	800ba24 <__multadd>
 800b754:	4681      	mov	r9, r0
 800b756:	e7ea      	b.n	800b72e <_dtoa_r+0xb56>
 800b758:	0800e3d6 	.word	0x0800e3d6
 800b75c:	0800e35a 	.word	0x0800e35a

0800b760 <_free_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4605      	mov	r5, r0
 800b764:	2900      	cmp	r1, #0
 800b766:	d041      	beq.n	800b7ec <_free_r+0x8c>
 800b768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b76c:	1f0c      	subs	r4, r1, #4
 800b76e:	2b00      	cmp	r3, #0
 800b770:	bfb8      	it	lt
 800b772:	18e4      	addlt	r4, r4, r3
 800b774:	f000 f8e8 	bl	800b948 <__malloc_lock>
 800b778:	4a1d      	ldr	r2, [pc, #116]	@ (800b7f0 <_free_r+0x90>)
 800b77a:	6813      	ldr	r3, [r2, #0]
 800b77c:	b933      	cbnz	r3, 800b78c <_free_r+0x2c>
 800b77e:	6063      	str	r3, [r4, #4]
 800b780:	6014      	str	r4, [r2, #0]
 800b782:	4628      	mov	r0, r5
 800b784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b788:	f000 b8e4 	b.w	800b954 <__malloc_unlock>
 800b78c:	42a3      	cmp	r3, r4
 800b78e:	d908      	bls.n	800b7a2 <_free_r+0x42>
 800b790:	6820      	ldr	r0, [r4, #0]
 800b792:	1821      	adds	r1, r4, r0
 800b794:	428b      	cmp	r3, r1
 800b796:	bf01      	itttt	eq
 800b798:	6819      	ldreq	r1, [r3, #0]
 800b79a:	685b      	ldreq	r3, [r3, #4]
 800b79c:	1809      	addeq	r1, r1, r0
 800b79e:	6021      	streq	r1, [r4, #0]
 800b7a0:	e7ed      	b.n	800b77e <_free_r+0x1e>
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	b10b      	cbz	r3, 800b7ac <_free_r+0x4c>
 800b7a8:	42a3      	cmp	r3, r4
 800b7aa:	d9fa      	bls.n	800b7a2 <_free_r+0x42>
 800b7ac:	6811      	ldr	r1, [r2, #0]
 800b7ae:	1850      	adds	r0, r2, r1
 800b7b0:	42a0      	cmp	r0, r4
 800b7b2:	d10b      	bne.n	800b7cc <_free_r+0x6c>
 800b7b4:	6820      	ldr	r0, [r4, #0]
 800b7b6:	4401      	add	r1, r0
 800b7b8:	1850      	adds	r0, r2, r1
 800b7ba:	4283      	cmp	r3, r0
 800b7bc:	6011      	str	r1, [r2, #0]
 800b7be:	d1e0      	bne.n	800b782 <_free_r+0x22>
 800b7c0:	6818      	ldr	r0, [r3, #0]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	6053      	str	r3, [r2, #4]
 800b7c6:	4408      	add	r0, r1
 800b7c8:	6010      	str	r0, [r2, #0]
 800b7ca:	e7da      	b.n	800b782 <_free_r+0x22>
 800b7cc:	d902      	bls.n	800b7d4 <_free_r+0x74>
 800b7ce:	230c      	movs	r3, #12
 800b7d0:	602b      	str	r3, [r5, #0]
 800b7d2:	e7d6      	b.n	800b782 <_free_r+0x22>
 800b7d4:	6820      	ldr	r0, [r4, #0]
 800b7d6:	1821      	adds	r1, r4, r0
 800b7d8:	428b      	cmp	r3, r1
 800b7da:	bf04      	itt	eq
 800b7dc:	6819      	ldreq	r1, [r3, #0]
 800b7de:	685b      	ldreq	r3, [r3, #4]
 800b7e0:	6063      	str	r3, [r4, #4]
 800b7e2:	bf04      	itt	eq
 800b7e4:	1809      	addeq	r1, r1, r0
 800b7e6:	6021      	streq	r1, [r4, #0]
 800b7e8:	6054      	str	r4, [r2, #4]
 800b7ea:	e7ca      	b.n	800b782 <_free_r+0x22>
 800b7ec:	bd38      	pop	{r3, r4, r5, pc}
 800b7ee:	bf00      	nop
 800b7f0:	200050a8 	.word	0x200050a8

0800b7f4 <malloc>:
 800b7f4:	4b02      	ldr	r3, [pc, #8]	@ (800b800 <malloc+0xc>)
 800b7f6:	4601      	mov	r1, r0
 800b7f8:	6818      	ldr	r0, [r3, #0]
 800b7fa:	f000 b825 	b.w	800b848 <_malloc_r>
 800b7fe:	bf00      	nop
 800b800:	20000038 	.word	0x20000038

0800b804 <sbrk_aligned>:
 800b804:	b570      	push	{r4, r5, r6, lr}
 800b806:	4e0f      	ldr	r6, [pc, #60]	@ (800b844 <sbrk_aligned+0x40>)
 800b808:	460c      	mov	r4, r1
 800b80a:	6831      	ldr	r1, [r6, #0]
 800b80c:	4605      	mov	r5, r0
 800b80e:	b911      	cbnz	r1, 800b816 <sbrk_aligned+0x12>
 800b810:	f001 fe0c 	bl	800d42c <_sbrk_r>
 800b814:	6030      	str	r0, [r6, #0]
 800b816:	4621      	mov	r1, r4
 800b818:	4628      	mov	r0, r5
 800b81a:	f001 fe07 	bl	800d42c <_sbrk_r>
 800b81e:	1c43      	adds	r3, r0, #1
 800b820:	d103      	bne.n	800b82a <sbrk_aligned+0x26>
 800b822:	f04f 34ff 	mov.w	r4, #4294967295
 800b826:	4620      	mov	r0, r4
 800b828:	bd70      	pop	{r4, r5, r6, pc}
 800b82a:	1cc4      	adds	r4, r0, #3
 800b82c:	f024 0403 	bic.w	r4, r4, #3
 800b830:	42a0      	cmp	r0, r4
 800b832:	d0f8      	beq.n	800b826 <sbrk_aligned+0x22>
 800b834:	1a21      	subs	r1, r4, r0
 800b836:	4628      	mov	r0, r5
 800b838:	f001 fdf8 	bl	800d42c <_sbrk_r>
 800b83c:	3001      	adds	r0, #1
 800b83e:	d1f2      	bne.n	800b826 <sbrk_aligned+0x22>
 800b840:	e7ef      	b.n	800b822 <sbrk_aligned+0x1e>
 800b842:	bf00      	nop
 800b844:	200050a4 	.word	0x200050a4

0800b848 <_malloc_r>:
 800b848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b84c:	1ccd      	adds	r5, r1, #3
 800b84e:	f025 0503 	bic.w	r5, r5, #3
 800b852:	3508      	adds	r5, #8
 800b854:	2d0c      	cmp	r5, #12
 800b856:	bf38      	it	cc
 800b858:	250c      	movcc	r5, #12
 800b85a:	2d00      	cmp	r5, #0
 800b85c:	4606      	mov	r6, r0
 800b85e:	db01      	blt.n	800b864 <_malloc_r+0x1c>
 800b860:	42a9      	cmp	r1, r5
 800b862:	d904      	bls.n	800b86e <_malloc_r+0x26>
 800b864:	230c      	movs	r3, #12
 800b866:	6033      	str	r3, [r6, #0]
 800b868:	2000      	movs	r0, #0
 800b86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b86e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b944 <_malloc_r+0xfc>
 800b872:	f000 f869 	bl	800b948 <__malloc_lock>
 800b876:	f8d8 3000 	ldr.w	r3, [r8]
 800b87a:	461c      	mov	r4, r3
 800b87c:	bb44      	cbnz	r4, 800b8d0 <_malloc_r+0x88>
 800b87e:	4629      	mov	r1, r5
 800b880:	4630      	mov	r0, r6
 800b882:	f7ff ffbf 	bl	800b804 <sbrk_aligned>
 800b886:	1c43      	adds	r3, r0, #1
 800b888:	4604      	mov	r4, r0
 800b88a:	d158      	bne.n	800b93e <_malloc_r+0xf6>
 800b88c:	f8d8 4000 	ldr.w	r4, [r8]
 800b890:	4627      	mov	r7, r4
 800b892:	2f00      	cmp	r7, #0
 800b894:	d143      	bne.n	800b91e <_malloc_r+0xd6>
 800b896:	2c00      	cmp	r4, #0
 800b898:	d04b      	beq.n	800b932 <_malloc_r+0xea>
 800b89a:	6823      	ldr	r3, [r4, #0]
 800b89c:	4639      	mov	r1, r7
 800b89e:	4630      	mov	r0, r6
 800b8a0:	eb04 0903 	add.w	r9, r4, r3
 800b8a4:	f001 fdc2 	bl	800d42c <_sbrk_r>
 800b8a8:	4581      	cmp	r9, r0
 800b8aa:	d142      	bne.n	800b932 <_malloc_r+0xea>
 800b8ac:	6821      	ldr	r1, [r4, #0]
 800b8ae:	1a6d      	subs	r5, r5, r1
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f7ff ffa6 	bl	800b804 <sbrk_aligned>
 800b8b8:	3001      	adds	r0, #1
 800b8ba:	d03a      	beq.n	800b932 <_malloc_r+0xea>
 800b8bc:	6823      	ldr	r3, [r4, #0]
 800b8be:	442b      	add	r3, r5
 800b8c0:	6023      	str	r3, [r4, #0]
 800b8c2:	f8d8 3000 	ldr.w	r3, [r8]
 800b8c6:	685a      	ldr	r2, [r3, #4]
 800b8c8:	bb62      	cbnz	r2, 800b924 <_malloc_r+0xdc>
 800b8ca:	f8c8 7000 	str.w	r7, [r8]
 800b8ce:	e00f      	b.n	800b8f0 <_malloc_r+0xa8>
 800b8d0:	6822      	ldr	r2, [r4, #0]
 800b8d2:	1b52      	subs	r2, r2, r5
 800b8d4:	d420      	bmi.n	800b918 <_malloc_r+0xd0>
 800b8d6:	2a0b      	cmp	r2, #11
 800b8d8:	d917      	bls.n	800b90a <_malloc_r+0xc2>
 800b8da:	1961      	adds	r1, r4, r5
 800b8dc:	42a3      	cmp	r3, r4
 800b8de:	6025      	str	r5, [r4, #0]
 800b8e0:	bf18      	it	ne
 800b8e2:	6059      	strne	r1, [r3, #4]
 800b8e4:	6863      	ldr	r3, [r4, #4]
 800b8e6:	bf08      	it	eq
 800b8e8:	f8c8 1000 	streq.w	r1, [r8]
 800b8ec:	5162      	str	r2, [r4, r5]
 800b8ee:	604b      	str	r3, [r1, #4]
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	f000 f82f 	bl	800b954 <__malloc_unlock>
 800b8f6:	f104 000b 	add.w	r0, r4, #11
 800b8fa:	1d23      	adds	r3, r4, #4
 800b8fc:	f020 0007 	bic.w	r0, r0, #7
 800b900:	1ac2      	subs	r2, r0, r3
 800b902:	bf1c      	itt	ne
 800b904:	1a1b      	subne	r3, r3, r0
 800b906:	50a3      	strne	r3, [r4, r2]
 800b908:	e7af      	b.n	800b86a <_malloc_r+0x22>
 800b90a:	6862      	ldr	r2, [r4, #4]
 800b90c:	42a3      	cmp	r3, r4
 800b90e:	bf0c      	ite	eq
 800b910:	f8c8 2000 	streq.w	r2, [r8]
 800b914:	605a      	strne	r2, [r3, #4]
 800b916:	e7eb      	b.n	800b8f0 <_malloc_r+0xa8>
 800b918:	4623      	mov	r3, r4
 800b91a:	6864      	ldr	r4, [r4, #4]
 800b91c:	e7ae      	b.n	800b87c <_malloc_r+0x34>
 800b91e:	463c      	mov	r4, r7
 800b920:	687f      	ldr	r7, [r7, #4]
 800b922:	e7b6      	b.n	800b892 <_malloc_r+0x4a>
 800b924:	461a      	mov	r2, r3
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	42a3      	cmp	r3, r4
 800b92a:	d1fb      	bne.n	800b924 <_malloc_r+0xdc>
 800b92c:	2300      	movs	r3, #0
 800b92e:	6053      	str	r3, [r2, #4]
 800b930:	e7de      	b.n	800b8f0 <_malloc_r+0xa8>
 800b932:	230c      	movs	r3, #12
 800b934:	6033      	str	r3, [r6, #0]
 800b936:	4630      	mov	r0, r6
 800b938:	f000 f80c 	bl	800b954 <__malloc_unlock>
 800b93c:	e794      	b.n	800b868 <_malloc_r+0x20>
 800b93e:	6005      	str	r5, [r0, #0]
 800b940:	e7d6      	b.n	800b8f0 <_malloc_r+0xa8>
 800b942:	bf00      	nop
 800b944:	200050a8 	.word	0x200050a8

0800b948 <__malloc_lock>:
 800b948:	4801      	ldr	r0, [pc, #4]	@ (800b950 <__malloc_lock+0x8>)
 800b94a:	f7ff b8a4 	b.w	800aa96 <__retarget_lock_acquire_recursive>
 800b94e:	bf00      	nop
 800b950:	200050a0 	.word	0x200050a0

0800b954 <__malloc_unlock>:
 800b954:	4801      	ldr	r0, [pc, #4]	@ (800b95c <__malloc_unlock+0x8>)
 800b956:	f7ff b89f 	b.w	800aa98 <__retarget_lock_release_recursive>
 800b95a:	bf00      	nop
 800b95c:	200050a0 	.word	0x200050a0

0800b960 <_Balloc>:
 800b960:	b570      	push	{r4, r5, r6, lr}
 800b962:	69c6      	ldr	r6, [r0, #28]
 800b964:	4604      	mov	r4, r0
 800b966:	460d      	mov	r5, r1
 800b968:	b976      	cbnz	r6, 800b988 <_Balloc+0x28>
 800b96a:	2010      	movs	r0, #16
 800b96c:	f7ff ff42 	bl	800b7f4 <malloc>
 800b970:	4602      	mov	r2, r0
 800b972:	61e0      	str	r0, [r4, #28]
 800b974:	b920      	cbnz	r0, 800b980 <_Balloc+0x20>
 800b976:	4b18      	ldr	r3, [pc, #96]	@ (800b9d8 <_Balloc+0x78>)
 800b978:	4818      	ldr	r0, [pc, #96]	@ (800b9dc <_Balloc+0x7c>)
 800b97a:	216b      	movs	r1, #107	@ 0x6b
 800b97c:	f001 fd70 	bl	800d460 <__assert_func>
 800b980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b984:	6006      	str	r6, [r0, #0]
 800b986:	60c6      	str	r6, [r0, #12]
 800b988:	69e6      	ldr	r6, [r4, #28]
 800b98a:	68f3      	ldr	r3, [r6, #12]
 800b98c:	b183      	cbz	r3, 800b9b0 <_Balloc+0x50>
 800b98e:	69e3      	ldr	r3, [r4, #28]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b996:	b9b8      	cbnz	r0, 800b9c8 <_Balloc+0x68>
 800b998:	2101      	movs	r1, #1
 800b99a:	fa01 f605 	lsl.w	r6, r1, r5
 800b99e:	1d72      	adds	r2, r6, #5
 800b9a0:	0092      	lsls	r2, r2, #2
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	f001 fd7a 	bl	800d49c <_calloc_r>
 800b9a8:	b160      	cbz	r0, 800b9c4 <_Balloc+0x64>
 800b9aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b9ae:	e00e      	b.n	800b9ce <_Balloc+0x6e>
 800b9b0:	2221      	movs	r2, #33	@ 0x21
 800b9b2:	2104      	movs	r1, #4
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f001 fd71 	bl	800d49c <_calloc_r>
 800b9ba:	69e3      	ldr	r3, [r4, #28]
 800b9bc:	60f0      	str	r0, [r6, #12]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d1e4      	bne.n	800b98e <_Balloc+0x2e>
 800b9c4:	2000      	movs	r0, #0
 800b9c6:	bd70      	pop	{r4, r5, r6, pc}
 800b9c8:	6802      	ldr	r2, [r0, #0]
 800b9ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b9d4:	e7f7      	b.n	800b9c6 <_Balloc+0x66>
 800b9d6:	bf00      	nop
 800b9d8:	0800e367 	.word	0x0800e367
 800b9dc:	0800e3e7 	.word	0x0800e3e7

0800b9e0 <_Bfree>:
 800b9e0:	b570      	push	{r4, r5, r6, lr}
 800b9e2:	69c6      	ldr	r6, [r0, #28]
 800b9e4:	4605      	mov	r5, r0
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	b976      	cbnz	r6, 800ba08 <_Bfree+0x28>
 800b9ea:	2010      	movs	r0, #16
 800b9ec:	f7ff ff02 	bl	800b7f4 <malloc>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	61e8      	str	r0, [r5, #28]
 800b9f4:	b920      	cbnz	r0, 800ba00 <_Bfree+0x20>
 800b9f6:	4b09      	ldr	r3, [pc, #36]	@ (800ba1c <_Bfree+0x3c>)
 800b9f8:	4809      	ldr	r0, [pc, #36]	@ (800ba20 <_Bfree+0x40>)
 800b9fa:	218f      	movs	r1, #143	@ 0x8f
 800b9fc:	f001 fd30 	bl	800d460 <__assert_func>
 800ba00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba04:	6006      	str	r6, [r0, #0]
 800ba06:	60c6      	str	r6, [r0, #12]
 800ba08:	b13c      	cbz	r4, 800ba1a <_Bfree+0x3a>
 800ba0a:	69eb      	ldr	r3, [r5, #28]
 800ba0c:	6862      	ldr	r2, [r4, #4]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba14:	6021      	str	r1, [r4, #0]
 800ba16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba1a:	bd70      	pop	{r4, r5, r6, pc}
 800ba1c:	0800e367 	.word	0x0800e367
 800ba20:	0800e3e7 	.word	0x0800e3e7

0800ba24 <__multadd>:
 800ba24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba28:	690d      	ldr	r5, [r1, #16]
 800ba2a:	4607      	mov	r7, r0
 800ba2c:	460c      	mov	r4, r1
 800ba2e:	461e      	mov	r6, r3
 800ba30:	f101 0c14 	add.w	ip, r1, #20
 800ba34:	2000      	movs	r0, #0
 800ba36:	f8dc 3000 	ldr.w	r3, [ip]
 800ba3a:	b299      	uxth	r1, r3
 800ba3c:	fb02 6101 	mla	r1, r2, r1, r6
 800ba40:	0c1e      	lsrs	r6, r3, #16
 800ba42:	0c0b      	lsrs	r3, r1, #16
 800ba44:	fb02 3306 	mla	r3, r2, r6, r3
 800ba48:	b289      	uxth	r1, r1
 800ba4a:	3001      	adds	r0, #1
 800ba4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba50:	4285      	cmp	r5, r0
 800ba52:	f84c 1b04 	str.w	r1, [ip], #4
 800ba56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba5a:	dcec      	bgt.n	800ba36 <__multadd+0x12>
 800ba5c:	b30e      	cbz	r6, 800baa2 <__multadd+0x7e>
 800ba5e:	68a3      	ldr	r3, [r4, #8]
 800ba60:	42ab      	cmp	r3, r5
 800ba62:	dc19      	bgt.n	800ba98 <__multadd+0x74>
 800ba64:	6861      	ldr	r1, [r4, #4]
 800ba66:	4638      	mov	r0, r7
 800ba68:	3101      	adds	r1, #1
 800ba6a:	f7ff ff79 	bl	800b960 <_Balloc>
 800ba6e:	4680      	mov	r8, r0
 800ba70:	b928      	cbnz	r0, 800ba7e <__multadd+0x5a>
 800ba72:	4602      	mov	r2, r0
 800ba74:	4b0c      	ldr	r3, [pc, #48]	@ (800baa8 <__multadd+0x84>)
 800ba76:	480d      	ldr	r0, [pc, #52]	@ (800baac <__multadd+0x88>)
 800ba78:	21ba      	movs	r1, #186	@ 0xba
 800ba7a:	f001 fcf1 	bl	800d460 <__assert_func>
 800ba7e:	6922      	ldr	r2, [r4, #16]
 800ba80:	3202      	adds	r2, #2
 800ba82:	f104 010c 	add.w	r1, r4, #12
 800ba86:	0092      	lsls	r2, r2, #2
 800ba88:	300c      	adds	r0, #12
 800ba8a:	f7ff f806 	bl	800aa9a <memcpy>
 800ba8e:	4621      	mov	r1, r4
 800ba90:	4638      	mov	r0, r7
 800ba92:	f7ff ffa5 	bl	800b9e0 <_Bfree>
 800ba96:	4644      	mov	r4, r8
 800ba98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba9c:	3501      	adds	r5, #1
 800ba9e:	615e      	str	r6, [r3, #20]
 800baa0:	6125      	str	r5, [r4, #16]
 800baa2:	4620      	mov	r0, r4
 800baa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa8:	0800e3d6 	.word	0x0800e3d6
 800baac:	0800e3e7 	.word	0x0800e3e7

0800bab0 <__s2b>:
 800bab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bab4:	460c      	mov	r4, r1
 800bab6:	4615      	mov	r5, r2
 800bab8:	461f      	mov	r7, r3
 800baba:	2209      	movs	r2, #9
 800babc:	3308      	adds	r3, #8
 800babe:	4606      	mov	r6, r0
 800bac0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bac4:	2100      	movs	r1, #0
 800bac6:	2201      	movs	r2, #1
 800bac8:	429a      	cmp	r2, r3
 800baca:	db09      	blt.n	800bae0 <__s2b+0x30>
 800bacc:	4630      	mov	r0, r6
 800bace:	f7ff ff47 	bl	800b960 <_Balloc>
 800bad2:	b940      	cbnz	r0, 800bae6 <__s2b+0x36>
 800bad4:	4602      	mov	r2, r0
 800bad6:	4b19      	ldr	r3, [pc, #100]	@ (800bb3c <__s2b+0x8c>)
 800bad8:	4819      	ldr	r0, [pc, #100]	@ (800bb40 <__s2b+0x90>)
 800bada:	21d3      	movs	r1, #211	@ 0xd3
 800badc:	f001 fcc0 	bl	800d460 <__assert_func>
 800bae0:	0052      	lsls	r2, r2, #1
 800bae2:	3101      	adds	r1, #1
 800bae4:	e7f0      	b.n	800bac8 <__s2b+0x18>
 800bae6:	9b08      	ldr	r3, [sp, #32]
 800bae8:	6143      	str	r3, [r0, #20]
 800baea:	2d09      	cmp	r5, #9
 800baec:	f04f 0301 	mov.w	r3, #1
 800baf0:	6103      	str	r3, [r0, #16]
 800baf2:	dd16      	ble.n	800bb22 <__s2b+0x72>
 800baf4:	f104 0909 	add.w	r9, r4, #9
 800baf8:	46c8      	mov	r8, r9
 800bafa:	442c      	add	r4, r5
 800bafc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bb00:	4601      	mov	r1, r0
 800bb02:	3b30      	subs	r3, #48	@ 0x30
 800bb04:	220a      	movs	r2, #10
 800bb06:	4630      	mov	r0, r6
 800bb08:	f7ff ff8c 	bl	800ba24 <__multadd>
 800bb0c:	45a0      	cmp	r8, r4
 800bb0e:	d1f5      	bne.n	800bafc <__s2b+0x4c>
 800bb10:	f1a5 0408 	sub.w	r4, r5, #8
 800bb14:	444c      	add	r4, r9
 800bb16:	1b2d      	subs	r5, r5, r4
 800bb18:	1963      	adds	r3, r4, r5
 800bb1a:	42bb      	cmp	r3, r7
 800bb1c:	db04      	blt.n	800bb28 <__s2b+0x78>
 800bb1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb22:	340a      	adds	r4, #10
 800bb24:	2509      	movs	r5, #9
 800bb26:	e7f6      	b.n	800bb16 <__s2b+0x66>
 800bb28:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bb2c:	4601      	mov	r1, r0
 800bb2e:	3b30      	subs	r3, #48	@ 0x30
 800bb30:	220a      	movs	r2, #10
 800bb32:	4630      	mov	r0, r6
 800bb34:	f7ff ff76 	bl	800ba24 <__multadd>
 800bb38:	e7ee      	b.n	800bb18 <__s2b+0x68>
 800bb3a:	bf00      	nop
 800bb3c:	0800e3d6 	.word	0x0800e3d6
 800bb40:	0800e3e7 	.word	0x0800e3e7

0800bb44 <__hi0bits>:
 800bb44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bb48:	4603      	mov	r3, r0
 800bb4a:	bf36      	itet	cc
 800bb4c:	0403      	lslcc	r3, r0, #16
 800bb4e:	2000      	movcs	r0, #0
 800bb50:	2010      	movcc	r0, #16
 800bb52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb56:	bf3c      	itt	cc
 800bb58:	021b      	lslcc	r3, r3, #8
 800bb5a:	3008      	addcc	r0, #8
 800bb5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb60:	bf3c      	itt	cc
 800bb62:	011b      	lslcc	r3, r3, #4
 800bb64:	3004      	addcc	r0, #4
 800bb66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb6a:	bf3c      	itt	cc
 800bb6c:	009b      	lslcc	r3, r3, #2
 800bb6e:	3002      	addcc	r0, #2
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	db05      	blt.n	800bb80 <__hi0bits+0x3c>
 800bb74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bb78:	f100 0001 	add.w	r0, r0, #1
 800bb7c:	bf08      	it	eq
 800bb7e:	2020      	moveq	r0, #32
 800bb80:	4770      	bx	lr

0800bb82 <__lo0bits>:
 800bb82:	6803      	ldr	r3, [r0, #0]
 800bb84:	4602      	mov	r2, r0
 800bb86:	f013 0007 	ands.w	r0, r3, #7
 800bb8a:	d00b      	beq.n	800bba4 <__lo0bits+0x22>
 800bb8c:	07d9      	lsls	r1, r3, #31
 800bb8e:	d421      	bmi.n	800bbd4 <__lo0bits+0x52>
 800bb90:	0798      	lsls	r0, r3, #30
 800bb92:	bf49      	itett	mi
 800bb94:	085b      	lsrmi	r3, r3, #1
 800bb96:	089b      	lsrpl	r3, r3, #2
 800bb98:	2001      	movmi	r0, #1
 800bb9a:	6013      	strmi	r3, [r2, #0]
 800bb9c:	bf5c      	itt	pl
 800bb9e:	6013      	strpl	r3, [r2, #0]
 800bba0:	2002      	movpl	r0, #2
 800bba2:	4770      	bx	lr
 800bba4:	b299      	uxth	r1, r3
 800bba6:	b909      	cbnz	r1, 800bbac <__lo0bits+0x2a>
 800bba8:	0c1b      	lsrs	r3, r3, #16
 800bbaa:	2010      	movs	r0, #16
 800bbac:	b2d9      	uxtb	r1, r3
 800bbae:	b909      	cbnz	r1, 800bbb4 <__lo0bits+0x32>
 800bbb0:	3008      	adds	r0, #8
 800bbb2:	0a1b      	lsrs	r3, r3, #8
 800bbb4:	0719      	lsls	r1, r3, #28
 800bbb6:	bf04      	itt	eq
 800bbb8:	091b      	lsreq	r3, r3, #4
 800bbba:	3004      	addeq	r0, #4
 800bbbc:	0799      	lsls	r1, r3, #30
 800bbbe:	bf04      	itt	eq
 800bbc0:	089b      	lsreq	r3, r3, #2
 800bbc2:	3002      	addeq	r0, #2
 800bbc4:	07d9      	lsls	r1, r3, #31
 800bbc6:	d403      	bmi.n	800bbd0 <__lo0bits+0x4e>
 800bbc8:	085b      	lsrs	r3, r3, #1
 800bbca:	f100 0001 	add.w	r0, r0, #1
 800bbce:	d003      	beq.n	800bbd8 <__lo0bits+0x56>
 800bbd0:	6013      	str	r3, [r2, #0]
 800bbd2:	4770      	bx	lr
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	4770      	bx	lr
 800bbd8:	2020      	movs	r0, #32
 800bbda:	4770      	bx	lr

0800bbdc <__i2b>:
 800bbdc:	b510      	push	{r4, lr}
 800bbde:	460c      	mov	r4, r1
 800bbe0:	2101      	movs	r1, #1
 800bbe2:	f7ff febd 	bl	800b960 <_Balloc>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	b928      	cbnz	r0, 800bbf6 <__i2b+0x1a>
 800bbea:	4b05      	ldr	r3, [pc, #20]	@ (800bc00 <__i2b+0x24>)
 800bbec:	4805      	ldr	r0, [pc, #20]	@ (800bc04 <__i2b+0x28>)
 800bbee:	f240 1145 	movw	r1, #325	@ 0x145
 800bbf2:	f001 fc35 	bl	800d460 <__assert_func>
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	6144      	str	r4, [r0, #20]
 800bbfa:	6103      	str	r3, [r0, #16]
 800bbfc:	bd10      	pop	{r4, pc}
 800bbfe:	bf00      	nop
 800bc00:	0800e3d6 	.word	0x0800e3d6
 800bc04:	0800e3e7 	.word	0x0800e3e7

0800bc08 <__multiply>:
 800bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	4614      	mov	r4, r2
 800bc0e:	690a      	ldr	r2, [r1, #16]
 800bc10:	6923      	ldr	r3, [r4, #16]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	bfa8      	it	ge
 800bc16:	4623      	movge	r3, r4
 800bc18:	460f      	mov	r7, r1
 800bc1a:	bfa4      	itt	ge
 800bc1c:	460c      	movge	r4, r1
 800bc1e:	461f      	movge	r7, r3
 800bc20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bc24:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bc28:	68a3      	ldr	r3, [r4, #8]
 800bc2a:	6861      	ldr	r1, [r4, #4]
 800bc2c:	eb0a 0609 	add.w	r6, sl, r9
 800bc30:	42b3      	cmp	r3, r6
 800bc32:	b085      	sub	sp, #20
 800bc34:	bfb8      	it	lt
 800bc36:	3101      	addlt	r1, #1
 800bc38:	f7ff fe92 	bl	800b960 <_Balloc>
 800bc3c:	b930      	cbnz	r0, 800bc4c <__multiply+0x44>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	4b44      	ldr	r3, [pc, #272]	@ (800bd54 <__multiply+0x14c>)
 800bc42:	4845      	ldr	r0, [pc, #276]	@ (800bd58 <__multiply+0x150>)
 800bc44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bc48:	f001 fc0a 	bl	800d460 <__assert_func>
 800bc4c:	f100 0514 	add.w	r5, r0, #20
 800bc50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc54:	462b      	mov	r3, r5
 800bc56:	2200      	movs	r2, #0
 800bc58:	4543      	cmp	r3, r8
 800bc5a:	d321      	bcc.n	800bca0 <__multiply+0x98>
 800bc5c:	f107 0114 	add.w	r1, r7, #20
 800bc60:	f104 0214 	add.w	r2, r4, #20
 800bc64:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bc68:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bc6c:	9302      	str	r3, [sp, #8]
 800bc6e:	1b13      	subs	r3, r2, r4
 800bc70:	3b15      	subs	r3, #21
 800bc72:	f023 0303 	bic.w	r3, r3, #3
 800bc76:	3304      	adds	r3, #4
 800bc78:	f104 0715 	add.w	r7, r4, #21
 800bc7c:	42ba      	cmp	r2, r7
 800bc7e:	bf38      	it	cc
 800bc80:	2304      	movcc	r3, #4
 800bc82:	9301      	str	r3, [sp, #4]
 800bc84:	9b02      	ldr	r3, [sp, #8]
 800bc86:	9103      	str	r1, [sp, #12]
 800bc88:	428b      	cmp	r3, r1
 800bc8a:	d80c      	bhi.n	800bca6 <__multiply+0x9e>
 800bc8c:	2e00      	cmp	r6, #0
 800bc8e:	dd03      	ble.n	800bc98 <__multiply+0x90>
 800bc90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d05b      	beq.n	800bd50 <__multiply+0x148>
 800bc98:	6106      	str	r6, [r0, #16]
 800bc9a:	b005      	add	sp, #20
 800bc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca0:	f843 2b04 	str.w	r2, [r3], #4
 800bca4:	e7d8      	b.n	800bc58 <__multiply+0x50>
 800bca6:	f8b1 a000 	ldrh.w	sl, [r1]
 800bcaa:	f1ba 0f00 	cmp.w	sl, #0
 800bcae:	d024      	beq.n	800bcfa <__multiply+0xf2>
 800bcb0:	f104 0e14 	add.w	lr, r4, #20
 800bcb4:	46a9      	mov	r9, r5
 800bcb6:	f04f 0c00 	mov.w	ip, #0
 800bcba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bcbe:	f8d9 3000 	ldr.w	r3, [r9]
 800bcc2:	fa1f fb87 	uxth.w	fp, r7
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	fb0a 330b 	mla	r3, sl, fp, r3
 800bccc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bcd0:	f8d9 7000 	ldr.w	r7, [r9]
 800bcd4:	4463      	add	r3, ip
 800bcd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bcda:	fb0a c70b 	mla	r7, sl, fp, ip
 800bcde:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bce8:	4572      	cmp	r2, lr
 800bcea:	f849 3b04 	str.w	r3, [r9], #4
 800bcee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bcf2:	d8e2      	bhi.n	800bcba <__multiply+0xb2>
 800bcf4:	9b01      	ldr	r3, [sp, #4]
 800bcf6:	f845 c003 	str.w	ip, [r5, r3]
 800bcfa:	9b03      	ldr	r3, [sp, #12]
 800bcfc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bd00:	3104      	adds	r1, #4
 800bd02:	f1b9 0f00 	cmp.w	r9, #0
 800bd06:	d021      	beq.n	800bd4c <__multiply+0x144>
 800bd08:	682b      	ldr	r3, [r5, #0]
 800bd0a:	f104 0c14 	add.w	ip, r4, #20
 800bd0e:	46ae      	mov	lr, r5
 800bd10:	f04f 0a00 	mov.w	sl, #0
 800bd14:	f8bc b000 	ldrh.w	fp, [ip]
 800bd18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bd1c:	fb09 770b 	mla	r7, r9, fp, r7
 800bd20:	4457      	add	r7, sl
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bd28:	f84e 3b04 	str.w	r3, [lr], #4
 800bd2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd34:	f8be 3000 	ldrh.w	r3, [lr]
 800bd38:	fb09 330a 	mla	r3, r9, sl, r3
 800bd3c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bd40:	4562      	cmp	r2, ip
 800bd42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd46:	d8e5      	bhi.n	800bd14 <__multiply+0x10c>
 800bd48:	9f01      	ldr	r7, [sp, #4]
 800bd4a:	51eb      	str	r3, [r5, r7]
 800bd4c:	3504      	adds	r5, #4
 800bd4e:	e799      	b.n	800bc84 <__multiply+0x7c>
 800bd50:	3e01      	subs	r6, #1
 800bd52:	e79b      	b.n	800bc8c <__multiply+0x84>
 800bd54:	0800e3d6 	.word	0x0800e3d6
 800bd58:	0800e3e7 	.word	0x0800e3e7

0800bd5c <__pow5mult>:
 800bd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd60:	4615      	mov	r5, r2
 800bd62:	f012 0203 	ands.w	r2, r2, #3
 800bd66:	4607      	mov	r7, r0
 800bd68:	460e      	mov	r6, r1
 800bd6a:	d007      	beq.n	800bd7c <__pow5mult+0x20>
 800bd6c:	4c25      	ldr	r4, [pc, #148]	@ (800be04 <__pow5mult+0xa8>)
 800bd6e:	3a01      	subs	r2, #1
 800bd70:	2300      	movs	r3, #0
 800bd72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd76:	f7ff fe55 	bl	800ba24 <__multadd>
 800bd7a:	4606      	mov	r6, r0
 800bd7c:	10ad      	asrs	r5, r5, #2
 800bd7e:	d03d      	beq.n	800bdfc <__pow5mult+0xa0>
 800bd80:	69fc      	ldr	r4, [r7, #28]
 800bd82:	b97c      	cbnz	r4, 800bda4 <__pow5mult+0x48>
 800bd84:	2010      	movs	r0, #16
 800bd86:	f7ff fd35 	bl	800b7f4 <malloc>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	61f8      	str	r0, [r7, #28]
 800bd8e:	b928      	cbnz	r0, 800bd9c <__pow5mult+0x40>
 800bd90:	4b1d      	ldr	r3, [pc, #116]	@ (800be08 <__pow5mult+0xac>)
 800bd92:	481e      	ldr	r0, [pc, #120]	@ (800be0c <__pow5mult+0xb0>)
 800bd94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bd98:	f001 fb62 	bl	800d460 <__assert_func>
 800bd9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bda0:	6004      	str	r4, [r0, #0]
 800bda2:	60c4      	str	r4, [r0, #12]
 800bda4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bda8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bdac:	b94c      	cbnz	r4, 800bdc2 <__pow5mult+0x66>
 800bdae:	f240 2171 	movw	r1, #625	@ 0x271
 800bdb2:	4638      	mov	r0, r7
 800bdb4:	f7ff ff12 	bl	800bbdc <__i2b>
 800bdb8:	2300      	movs	r3, #0
 800bdba:	f8c8 0008 	str.w	r0, [r8, #8]
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	6003      	str	r3, [r0, #0]
 800bdc2:	f04f 0900 	mov.w	r9, #0
 800bdc6:	07eb      	lsls	r3, r5, #31
 800bdc8:	d50a      	bpl.n	800bde0 <__pow5mult+0x84>
 800bdca:	4631      	mov	r1, r6
 800bdcc:	4622      	mov	r2, r4
 800bdce:	4638      	mov	r0, r7
 800bdd0:	f7ff ff1a 	bl	800bc08 <__multiply>
 800bdd4:	4631      	mov	r1, r6
 800bdd6:	4680      	mov	r8, r0
 800bdd8:	4638      	mov	r0, r7
 800bdda:	f7ff fe01 	bl	800b9e0 <_Bfree>
 800bdde:	4646      	mov	r6, r8
 800bde0:	106d      	asrs	r5, r5, #1
 800bde2:	d00b      	beq.n	800bdfc <__pow5mult+0xa0>
 800bde4:	6820      	ldr	r0, [r4, #0]
 800bde6:	b938      	cbnz	r0, 800bdf8 <__pow5mult+0x9c>
 800bde8:	4622      	mov	r2, r4
 800bdea:	4621      	mov	r1, r4
 800bdec:	4638      	mov	r0, r7
 800bdee:	f7ff ff0b 	bl	800bc08 <__multiply>
 800bdf2:	6020      	str	r0, [r4, #0]
 800bdf4:	f8c0 9000 	str.w	r9, [r0]
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	e7e4      	b.n	800bdc6 <__pow5mult+0x6a>
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be02:	bf00      	nop
 800be04:	0800e440 	.word	0x0800e440
 800be08:	0800e367 	.word	0x0800e367
 800be0c:	0800e3e7 	.word	0x0800e3e7

0800be10 <__lshift>:
 800be10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be14:	460c      	mov	r4, r1
 800be16:	6849      	ldr	r1, [r1, #4]
 800be18:	6923      	ldr	r3, [r4, #16]
 800be1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be1e:	68a3      	ldr	r3, [r4, #8]
 800be20:	4607      	mov	r7, r0
 800be22:	4691      	mov	r9, r2
 800be24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be28:	f108 0601 	add.w	r6, r8, #1
 800be2c:	42b3      	cmp	r3, r6
 800be2e:	db0b      	blt.n	800be48 <__lshift+0x38>
 800be30:	4638      	mov	r0, r7
 800be32:	f7ff fd95 	bl	800b960 <_Balloc>
 800be36:	4605      	mov	r5, r0
 800be38:	b948      	cbnz	r0, 800be4e <__lshift+0x3e>
 800be3a:	4602      	mov	r2, r0
 800be3c:	4b28      	ldr	r3, [pc, #160]	@ (800bee0 <__lshift+0xd0>)
 800be3e:	4829      	ldr	r0, [pc, #164]	@ (800bee4 <__lshift+0xd4>)
 800be40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800be44:	f001 fb0c 	bl	800d460 <__assert_func>
 800be48:	3101      	adds	r1, #1
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	e7ee      	b.n	800be2c <__lshift+0x1c>
 800be4e:	2300      	movs	r3, #0
 800be50:	f100 0114 	add.w	r1, r0, #20
 800be54:	f100 0210 	add.w	r2, r0, #16
 800be58:	4618      	mov	r0, r3
 800be5a:	4553      	cmp	r3, sl
 800be5c:	db33      	blt.n	800bec6 <__lshift+0xb6>
 800be5e:	6920      	ldr	r0, [r4, #16]
 800be60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be64:	f104 0314 	add.w	r3, r4, #20
 800be68:	f019 091f 	ands.w	r9, r9, #31
 800be6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be74:	d02b      	beq.n	800bece <__lshift+0xbe>
 800be76:	f1c9 0e20 	rsb	lr, r9, #32
 800be7a:	468a      	mov	sl, r1
 800be7c:	2200      	movs	r2, #0
 800be7e:	6818      	ldr	r0, [r3, #0]
 800be80:	fa00 f009 	lsl.w	r0, r0, r9
 800be84:	4310      	orrs	r0, r2
 800be86:	f84a 0b04 	str.w	r0, [sl], #4
 800be8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be8e:	459c      	cmp	ip, r3
 800be90:	fa22 f20e 	lsr.w	r2, r2, lr
 800be94:	d8f3      	bhi.n	800be7e <__lshift+0x6e>
 800be96:	ebac 0304 	sub.w	r3, ip, r4
 800be9a:	3b15      	subs	r3, #21
 800be9c:	f023 0303 	bic.w	r3, r3, #3
 800bea0:	3304      	adds	r3, #4
 800bea2:	f104 0015 	add.w	r0, r4, #21
 800bea6:	4584      	cmp	ip, r0
 800bea8:	bf38      	it	cc
 800beaa:	2304      	movcc	r3, #4
 800beac:	50ca      	str	r2, [r1, r3]
 800beae:	b10a      	cbz	r2, 800beb4 <__lshift+0xa4>
 800beb0:	f108 0602 	add.w	r6, r8, #2
 800beb4:	3e01      	subs	r6, #1
 800beb6:	4638      	mov	r0, r7
 800beb8:	612e      	str	r6, [r5, #16]
 800beba:	4621      	mov	r1, r4
 800bebc:	f7ff fd90 	bl	800b9e0 <_Bfree>
 800bec0:	4628      	mov	r0, r5
 800bec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bec6:	f842 0f04 	str.w	r0, [r2, #4]!
 800beca:	3301      	adds	r3, #1
 800becc:	e7c5      	b.n	800be5a <__lshift+0x4a>
 800bece:	3904      	subs	r1, #4
 800bed0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bed4:	f841 2f04 	str.w	r2, [r1, #4]!
 800bed8:	459c      	cmp	ip, r3
 800beda:	d8f9      	bhi.n	800bed0 <__lshift+0xc0>
 800bedc:	e7ea      	b.n	800beb4 <__lshift+0xa4>
 800bede:	bf00      	nop
 800bee0:	0800e3d6 	.word	0x0800e3d6
 800bee4:	0800e3e7 	.word	0x0800e3e7

0800bee8 <__mcmp>:
 800bee8:	690a      	ldr	r2, [r1, #16]
 800beea:	4603      	mov	r3, r0
 800beec:	6900      	ldr	r0, [r0, #16]
 800beee:	1a80      	subs	r0, r0, r2
 800bef0:	b530      	push	{r4, r5, lr}
 800bef2:	d10e      	bne.n	800bf12 <__mcmp+0x2a>
 800bef4:	3314      	adds	r3, #20
 800bef6:	3114      	adds	r1, #20
 800bef8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800befc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bf00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bf04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bf08:	4295      	cmp	r5, r2
 800bf0a:	d003      	beq.n	800bf14 <__mcmp+0x2c>
 800bf0c:	d205      	bcs.n	800bf1a <__mcmp+0x32>
 800bf0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf12:	bd30      	pop	{r4, r5, pc}
 800bf14:	42a3      	cmp	r3, r4
 800bf16:	d3f3      	bcc.n	800bf00 <__mcmp+0x18>
 800bf18:	e7fb      	b.n	800bf12 <__mcmp+0x2a>
 800bf1a:	2001      	movs	r0, #1
 800bf1c:	e7f9      	b.n	800bf12 <__mcmp+0x2a>
	...

0800bf20 <__mdiff>:
 800bf20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf24:	4689      	mov	r9, r1
 800bf26:	4606      	mov	r6, r0
 800bf28:	4611      	mov	r1, r2
 800bf2a:	4648      	mov	r0, r9
 800bf2c:	4614      	mov	r4, r2
 800bf2e:	f7ff ffdb 	bl	800bee8 <__mcmp>
 800bf32:	1e05      	subs	r5, r0, #0
 800bf34:	d112      	bne.n	800bf5c <__mdiff+0x3c>
 800bf36:	4629      	mov	r1, r5
 800bf38:	4630      	mov	r0, r6
 800bf3a:	f7ff fd11 	bl	800b960 <_Balloc>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	b928      	cbnz	r0, 800bf4e <__mdiff+0x2e>
 800bf42:	4b3f      	ldr	r3, [pc, #252]	@ (800c040 <__mdiff+0x120>)
 800bf44:	f240 2137 	movw	r1, #567	@ 0x237
 800bf48:	483e      	ldr	r0, [pc, #248]	@ (800c044 <__mdiff+0x124>)
 800bf4a:	f001 fa89 	bl	800d460 <__assert_func>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf54:	4610      	mov	r0, r2
 800bf56:	b003      	add	sp, #12
 800bf58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf5c:	bfbc      	itt	lt
 800bf5e:	464b      	movlt	r3, r9
 800bf60:	46a1      	movlt	r9, r4
 800bf62:	4630      	mov	r0, r6
 800bf64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bf68:	bfba      	itte	lt
 800bf6a:	461c      	movlt	r4, r3
 800bf6c:	2501      	movlt	r5, #1
 800bf6e:	2500      	movge	r5, #0
 800bf70:	f7ff fcf6 	bl	800b960 <_Balloc>
 800bf74:	4602      	mov	r2, r0
 800bf76:	b918      	cbnz	r0, 800bf80 <__mdiff+0x60>
 800bf78:	4b31      	ldr	r3, [pc, #196]	@ (800c040 <__mdiff+0x120>)
 800bf7a:	f240 2145 	movw	r1, #581	@ 0x245
 800bf7e:	e7e3      	b.n	800bf48 <__mdiff+0x28>
 800bf80:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bf84:	6926      	ldr	r6, [r4, #16]
 800bf86:	60c5      	str	r5, [r0, #12]
 800bf88:	f109 0310 	add.w	r3, r9, #16
 800bf8c:	f109 0514 	add.w	r5, r9, #20
 800bf90:	f104 0e14 	add.w	lr, r4, #20
 800bf94:	f100 0b14 	add.w	fp, r0, #20
 800bf98:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bf9c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bfa0:	9301      	str	r3, [sp, #4]
 800bfa2:	46d9      	mov	r9, fp
 800bfa4:	f04f 0c00 	mov.w	ip, #0
 800bfa8:	9b01      	ldr	r3, [sp, #4]
 800bfaa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bfae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bfb2:	9301      	str	r3, [sp, #4]
 800bfb4:	fa1f f38a 	uxth.w	r3, sl
 800bfb8:	4619      	mov	r1, r3
 800bfba:	b283      	uxth	r3, r0
 800bfbc:	1acb      	subs	r3, r1, r3
 800bfbe:	0c00      	lsrs	r0, r0, #16
 800bfc0:	4463      	add	r3, ip
 800bfc2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bfc6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bfd0:	4576      	cmp	r6, lr
 800bfd2:	f849 3b04 	str.w	r3, [r9], #4
 800bfd6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bfda:	d8e5      	bhi.n	800bfa8 <__mdiff+0x88>
 800bfdc:	1b33      	subs	r3, r6, r4
 800bfde:	3b15      	subs	r3, #21
 800bfe0:	f023 0303 	bic.w	r3, r3, #3
 800bfe4:	3415      	adds	r4, #21
 800bfe6:	3304      	adds	r3, #4
 800bfe8:	42a6      	cmp	r6, r4
 800bfea:	bf38      	it	cc
 800bfec:	2304      	movcc	r3, #4
 800bfee:	441d      	add	r5, r3
 800bff0:	445b      	add	r3, fp
 800bff2:	461e      	mov	r6, r3
 800bff4:	462c      	mov	r4, r5
 800bff6:	4544      	cmp	r4, r8
 800bff8:	d30e      	bcc.n	800c018 <__mdiff+0xf8>
 800bffa:	f108 0103 	add.w	r1, r8, #3
 800bffe:	1b49      	subs	r1, r1, r5
 800c000:	f021 0103 	bic.w	r1, r1, #3
 800c004:	3d03      	subs	r5, #3
 800c006:	45a8      	cmp	r8, r5
 800c008:	bf38      	it	cc
 800c00a:	2100      	movcc	r1, #0
 800c00c:	440b      	add	r3, r1
 800c00e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c012:	b191      	cbz	r1, 800c03a <__mdiff+0x11a>
 800c014:	6117      	str	r7, [r2, #16]
 800c016:	e79d      	b.n	800bf54 <__mdiff+0x34>
 800c018:	f854 1b04 	ldr.w	r1, [r4], #4
 800c01c:	46e6      	mov	lr, ip
 800c01e:	0c08      	lsrs	r0, r1, #16
 800c020:	fa1c fc81 	uxtah	ip, ip, r1
 800c024:	4471      	add	r1, lr
 800c026:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c02a:	b289      	uxth	r1, r1
 800c02c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c030:	f846 1b04 	str.w	r1, [r6], #4
 800c034:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c038:	e7dd      	b.n	800bff6 <__mdiff+0xd6>
 800c03a:	3f01      	subs	r7, #1
 800c03c:	e7e7      	b.n	800c00e <__mdiff+0xee>
 800c03e:	bf00      	nop
 800c040:	0800e3d6 	.word	0x0800e3d6
 800c044:	0800e3e7 	.word	0x0800e3e7

0800c048 <__ulp>:
 800c048:	b082      	sub	sp, #8
 800c04a:	ed8d 0b00 	vstr	d0, [sp]
 800c04e:	9a01      	ldr	r2, [sp, #4]
 800c050:	4b0f      	ldr	r3, [pc, #60]	@ (800c090 <__ulp+0x48>)
 800c052:	4013      	ands	r3, r2
 800c054:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c058:	2b00      	cmp	r3, #0
 800c05a:	dc08      	bgt.n	800c06e <__ulp+0x26>
 800c05c:	425b      	negs	r3, r3
 800c05e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c062:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c066:	da04      	bge.n	800c072 <__ulp+0x2a>
 800c068:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c06c:	4113      	asrs	r3, r2
 800c06e:	2200      	movs	r2, #0
 800c070:	e008      	b.n	800c084 <__ulp+0x3c>
 800c072:	f1a2 0314 	sub.w	r3, r2, #20
 800c076:	2b1e      	cmp	r3, #30
 800c078:	bfda      	itte	le
 800c07a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c07e:	40da      	lsrle	r2, r3
 800c080:	2201      	movgt	r2, #1
 800c082:	2300      	movs	r3, #0
 800c084:	4619      	mov	r1, r3
 800c086:	4610      	mov	r0, r2
 800c088:	ec41 0b10 	vmov	d0, r0, r1
 800c08c:	b002      	add	sp, #8
 800c08e:	4770      	bx	lr
 800c090:	7ff00000 	.word	0x7ff00000

0800c094 <__b2d>:
 800c094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c098:	6906      	ldr	r6, [r0, #16]
 800c09a:	f100 0814 	add.w	r8, r0, #20
 800c09e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c0a2:	1f37      	subs	r7, r6, #4
 800c0a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c0a8:	4610      	mov	r0, r2
 800c0aa:	f7ff fd4b 	bl	800bb44 <__hi0bits>
 800c0ae:	f1c0 0320 	rsb	r3, r0, #32
 800c0b2:	280a      	cmp	r0, #10
 800c0b4:	600b      	str	r3, [r1, #0]
 800c0b6:	491b      	ldr	r1, [pc, #108]	@ (800c124 <__b2d+0x90>)
 800c0b8:	dc15      	bgt.n	800c0e6 <__b2d+0x52>
 800c0ba:	f1c0 0c0b 	rsb	ip, r0, #11
 800c0be:	fa22 f30c 	lsr.w	r3, r2, ip
 800c0c2:	45b8      	cmp	r8, r7
 800c0c4:	ea43 0501 	orr.w	r5, r3, r1
 800c0c8:	bf34      	ite	cc
 800c0ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c0ce:	2300      	movcs	r3, #0
 800c0d0:	3015      	adds	r0, #21
 800c0d2:	fa02 f000 	lsl.w	r0, r2, r0
 800c0d6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c0da:	4303      	orrs	r3, r0
 800c0dc:	461c      	mov	r4, r3
 800c0de:	ec45 4b10 	vmov	d0, r4, r5
 800c0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e6:	45b8      	cmp	r8, r7
 800c0e8:	bf3a      	itte	cc
 800c0ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c0ee:	f1a6 0708 	subcc.w	r7, r6, #8
 800c0f2:	2300      	movcs	r3, #0
 800c0f4:	380b      	subs	r0, #11
 800c0f6:	d012      	beq.n	800c11e <__b2d+0x8a>
 800c0f8:	f1c0 0120 	rsb	r1, r0, #32
 800c0fc:	fa23 f401 	lsr.w	r4, r3, r1
 800c100:	4082      	lsls	r2, r0
 800c102:	4322      	orrs	r2, r4
 800c104:	4547      	cmp	r7, r8
 800c106:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c10a:	bf8c      	ite	hi
 800c10c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c110:	2200      	movls	r2, #0
 800c112:	4083      	lsls	r3, r0
 800c114:	40ca      	lsrs	r2, r1
 800c116:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c11a:	4313      	orrs	r3, r2
 800c11c:	e7de      	b.n	800c0dc <__b2d+0x48>
 800c11e:	ea42 0501 	orr.w	r5, r2, r1
 800c122:	e7db      	b.n	800c0dc <__b2d+0x48>
 800c124:	3ff00000 	.word	0x3ff00000

0800c128 <__d2b>:
 800c128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c12c:	460f      	mov	r7, r1
 800c12e:	2101      	movs	r1, #1
 800c130:	ec59 8b10 	vmov	r8, r9, d0
 800c134:	4616      	mov	r6, r2
 800c136:	f7ff fc13 	bl	800b960 <_Balloc>
 800c13a:	4604      	mov	r4, r0
 800c13c:	b930      	cbnz	r0, 800c14c <__d2b+0x24>
 800c13e:	4602      	mov	r2, r0
 800c140:	4b23      	ldr	r3, [pc, #140]	@ (800c1d0 <__d2b+0xa8>)
 800c142:	4824      	ldr	r0, [pc, #144]	@ (800c1d4 <__d2b+0xac>)
 800c144:	f240 310f 	movw	r1, #783	@ 0x30f
 800c148:	f001 f98a 	bl	800d460 <__assert_func>
 800c14c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c150:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c154:	b10d      	cbz	r5, 800c15a <__d2b+0x32>
 800c156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c15a:	9301      	str	r3, [sp, #4]
 800c15c:	f1b8 0300 	subs.w	r3, r8, #0
 800c160:	d023      	beq.n	800c1aa <__d2b+0x82>
 800c162:	4668      	mov	r0, sp
 800c164:	9300      	str	r3, [sp, #0]
 800c166:	f7ff fd0c 	bl	800bb82 <__lo0bits>
 800c16a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c16e:	b1d0      	cbz	r0, 800c1a6 <__d2b+0x7e>
 800c170:	f1c0 0320 	rsb	r3, r0, #32
 800c174:	fa02 f303 	lsl.w	r3, r2, r3
 800c178:	430b      	orrs	r3, r1
 800c17a:	40c2      	lsrs	r2, r0
 800c17c:	6163      	str	r3, [r4, #20]
 800c17e:	9201      	str	r2, [sp, #4]
 800c180:	9b01      	ldr	r3, [sp, #4]
 800c182:	61a3      	str	r3, [r4, #24]
 800c184:	2b00      	cmp	r3, #0
 800c186:	bf0c      	ite	eq
 800c188:	2201      	moveq	r2, #1
 800c18a:	2202      	movne	r2, #2
 800c18c:	6122      	str	r2, [r4, #16]
 800c18e:	b1a5      	cbz	r5, 800c1ba <__d2b+0x92>
 800c190:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c194:	4405      	add	r5, r0
 800c196:	603d      	str	r5, [r7, #0]
 800c198:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c19c:	6030      	str	r0, [r6, #0]
 800c19e:	4620      	mov	r0, r4
 800c1a0:	b003      	add	sp, #12
 800c1a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1a6:	6161      	str	r1, [r4, #20]
 800c1a8:	e7ea      	b.n	800c180 <__d2b+0x58>
 800c1aa:	a801      	add	r0, sp, #4
 800c1ac:	f7ff fce9 	bl	800bb82 <__lo0bits>
 800c1b0:	9b01      	ldr	r3, [sp, #4]
 800c1b2:	6163      	str	r3, [r4, #20]
 800c1b4:	3020      	adds	r0, #32
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	e7e8      	b.n	800c18c <__d2b+0x64>
 800c1ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c1be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c1c2:	6038      	str	r0, [r7, #0]
 800c1c4:	6918      	ldr	r0, [r3, #16]
 800c1c6:	f7ff fcbd 	bl	800bb44 <__hi0bits>
 800c1ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c1ce:	e7e5      	b.n	800c19c <__d2b+0x74>
 800c1d0:	0800e3d6 	.word	0x0800e3d6
 800c1d4:	0800e3e7 	.word	0x0800e3e7

0800c1d8 <__ratio>:
 800c1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1dc:	b085      	sub	sp, #20
 800c1de:	e9cd 1000 	strd	r1, r0, [sp]
 800c1e2:	a902      	add	r1, sp, #8
 800c1e4:	f7ff ff56 	bl	800c094 <__b2d>
 800c1e8:	9800      	ldr	r0, [sp, #0]
 800c1ea:	a903      	add	r1, sp, #12
 800c1ec:	ec55 4b10 	vmov	r4, r5, d0
 800c1f0:	f7ff ff50 	bl	800c094 <__b2d>
 800c1f4:	9b01      	ldr	r3, [sp, #4]
 800c1f6:	6919      	ldr	r1, [r3, #16]
 800c1f8:	9b00      	ldr	r3, [sp, #0]
 800c1fa:	691b      	ldr	r3, [r3, #16]
 800c1fc:	1ac9      	subs	r1, r1, r3
 800c1fe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c202:	1a9b      	subs	r3, r3, r2
 800c204:	ec5b ab10 	vmov	sl, fp, d0
 800c208:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	bfce      	itee	gt
 800c210:	462a      	movgt	r2, r5
 800c212:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c216:	465a      	movle	r2, fp
 800c218:	462f      	mov	r7, r5
 800c21a:	46d9      	mov	r9, fp
 800c21c:	bfcc      	ite	gt
 800c21e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c222:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c226:	464b      	mov	r3, r9
 800c228:	4652      	mov	r2, sl
 800c22a:	4620      	mov	r0, r4
 800c22c:	4639      	mov	r1, r7
 800c22e:	f7f4 fb0d 	bl	800084c <__aeabi_ddiv>
 800c232:	ec41 0b10 	vmov	d0, r0, r1
 800c236:	b005      	add	sp, #20
 800c238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c23c <__copybits>:
 800c23c:	3901      	subs	r1, #1
 800c23e:	b570      	push	{r4, r5, r6, lr}
 800c240:	1149      	asrs	r1, r1, #5
 800c242:	6914      	ldr	r4, [r2, #16]
 800c244:	3101      	adds	r1, #1
 800c246:	f102 0314 	add.w	r3, r2, #20
 800c24a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c24e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c252:	1f05      	subs	r5, r0, #4
 800c254:	42a3      	cmp	r3, r4
 800c256:	d30c      	bcc.n	800c272 <__copybits+0x36>
 800c258:	1aa3      	subs	r3, r4, r2
 800c25a:	3b11      	subs	r3, #17
 800c25c:	f023 0303 	bic.w	r3, r3, #3
 800c260:	3211      	adds	r2, #17
 800c262:	42a2      	cmp	r2, r4
 800c264:	bf88      	it	hi
 800c266:	2300      	movhi	r3, #0
 800c268:	4418      	add	r0, r3
 800c26a:	2300      	movs	r3, #0
 800c26c:	4288      	cmp	r0, r1
 800c26e:	d305      	bcc.n	800c27c <__copybits+0x40>
 800c270:	bd70      	pop	{r4, r5, r6, pc}
 800c272:	f853 6b04 	ldr.w	r6, [r3], #4
 800c276:	f845 6f04 	str.w	r6, [r5, #4]!
 800c27a:	e7eb      	b.n	800c254 <__copybits+0x18>
 800c27c:	f840 3b04 	str.w	r3, [r0], #4
 800c280:	e7f4      	b.n	800c26c <__copybits+0x30>

0800c282 <__any_on>:
 800c282:	f100 0214 	add.w	r2, r0, #20
 800c286:	6900      	ldr	r0, [r0, #16]
 800c288:	114b      	asrs	r3, r1, #5
 800c28a:	4298      	cmp	r0, r3
 800c28c:	b510      	push	{r4, lr}
 800c28e:	db11      	blt.n	800c2b4 <__any_on+0x32>
 800c290:	dd0a      	ble.n	800c2a8 <__any_on+0x26>
 800c292:	f011 011f 	ands.w	r1, r1, #31
 800c296:	d007      	beq.n	800c2a8 <__any_on+0x26>
 800c298:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c29c:	fa24 f001 	lsr.w	r0, r4, r1
 800c2a0:	fa00 f101 	lsl.w	r1, r0, r1
 800c2a4:	428c      	cmp	r4, r1
 800c2a6:	d10b      	bne.n	800c2c0 <__any_on+0x3e>
 800c2a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d803      	bhi.n	800c2b8 <__any_on+0x36>
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	bd10      	pop	{r4, pc}
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	e7f7      	b.n	800c2a8 <__any_on+0x26>
 800c2b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c2bc:	2900      	cmp	r1, #0
 800c2be:	d0f5      	beq.n	800c2ac <__any_on+0x2a>
 800c2c0:	2001      	movs	r0, #1
 800c2c2:	e7f6      	b.n	800c2b2 <__any_on+0x30>

0800c2c4 <sulp>:
 800c2c4:	b570      	push	{r4, r5, r6, lr}
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	460d      	mov	r5, r1
 800c2ca:	ec45 4b10 	vmov	d0, r4, r5
 800c2ce:	4616      	mov	r6, r2
 800c2d0:	f7ff feba 	bl	800c048 <__ulp>
 800c2d4:	ec51 0b10 	vmov	r0, r1, d0
 800c2d8:	b17e      	cbz	r6, 800c2fa <sulp+0x36>
 800c2da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c2de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	dd09      	ble.n	800c2fa <sulp+0x36>
 800c2e6:	051b      	lsls	r3, r3, #20
 800c2e8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c2ec:	2400      	movs	r4, #0
 800c2ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c2f2:	4622      	mov	r2, r4
 800c2f4:	462b      	mov	r3, r5
 800c2f6:	f7f4 f97f 	bl	80005f8 <__aeabi_dmul>
 800c2fa:	ec41 0b10 	vmov	d0, r0, r1
 800c2fe:	bd70      	pop	{r4, r5, r6, pc}

0800c300 <_strtod_l>:
 800c300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c304:	b09f      	sub	sp, #124	@ 0x7c
 800c306:	460c      	mov	r4, r1
 800c308:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c30a:	2200      	movs	r2, #0
 800c30c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c30e:	9005      	str	r0, [sp, #20]
 800c310:	f04f 0a00 	mov.w	sl, #0
 800c314:	f04f 0b00 	mov.w	fp, #0
 800c318:	460a      	mov	r2, r1
 800c31a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c31c:	7811      	ldrb	r1, [r2, #0]
 800c31e:	292b      	cmp	r1, #43	@ 0x2b
 800c320:	d04a      	beq.n	800c3b8 <_strtod_l+0xb8>
 800c322:	d838      	bhi.n	800c396 <_strtod_l+0x96>
 800c324:	290d      	cmp	r1, #13
 800c326:	d832      	bhi.n	800c38e <_strtod_l+0x8e>
 800c328:	2908      	cmp	r1, #8
 800c32a:	d832      	bhi.n	800c392 <_strtod_l+0x92>
 800c32c:	2900      	cmp	r1, #0
 800c32e:	d03b      	beq.n	800c3a8 <_strtod_l+0xa8>
 800c330:	2200      	movs	r2, #0
 800c332:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c334:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c336:	782a      	ldrb	r2, [r5, #0]
 800c338:	2a30      	cmp	r2, #48	@ 0x30
 800c33a:	f040 80b3 	bne.w	800c4a4 <_strtod_l+0x1a4>
 800c33e:	786a      	ldrb	r2, [r5, #1]
 800c340:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c344:	2a58      	cmp	r2, #88	@ 0x58
 800c346:	d16e      	bne.n	800c426 <_strtod_l+0x126>
 800c348:	9302      	str	r3, [sp, #8]
 800c34a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c34c:	9301      	str	r3, [sp, #4]
 800c34e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c350:	9300      	str	r3, [sp, #0]
 800c352:	4a8e      	ldr	r2, [pc, #568]	@ (800c58c <_strtod_l+0x28c>)
 800c354:	9805      	ldr	r0, [sp, #20]
 800c356:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c358:	a919      	add	r1, sp, #100	@ 0x64
 800c35a:	f001 f91b 	bl	800d594 <__gethex>
 800c35e:	f010 060f 	ands.w	r6, r0, #15
 800c362:	4604      	mov	r4, r0
 800c364:	d005      	beq.n	800c372 <_strtod_l+0x72>
 800c366:	2e06      	cmp	r6, #6
 800c368:	d128      	bne.n	800c3bc <_strtod_l+0xbc>
 800c36a:	3501      	adds	r5, #1
 800c36c:	2300      	movs	r3, #0
 800c36e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c370:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c372:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c374:	2b00      	cmp	r3, #0
 800c376:	f040 858e 	bne.w	800ce96 <_strtod_l+0xb96>
 800c37a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c37c:	b1cb      	cbz	r3, 800c3b2 <_strtod_l+0xb2>
 800c37e:	4652      	mov	r2, sl
 800c380:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c384:	ec43 2b10 	vmov	d0, r2, r3
 800c388:	b01f      	add	sp, #124	@ 0x7c
 800c38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c38e:	2920      	cmp	r1, #32
 800c390:	d1ce      	bne.n	800c330 <_strtod_l+0x30>
 800c392:	3201      	adds	r2, #1
 800c394:	e7c1      	b.n	800c31a <_strtod_l+0x1a>
 800c396:	292d      	cmp	r1, #45	@ 0x2d
 800c398:	d1ca      	bne.n	800c330 <_strtod_l+0x30>
 800c39a:	2101      	movs	r1, #1
 800c39c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c39e:	1c51      	adds	r1, r2, #1
 800c3a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800c3a2:	7852      	ldrb	r2, [r2, #1]
 800c3a4:	2a00      	cmp	r2, #0
 800c3a6:	d1c5      	bne.n	800c334 <_strtod_l+0x34>
 800c3a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c3aa:	9419      	str	r4, [sp, #100]	@ 0x64
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f040 8570 	bne.w	800ce92 <_strtod_l+0xb92>
 800c3b2:	4652      	mov	r2, sl
 800c3b4:	465b      	mov	r3, fp
 800c3b6:	e7e5      	b.n	800c384 <_strtod_l+0x84>
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	e7ef      	b.n	800c39c <_strtod_l+0x9c>
 800c3bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c3be:	b13a      	cbz	r2, 800c3d0 <_strtod_l+0xd0>
 800c3c0:	2135      	movs	r1, #53	@ 0x35
 800c3c2:	a81c      	add	r0, sp, #112	@ 0x70
 800c3c4:	f7ff ff3a 	bl	800c23c <__copybits>
 800c3c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c3ca:	9805      	ldr	r0, [sp, #20]
 800c3cc:	f7ff fb08 	bl	800b9e0 <_Bfree>
 800c3d0:	3e01      	subs	r6, #1
 800c3d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c3d4:	2e04      	cmp	r6, #4
 800c3d6:	d806      	bhi.n	800c3e6 <_strtod_l+0xe6>
 800c3d8:	e8df f006 	tbb	[pc, r6]
 800c3dc:	201d0314 	.word	0x201d0314
 800c3e0:	14          	.byte	0x14
 800c3e1:	00          	.byte	0x00
 800c3e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c3e6:	05e1      	lsls	r1, r4, #23
 800c3e8:	bf48      	it	mi
 800c3ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c3ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c3f2:	0d1b      	lsrs	r3, r3, #20
 800c3f4:	051b      	lsls	r3, r3, #20
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d1bb      	bne.n	800c372 <_strtod_l+0x72>
 800c3fa:	f7fe fb21 	bl	800aa40 <__errno>
 800c3fe:	2322      	movs	r3, #34	@ 0x22
 800c400:	6003      	str	r3, [r0, #0]
 800c402:	e7b6      	b.n	800c372 <_strtod_l+0x72>
 800c404:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c408:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c40c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c410:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c414:	e7e7      	b.n	800c3e6 <_strtod_l+0xe6>
 800c416:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c594 <_strtod_l+0x294>
 800c41a:	e7e4      	b.n	800c3e6 <_strtod_l+0xe6>
 800c41c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c420:	f04f 3aff 	mov.w	sl, #4294967295
 800c424:	e7df      	b.n	800c3e6 <_strtod_l+0xe6>
 800c426:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c428:	1c5a      	adds	r2, r3, #1
 800c42a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c42c:	785b      	ldrb	r3, [r3, #1]
 800c42e:	2b30      	cmp	r3, #48	@ 0x30
 800c430:	d0f9      	beq.n	800c426 <_strtod_l+0x126>
 800c432:	2b00      	cmp	r3, #0
 800c434:	d09d      	beq.n	800c372 <_strtod_l+0x72>
 800c436:	2301      	movs	r3, #1
 800c438:	9309      	str	r3, [sp, #36]	@ 0x24
 800c43a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c43c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c43e:	2300      	movs	r3, #0
 800c440:	9308      	str	r3, [sp, #32]
 800c442:	930a      	str	r3, [sp, #40]	@ 0x28
 800c444:	461f      	mov	r7, r3
 800c446:	220a      	movs	r2, #10
 800c448:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c44a:	7805      	ldrb	r5, [r0, #0]
 800c44c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c450:	b2d9      	uxtb	r1, r3
 800c452:	2909      	cmp	r1, #9
 800c454:	d928      	bls.n	800c4a8 <_strtod_l+0x1a8>
 800c456:	494e      	ldr	r1, [pc, #312]	@ (800c590 <_strtod_l+0x290>)
 800c458:	2201      	movs	r2, #1
 800c45a:	f000 ffd5 	bl	800d408 <strncmp>
 800c45e:	2800      	cmp	r0, #0
 800c460:	d032      	beq.n	800c4c8 <_strtod_l+0x1c8>
 800c462:	2000      	movs	r0, #0
 800c464:	462a      	mov	r2, r5
 800c466:	4681      	mov	r9, r0
 800c468:	463d      	mov	r5, r7
 800c46a:	4603      	mov	r3, r0
 800c46c:	2a65      	cmp	r2, #101	@ 0x65
 800c46e:	d001      	beq.n	800c474 <_strtod_l+0x174>
 800c470:	2a45      	cmp	r2, #69	@ 0x45
 800c472:	d114      	bne.n	800c49e <_strtod_l+0x19e>
 800c474:	b91d      	cbnz	r5, 800c47e <_strtod_l+0x17e>
 800c476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c478:	4302      	orrs	r2, r0
 800c47a:	d095      	beq.n	800c3a8 <_strtod_l+0xa8>
 800c47c:	2500      	movs	r5, #0
 800c47e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c480:	1c62      	adds	r2, r4, #1
 800c482:	9219      	str	r2, [sp, #100]	@ 0x64
 800c484:	7862      	ldrb	r2, [r4, #1]
 800c486:	2a2b      	cmp	r2, #43	@ 0x2b
 800c488:	d077      	beq.n	800c57a <_strtod_l+0x27a>
 800c48a:	2a2d      	cmp	r2, #45	@ 0x2d
 800c48c:	d07b      	beq.n	800c586 <_strtod_l+0x286>
 800c48e:	f04f 0c00 	mov.w	ip, #0
 800c492:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c496:	2909      	cmp	r1, #9
 800c498:	f240 8082 	bls.w	800c5a0 <_strtod_l+0x2a0>
 800c49c:	9419      	str	r4, [sp, #100]	@ 0x64
 800c49e:	f04f 0800 	mov.w	r8, #0
 800c4a2:	e0a2      	b.n	800c5ea <_strtod_l+0x2ea>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	e7c7      	b.n	800c438 <_strtod_l+0x138>
 800c4a8:	2f08      	cmp	r7, #8
 800c4aa:	bfd5      	itete	le
 800c4ac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c4ae:	9908      	ldrgt	r1, [sp, #32]
 800c4b0:	fb02 3301 	mlale	r3, r2, r1, r3
 800c4b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c4b8:	f100 0001 	add.w	r0, r0, #1
 800c4bc:	bfd4      	ite	le
 800c4be:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c4c0:	9308      	strgt	r3, [sp, #32]
 800c4c2:	3701      	adds	r7, #1
 800c4c4:	9019      	str	r0, [sp, #100]	@ 0x64
 800c4c6:	e7bf      	b.n	800c448 <_strtod_l+0x148>
 800c4c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4ca:	1c5a      	adds	r2, r3, #1
 800c4cc:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4ce:	785a      	ldrb	r2, [r3, #1]
 800c4d0:	b37f      	cbz	r7, 800c532 <_strtod_l+0x232>
 800c4d2:	4681      	mov	r9, r0
 800c4d4:	463d      	mov	r5, r7
 800c4d6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c4da:	2b09      	cmp	r3, #9
 800c4dc:	d912      	bls.n	800c504 <_strtod_l+0x204>
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e7c4      	b.n	800c46c <_strtod_l+0x16c>
 800c4e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4e4:	1c5a      	adds	r2, r3, #1
 800c4e6:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4e8:	785a      	ldrb	r2, [r3, #1]
 800c4ea:	3001      	adds	r0, #1
 800c4ec:	2a30      	cmp	r2, #48	@ 0x30
 800c4ee:	d0f8      	beq.n	800c4e2 <_strtod_l+0x1e2>
 800c4f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c4f4:	2b08      	cmp	r3, #8
 800c4f6:	f200 84d3 	bhi.w	800cea0 <_strtod_l+0xba0>
 800c4fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800c4fe:	4681      	mov	r9, r0
 800c500:	2000      	movs	r0, #0
 800c502:	4605      	mov	r5, r0
 800c504:	3a30      	subs	r2, #48	@ 0x30
 800c506:	f100 0301 	add.w	r3, r0, #1
 800c50a:	d02a      	beq.n	800c562 <_strtod_l+0x262>
 800c50c:	4499      	add	r9, r3
 800c50e:	eb00 0c05 	add.w	ip, r0, r5
 800c512:	462b      	mov	r3, r5
 800c514:	210a      	movs	r1, #10
 800c516:	4563      	cmp	r3, ip
 800c518:	d10d      	bne.n	800c536 <_strtod_l+0x236>
 800c51a:	1c69      	adds	r1, r5, #1
 800c51c:	4401      	add	r1, r0
 800c51e:	4428      	add	r0, r5
 800c520:	2808      	cmp	r0, #8
 800c522:	dc16      	bgt.n	800c552 <_strtod_l+0x252>
 800c524:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c526:	230a      	movs	r3, #10
 800c528:	fb03 2300 	mla	r3, r3, r0, r2
 800c52c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c52e:	2300      	movs	r3, #0
 800c530:	e018      	b.n	800c564 <_strtod_l+0x264>
 800c532:	4638      	mov	r0, r7
 800c534:	e7da      	b.n	800c4ec <_strtod_l+0x1ec>
 800c536:	2b08      	cmp	r3, #8
 800c538:	f103 0301 	add.w	r3, r3, #1
 800c53c:	dc03      	bgt.n	800c546 <_strtod_l+0x246>
 800c53e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c540:	434e      	muls	r6, r1
 800c542:	960a      	str	r6, [sp, #40]	@ 0x28
 800c544:	e7e7      	b.n	800c516 <_strtod_l+0x216>
 800c546:	2b10      	cmp	r3, #16
 800c548:	bfde      	ittt	le
 800c54a:	9e08      	ldrle	r6, [sp, #32]
 800c54c:	434e      	mulle	r6, r1
 800c54e:	9608      	strle	r6, [sp, #32]
 800c550:	e7e1      	b.n	800c516 <_strtod_l+0x216>
 800c552:	280f      	cmp	r0, #15
 800c554:	dceb      	bgt.n	800c52e <_strtod_l+0x22e>
 800c556:	9808      	ldr	r0, [sp, #32]
 800c558:	230a      	movs	r3, #10
 800c55a:	fb03 2300 	mla	r3, r3, r0, r2
 800c55e:	9308      	str	r3, [sp, #32]
 800c560:	e7e5      	b.n	800c52e <_strtod_l+0x22e>
 800c562:	4629      	mov	r1, r5
 800c564:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c566:	1c50      	adds	r0, r2, #1
 800c568:	9019      	str	r0, [sp, #100]	@ 0x64
 800c56a:	7852      	ldrb	r2, [r2, #1]
 800c56c:	4618      	mov	r0, r3
 800c56e:	460d      	mov	r5, r1
 800c570:	e7b1      	b.n	800c4d6 <_strtod_l+0x1d6>
 800c572:	f04f 0900 	mov.w	r9, #0
 800c576:	2301      	movs	r3, #1
 800c578:	e77d      	b.n	800c476 <_strtod_l+0x176>
 800c57a:	f04f 0c00 	mov.w	ip, #0
 800c57e:	1ca2      	adds	r2, r4, #2
 800c580:	9219      	str	r2, [sp, #100]	@ 0x64
 800c582:	78a2      	ldrb	r2, [r4, #2]
 800c584:	e785      	b.n	800c492 <_strtod_l+0x192>
 800c586:	f04f 0c01 	mov.w	ip, #1
 800c58a:	e7f8      	b.n	800c57e <_strtod_l+0x27e>
 800c58c:	0800e558 	.word	0x0800e558
 800c590:	0800e540 	.word	0x0800e540
 800c594:	7ff00000 	.word	0x7ff00000
 800c598:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c59a:	1c51      	adds	r1, r2, #1
 800c59c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c59e:	7852      	ldrb	r2, [r2, #1]
 800c5a0:	2a30      	cmp	r2, #48	@ 0x30
 800c5a2:	d0f9      	beq.n	800c598 <_strtod_l+0x298>
 800c5a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c5a8:	2908      	cmp	r1, #8
 800c5aa:	f63f af78 	bhi.w	800c49e <_strtod_l+0x19e>
 800c5ae:	3a30      	subs	r2, #48	@ 0x30
 800c5b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c5b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c5b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c5b6:	f04f 080a 	mov.w	r8, #10
 800c5ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c5bc:	1c56      	adds	r6, r2, #1
 800c5be:	9619      	str	r6, [sp, #100]	@ 0x64
 800c5c0:	7852      	ldrb	r2, [r2, #1]
 800c5c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c5c6:	f1be 0f09 	cmp.w	lr, #9
 800c5ca:	d939      	bls.n	800c640 <_strtod_l+0x340>
 800c5cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c5ce:	1a76      	subs	r6, r6, r1
 800c5d0:	2e08      	cmp	r6, #8
 800c5d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c5d6:	dc03      	bgt.n	800c5e0 <_strtod_l+0x2e0>
 800c5d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c5da:	4588      	cmp	r8, r1
 800c5dc:	bfa8      	it	ge
 800c5de:	4688      	movge	r8, r1
 800c5e0:	f1bc 0f00 	cmp.w	ip, #0
 800c5e4:	d001      	beq.n	800c5ea <_strtod_l+0x2ea>
 800c5e6:	f1c8 0800 	rsb	r8, r8, #0
 800c5ea:	2d00      	cmp	r5, #0
 800c5ec:	d14e      	bne.n	800c68c <_strtod_l+0x38c>
 800c5ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5f0:	4308      	orrs	r0, r1
 800c5f2:	f47f aebe 	bne.w	800c372 <_strtod_l+0x72>
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f47f aed6 	bne.w	800c3a8 <_strtod_l+0xa8>
 800c5fc:	2a69      	cmp	r2, #105	@ 0x69
 800c5fe:	d028      	beq.n	800c652 <_strtod_l+0x352>
 800c600:	dc25      	bgt.n	800c64e <_strtod_l+0x34e>
 800c602:	2a49      	cmp	r2, #73	@ 0x49
 800c604:	d025      	beq.n	800c652 <_strtod_l+0x352>
 800c606:	2a4e      	cmp	r2, #78	@ 0x4e
 800c608:	f47f aece 	bne.w	800c3a8 <_strtod_l+0xa8>
 800c60c:	499b      	ldr	r1, [pc, #620]	@ (800c87c <_strtod_l+0x57c>)
 800c60e:	a819      	add	r0, sp, #100	@ 0x64
 800c610:	f001 f9e2 	bl	800d9d8 <__match>
 800c614:	2800      	cmp	r0, #0
 800c616:	f43f aec7 	beq.w	800c3a8 <_strtod_l+0xa8>
 800c61a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	2b28      	cmp	r3, #40	@ 0x28
 800c620:	d12e      	bne.n	800c680 <_strtod_l+0x380>
 800c622:	4997      	ldr	r1, [pc, #604]	@ (800c880 <_strtod_l+0x580>)
 800c624:	aa1c      	add	r2, sp, #112	@ 0x70
 800c626:	a819      	add	r0, sp, #100	@ 0x64
 800c628:	f001 f9ea 	bl	800da00 <__hexnan>
 800c62c:	2805      	cmp	r0, #5
 800c62e:	d127      	bne.n	800c680 <_strtod_l+0x380>
 800c630:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c632:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c636:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c63a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c63e:	e698      	b.n	800c372 <_strtod_l+0x72>
 800c640:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c642:	fb08 2101 	mla	r1, r8, r1, r2
 800c646:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c64a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c64c:	e7b5      	b.n	800c5ba <_strtod_l+0x2ba>
 800c64e:	2a6e      	cmp	r2, #110	@ 0x6e
 800c650:	e7da      	b.n	800c608 <_strtod_l+0x308>
 800c652:	498c      	ldr	r1, [pc, #560]	@ (800c884 <_strtod_l+0x584>)
 800c654:	a819      	add	r0, sp, #100	@ 0x64
 800c656:	f001 f9bf 	bl	800d9d8 <__match>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	f43f aea4 	beq.w	800c3a8 <_strtod_l+0xa8>
 800c660:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c662:	4989      	ldr	r1, [pc, #548]	@ (800c888 <_strtod_l+0x588>)
 800c664:	3b01      	subs	r3, #1
 800c666:	a819      	add	r0, sp, #100	@ 0x64
 800c668:	9319      	str	r3, [sp, #100]	@ 0x64
 800c66a:	f001 f9b5 	bl	800d9d8 <__match>
 800c66e:	b910      	cbnz	r0, 800c676 <_strtod_l+0x376>
 800c670:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c672:	3301      	adds	r3, #1
 800c674:	9319      	str	r3, [sp, #100]	@ 0x64
 800c676:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c898 <_strtod_l+0x598>
 800c67a:	f04f 0a00 	mov.w	sl, #0
 800c67e:	e678      	b.n	800c372 <_strtod_l+0x72>
 800c680:	4882      	ldr	r0, [pc, #520]	@ (800c88c <_strtod_l+0x58c>)
 800c682:	f000 fee5 	bl	800d450 <nan>
 800c686:	ec5b ab10 	vmov	sl, fp, d0
 800c68a:	e672      	b.n	800c372 <_strtod_l+0x72>
 800c68c:	eba8 0309 	sub.w	r3, r8, r9
 800c690:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c692:	9309      	str	r3, [sp, #36]	@ 0x24
 800c694:	2f00      	cmp	r7, #0
 800c696:	bf08      	it	eq
 800c698:	462f      	moveq	r7, r5
 800c69a:	2d10      	cmp	r5, #16
 800c69c:	462c      	mov	r4, r5
 800c69e:	bfa8      	it	ge
 800c6a0:	2410      	movge	r4, #16
 800c6a2:	f7f3 ff2f 	bl	8000504 <__aeabi_ui2d>
 800c6a6:	2d09      	cmp	r5, #9
 800c6a8:	4682      	mov	sl, r0
 800c6aa:	468b      	mov	fp, r1
 800c6ac:	dc13      	bgt.n	800c6d6 <_strtod_l+0x3d6>
 800c6ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	f43f ae5e 	beq.w	800c372 <_strtod_l+0x72>
 800c6b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6b8:	dd78      	ble.n	800c7ac <_strtod_l+0x4ac>
 800c6ba:	2b16      	cmp	r3, #22
 800c6bc:	dc5f      	bgt.n	800c77e <_strtod_l+0x47e>
 800c6be:	4974      	ldr	r1, [pc, #464]	@ (800c890 <_strtod_l+0x590>)
 800c6c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c6c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6c8:	4652      	mov	r2, sl
 800c6ca:	465b      	mov	r3, fp
 800c6cc:	f7f3 ff94 	bl	80005f8 <__aeabi_dmul>
 800c6d0:	4682      	mov	sl, r0
 800c6d2:	468b      	mov	fp, r1
 800c6d4:	e64d      	b.n	800c372 <_strtod_l+0x72>
 800c6d6:	4b6e      	ldr	r3, [pc, #440]	@ (800c890 <_strtod_l+0x590>)
 800c6d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c6dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c6e0:	f7f3 ff8a 	bl	80005f8 <__aeabi_dmul>
 800c6e4:	4682      	mov	sl, r0
 800c6e6:	9808      	ldr	r0, [sp, #32]
 800c6e8:	468b      	mov	fp, r1
 800c6ea:	f7f3 ff0b 	bl	8000504 <__aeabi_ui2d>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	4650      	mov	r0, sl
 800c6f4:	4659      	mov	r1, fp
 800c6f6:	f7f3 fdc9 	bl	800028c <__adddf3>
 800c6fa:	2d0f      	cmp	r5, #15
 800c6fc:	4682      	mov	sl, r0
 800c6fe:	468b      	mov	fp, r1
 800c700:	ddd5      	ble.n	800c6ae <_strtod_l+0x3ae>
 800c702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c704:	1b2c      	subs	r4, r5, r4
 800c706:	441c      	add	r4, r3
 800c708:	2c00      	cmp	r4, #0
 800c70a:	f340 8096 	ble.w	800c83a <_strtod_l+0x53a>
 800c70e:	f014 030f 	ands.w	r3, r4, #15
 800c712:	d00a      	beq.n	800c72a <_strtod_l+0x42a>
 800c714:	495e      	ldr	r1, [pc, #376]	@ (800c890 <_strtod_l+0x590>)
 800c716:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c71a:	4652      	mov	r2, sl
 800c71c:	465b      	mov	r3, fp
 800c71e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c722:	f7f3 ff69 	bl	80005f8 <__aeabi_dmul>
 800c726:	4682      	mov	sl, r0
 800c728:	468b      	mov	fp, r1
 800c72a:	f034 040f 	bics.w	r4, r4, #15
 800c72e:	d073      	beq.n	800c818 <_strtod_l+0x518>
 800c730:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c734:	dd48      	ble.n	800c7c8 <_strtod_l+0x4c8>
 800c736:	2400      	movs	r4, #0
 800c738:	46a0      	mov	r8, r4
 800c73a:	940a      	str	r4, [sp, #40]	@ 0x28
 800c73c:	46a1      	mov	r9, r4
 800c73e:	9a05      	ldr	r2, [sp, #20]
 800c740:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c898 <_strtod_l+0x598>
 800c744:	2322      	movs	r3, #34	@ 0x22
 800c746:	6013      	str	r3, [r2, #0]
 800c748:	f04f 0a00 	mov.w	sl, #0
 800c74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c74e:	2b00      	cmp	r3, #0
 800c750:	f43f ae0f 	beq.w	800c372 <_strtod_l+0x72>
 800c754:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c756:	9805      	ldr	r0, [sp, #20]
 800c758:	f7ff f942 	bl	800b9e0 <_Bfree>
 800c75c:	9805      	ldr	r0, [sp, #20]
 800c75e:	4649      	mov	r1, r9
 800c760:	f7ff f93e 	bl	800b9e0 <_Bfree>
 800c764:	9805      	ldr	r0, [sp, #20]
 800c766:	4641      	mov	r1, r8
 800c768:	f7ff f93a 	bl	800b9e0 <_Bfree>
 800c76c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c76e:	9805      	ldr	r0, [sp, #20]
 800c770:	f7ff f936 	bl	800b9e0 <_Bfree>
 800c774:	9805      	ldr	r0, [sp, #20]
 800c776:	4621      	mov	r1, r4
 800c778:	f7ff f932 	bl	800b9e0 <_Bfree>
 800c77c:	e5f9      	b.n	800c372 <_strtod_l+0x72>
 800c77e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c780:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c784:	4293      	cmp	r3, r2
 800c786:	dbbc      	blt.n	800c702 <_strtod_l+0x402>
 800c788:	4c41      	ldr	r4, [pc, #260]	@ (800c890 <_strtod_l+0x590>)
 800c78a:	f1c5 050f 	rsb	r5, r5, #15
 800c78e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c792:	4652      	mov	r2, sl
 800c794:	465b      	mov	r3, fp
 800c796:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c79a:	f7f3 ff2d 	bl	80005f8 <__aeabi_dmul>
 800c79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7a0:	1b5d      	subs	r5, r3, r5
 800c7a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c7a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c7aa:	e78f      	b.n	800c6cc <_strtod_l+0x3cc>
 800c7ac:	3316      	adds	r3, #22
 800c7ae:	dba8      	blt.n	800c702 <_strtod_l+0x402>
 800c7b0:	4b37      	ldr	r3, [pc, #220]	@ (800c890 <_strtod_l+0x590>)
 800c7b2:	eba9 0808 	sub.w	r8, r9, r8
 800c7b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c7ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c7be:	4650      	mov	r0, sl
 800c7c0:	4659      	mov	r1, fp
 800c7c2:	f7f4 f843 	bl	800084c <__aeabi_ddiv>
 800c7c6:	e783      	b.n	800c6d0 <_strtod_l+0x3d0>
 800c7c8:	4b32      	ldr	r3, [pc, #200]	@ (800c894 <_strtod_l+0x594>)
 800c7ca:	9308      	str	r3, [sp, #32]
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	1124      	asrs	r4, r4, #4
 800c7d0:	4650      	mov	r0, sl
 800c7d2:	4659      	mov	r1, fp
 800c7d4:	461e      	mov	r6, r3
 800c7d6:	2c01      	cmp	r4, #1
 800c7d8:	dc21      	bgt.n	800c81e <_strtod_l+0x51e>
 800c7da:	b10b      	cbz	r3, 800c7e0 <_strtod_l+0x4e0>
 800c7dc:	4682      	mov	sl, r0
 800c7de:	468b      	mov	fp, r1
 800c7e0:	492c      	ldr	r1, [pc, #176]	@ (800c894 <_strtod_l+0x594>)
 800c7e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c7e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c7ea:	4652      	mov	r2, sl
 800c7ec:	465b      	mov	r3, fp
 800c7ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7f2:	f7f3 ff01 	bl	80005f8 <__aeabi_dmul>
 800c7f6:	4b28      	ldr	r3, [pc, #160]	@ (800c898 <_strtod_l+0x598>)
 800c7f8:	460a      	mov	r2, r1
 800c7fa:	400b      	ands	r3, r1
 800c7fc:	4927      	ldr	r1, [pc, #156]	@ (800c89c <_strtod_l+0x59c>)
 800c7fe:	428b      	cmp	r3, r1
 800c800:	4682      	mov	sl, r0
 800c802:	d898      	bhi.n	800c736 <_strtod_l+0x436>
 800c804:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c808:	428b      	cmp	r3, r1
 800c80a:	bf86      	itte	hi
 800c80c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c8a0 <_strtod_l+0x5a0>
 800c810:	f04f 3aff 	movhi.w	sl, #4294967295
 800c814:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c818:	2300      	movs	r3, #0
 800c81a:	9308      	str	r3, [sp, #32]
 800c81c:	e07a      	b.n	800c914 <_strtod_l+0x614>
 800c81e:	07e2      	lsls	r2, r4, #31
 800c820:	d505      	bpl.n	800c82e <_strtod_l+0x52e>
 800c822:	9b08      	ldr	r3, [sp, #32]
 800c824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c828:	f7f3 fee6 	bl	80005f8 <__aeabi_dmul>
 800c82c:	2301      	movs	r3, #1
 800c82e:	9a08      	ldr	r2, [sp, #32]
 800c830:	3208      	adds	r2, #8
 800c832:	3601      	adds	r6, #1
 800c834:	1064      	asrs	r4, r4, #1
 800c836:	9208      	str	r2, [sp, #32]
 800c838:	e7cd      	b.n	800c7d6 <_strtod_l+0x4d6>
 800c83a:	d0ed      	beq.n	800c818 <_strtod_l+0x518>
 800c83c:	4264      	negs	r4, r4
 800c83e:	f014 020f 	ands.w	r2, r4, #15
 800c842:	d00a      	beq.n	800c85a <_strtod_l+0x55a>
 800c844:	4b12      	ldr	r3, [pc, #72]	@ (800c890 <_strtod_l+0x590>)
 800c846:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c84a:	4650      	mov	r0, sl
 800c84c:	4659      	mov	r1, fp
 800c84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c852:	f7f3 fffb 	bl	800084c <__aeabi_ddiv>
 800c856:	4682      	mov	sl, r0
 800c858:	468b      	mov	fp, r1
 800c85a:	1124      	asrs	r4, r4, #4
 800c85c:	d0dc      	beq.n	800c818 <_strtod_l+0x518>
 800c85e:	2c1f      	cmp	r4, #31
 800c860:	dd20      	ble.n	800c8a4 <_strtod_l+0x5a4>
 800c862:	2400      	movs	r4, #0
 800c864:	46a0      	mov	r8, r4
 800c866:	940a      	str	r4, [sp, #40]	@ 0x28
 800c868:	46a1      	mov	r9, r4
 800c86a:	9a05      	ldr	r2, [sp, #20]
 800c86c:	2322      	movs	r3, #34	@ 0x22
 800c86e:	f04f 0a00 	mov.w	sl, #0
 800c872:	f04f 0b00 	mov.w	fp, #0
 800c876:	6013      	str	r3, [r2, #0]
 800c878:	e768      	b.n	800c74c <_strtod_l+0x44c>
 800c87a:	bf00      	nop
 800c87c:	0800e32e 	.word	0x0800e32e
 800c880:	0800e544 	.word	0x0800e544
 800c884:	0800e326 	.word	0x0800e326
 800c888:	0800e35d 	.word	0x0800e35d
 800c88c:	0800e6ed 	.word	0x0800e6ed
 800c890:	0800e478 	.word	0x0800e478
 800c894:	0800e450 	.word	0x0800e450
 800c898:	7ff00000 	.word	0x7ff00000
 800c89c:	7ca00000 	.word	0x7ca00000
 800c8a0:	7fefffff 	.word	0x7fefffff
 800c8a4:	f014 0310 	ands.w	r3, r4, #16
 800c8a8:	bf18      	it	ne
 800c8aa:	236a      	movne	r3, #106	@ 0x6a
 800c8ac:	4ea9      	ldr	r6, [pc, #676]	@ (800cb54 <_strtod_l+0x854>)
 800c8ae:	9308      	str	r3, [sp, #32]
 800c8b0:	4650      	mov	r0, sl
 800c8b2:	4659      	mov	r1, fp
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	07e2      	lsls	r2, r4, #31
 800c8b8:	d504      	bpl.n	800c8c4 <_strtod_l+0x5c4>
 800c8ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c8be:	f7f3 fe9b 	bl	80005f8 <__aeabi_dmul>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	1064      	asrs	r4, r4, #1
 800c8c6:	f106 0608 	add.w	r6, r6, #8
 800c8ca:	d1f4      	bne.n	800c8b6 <_strtod_l+0x5b6>
 800c8cc:	b10b      	cbz	r3, 800c8d2 <_strtod_l+0x5d2>
 800c8ce:	4682      	mov	sl, r0
 800c8d0:	468b      	mov	fp, r1
 800c8d2:	9b08      	ldr	r3, [sp, #32]
 800c8d4:	b1b3      	cbz	r3, 800c904 <_strtod_l+0x604>
 800c8d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c8da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	4659      	mov	r1, fp
 800c8e2:	dd0f      	ble.n	800c904 <_strtod_l+0x604>
 800c8e4:	2b1f      	cmp	r3, #31
 800c8e6:	dd55      	ble.n	800c994 <_strtod_l+0x694>
 800c8e8:	2b34      	cmp	r3, #52	@ 0x34
 800c8ea:	bfde      	ittt	le
 800c8ec:	f04f 33ff 	movle.w	r3, #4294967295
 800c8f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c8f4:	4093      	lslle	r3, r2
 800c8f6:	f04f 0a00 	mov.w	sl, #0
 800c8fa:	bfcc      	ite	gt
 800c8fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c900:	ea03 0b01 	andle.w	fp, r3, r1
 800c904:	2200      	movs	r2, #0
 800c906:	2300      	movs	r3, #0
 800c908:	4650      	mov	r0, sl
 800c90a:	4659      	mov	r1, fp
 800c90c:	f7f4 f8dc 	bl	8000ac8 <__aeabi_dcmpeq>
 800c910:	2800      	cmp	r0, #0
 800c912:	d1a6      	bne.n	800c862 <_strtod_l+0x562>
 800c914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c916:	9300      	str	r3, [sp, #0]
 800c918:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c91a:	9805      	ldr	r0, [sp, #20]
 800c91c:	462b      	mov	r3, r5
 800c91e:	463a      	mov	r2, r7
 800c920:	f7ff f8c6 	bl	800bab0 <__s2b>
 800c924:	900a      	str	r0, [sp, #40]	@ 0x28
 800c926:	2800      	cmp	r0, #0
 800c928:	f43f af05 	beq.w	800c736 <_strtod_l+0x436>
 800c92c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c92e:	2a00      	cmp	r2, #0
 800c930:	eba9 0308 	sub.w	r3, r9, r8
 800c934:	bfa8      	it	ge
 800c936:	2300      	movge	r3, #0
 800c938:	9312      	str	r3, [sp, #72]	@ 0x48
 800c93a:	2400      	movs	r4, #0
 800c93c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c940:	9316      	str	r3, [sp, #88]	@ 0x58
 800c942:	46a0      	mov	r8, r4
 800c944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c946:	9805      	ldr	r0, [sp, #20]
 800c948:	6859      	ldr	r1, [r3, #4]
 800c94a:	f7ff f809 	bl	800b960 <_Balloc>
 800c94e:	4681      	mov	r9, r0
 800c950:	2800      	cmp	r0, #0
 800c952:	f43f aef4 	beq.w	800c73e <_strtod_l+0x43e>
 800c956:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c958:	691a      	ldr	r2, [r3, #16]
 800c95a:	3202      	adds	r2, #2
 800c95c:	f103 010c 	add.w	r1, r3, #12
 800c960:	0092      	lsls	r2, r2, #2
 800c962:	300c      	adds	r0, #12
 800c964:	f7fe f899 	bl	800aa9a <memcpy>
 800c968:	ec4b ab10 	vmov	d0, sl, fp
 800c96c:	9805      	ldr	r0, [sp, #20]
 800c96e:	aa1c      	add	r2, sp, #112	@ 0x70
 800c970:	a91b      	add	r1, sp, #108	@ 0x6c
 800c972:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c976:	f7ff fbd7 	bl	800c128 <__d2b>
 800c97a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c97c:	2800      	cmp	r0, #0
 800c97e:	f43f aede 	beq.w	800c73e <_strtod_l+0x43e>
 800c982:	9805      	ldr	r0, [sp, #20]
 800c984:	2101      	movs	r1, #1
 800c986:	f7ff f929 	bl	800bbdc <__i2b>
 800c98a:	4680      	mov	r8, r0
 800c98c:	b948      	cbnz	r0, 800c9a2 <_strtod_l+0x6a2>
 800c98e:	f04f 0800 	mov.w	r8, #0
 800c992:	e6d4      	b.n	800c73e <_strtod_l+0x43e>
 800c994:	f04f 32ff 	mov.w	r2, #4294967295
 800c998:	fa02 f303 	lsl.w	r3, r2, r3
 800c99c:	ea03 0a0a 	and.w	sl, r3, sl
 800c9a0:	e7b0      	b.n	800c904 <_strtod_l+0x604>
 800c9a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c9a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c9a6:	2d00      	cmp	r5, #0
 800c9a8:	bfab      	itete	ge
 800c9aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c9ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c9ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c9b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c9b2:	bfac      	ite	ge
 800c9b4:	18ef      	addge	r7, r5, r3
 800c9b6:	1b5e      	sublt	r6, r3, r5
 800c9b8:	9b08      	ldr	r3, [sp, #32]
 800c9ba:	1aed      	subs	r5, r5, r3
 800c9bc:	4415      	add	r5, r2
 800c9be:	4b66      	ldr	r3, [pc, #408]	@ (800cb58 <_strtod_l+0x858>)
 800c9c0:	3d01      	subs	r5, #1
 800c9c2:	429d      	cmp	r5, r3
 800c9c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c9c8:	da50      	bge.n	800ca6c <_strtod_l+0x76c>
 800c9ca:	1b5b      	subs	r3, r3, r5
 800c9cc:	2b1f      	cmp	r3, #31
 800c9ce:	eba2 0203 	sub.w	r2, r2, r3
 800c9d2:	f04f 0101 	mov.w	r1, #1
 800c9d6:	dc3d      	bgt.n	800ca54 <_strtod_l+0x754>
 800c9d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c9dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c9de:	2300      	movs	r3, #0
 800c9e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c9e2:	18bd      	adds	r5, r7, r2
 800c9e4:	9b08      	ldr	r3, [sp, #32]
 800c9e6:	42af      	cmp	r7, r5
 800c9e8:	4416      	add	r6, r2
 800c9ea:	441e      	add	r6, r3
 800c9ec:	463b      	mov	r3, r7
 800c9ee:	bfa8      	it	ge
 800c9f0:	462b      	movge	r3, r5
 800c9f2:	42b3      	cmp	r3, r6
 800c9f4:	bfa8      	it	ge
 800c9f6:	4633      	movge	r3, r6
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	bfc2      	ittt	gt
 800c9fc:	1aed      	subgt	r5, r5, r3
 800c9fe:	1af6      	subgt	r6, r6, r3
 800ca00:	1aff      	subgt	r7, r7, r3
 800ca02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	dd16      	ble.n	800ca36 <_strtod_l+0x736>
 800ca08:	4641      	mov	r1, r8
 800ca0a:	9805      	ldr	r0, [sp, #20]
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	f7ff f9a5 	bl	800bd5c <__pow5mult>
 800ca12:	4680      	mov	r8, r0
 800ca14:	2800      	cmp	r0, #0
 800ca16:	d0ba      	beq.n	800c98e <_strtod_l+0x68e>
 800ca18:	4601      	mov	r1, r0
 800ca1a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ca1c:	9805      	ldr	r0, [sp, #20]
 800ca1e:	f7ff f8f3 	bl	800bc08 <__multiply>
 800ca22:	900e      	str	r0, [sp, #56]	@ 0x38
 800ca24:	2800      	cmp	r0, #0
 800ca26:	f43f ae8a 	beq.w	800c73e <_strtod_l+0x43e>
 800ca2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca2c:	9805      	ldr	r0, [sp, #20]
 800ca2e:	f7fe ffd7 	bl	800b9e0 <_Bfree>
 800ca32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca34:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca36:	2d00      	cmp	r5, #0
 800ca38:	dc1d      	bgt.n	800ca76 <_strtod_l+0x776>
 800ca3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	dd23      	ble.n	800ca88 <_strtod_l+0x788>
 800ca40:	4649      	mov	r1, r9
 800ca42:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ca44:	9805      	ldr	r0, [sp, #20]
 800ca46:	f7ff f989 	bl	800bd5c <__pow5mult>
 800ca4a:	4681      	mov	r9, r0
 800ca4c:	b9e0      	cbnz	r0, 800ca88 <_strtod_l+0x788>
 800ca4e:	f04f 0900 	mov.w	r9, #0
 800ca52:	e674      	b.n	800c73e <_strtod_l+0x43e>
 800ca54:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ca58:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ca5c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ca60:	35e2      	adds	r5, #226	@ 0xe2
 800ca62:	fa01 f305 	lsl.w	r3, r1, r5
 800ca66:	9310      	str	r3, [sp, #64]	@ 0x40
 800ca68:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ca6a:	e7ba      	b.n	800c9e2 <_strtod_l+0x6e2>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ca70:	2301      	movs	r3, #1
 800ca72:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ca74:	e7b5      	b.n	800c9e2 <_strtod_l+0x6e2>
 800ca76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca78:	9805      	ldr	r0, [sp, #20]
 800ca7a:	462a      	mov	r2, r5
 800ca7c:	f7ff f9c8 	bl	800be10 <__lshift>
 800ca80:	901a      	str	r0, [sp, #104]	@ 0x68
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d1d9      	bne.n	800ca3a <_strtod_l+0x73a>
 800ca86:	e65a      	b.n	800c73e <_strtod_l+0x43e>
 800ca88:	2e00      	cmp	r6, #0
 800ca8a:	dd07      	ble.n	800ca9c <_strtod_l+0x79c>
 800ca8c:	4649      	mov	r1, r9
 800ca8e:	9805      	ldr	r0, [sp, #20]
 800ca90:	4632      	mov	r2, r6
 800ca92:	f7ff f9bd 	bl	800be10 <__lshift>
 800ca96:	4681      	mov	r9, r0
 800ca98:	2800      	cmp	r0, #0
 800ca9a:	d0d8      	beq.n	800ca4e <_strtod_l+0x74e>
 800ca9c:	2f00      	cmp	r7, #0
 800ca9e:	dd08      	ble.n	800cab2 <_strtod_l+0x7b2>
 800caa0:	4641      	mov	r1, r8
 800caa2:	9805      	ldr	r0, [sp, #20]
 800caa4:	463a      	mov	r2, r7
 800caa6:	f7ff f9b3 	bl	800be10 <__lshift>
 800caaa:	4680      	mov	r8, r0
 800caac:	2800      	cmp	r0, #0
 800caae:	f43f ae46 	beq.w	800c73e <_strtod_l+0x43e>
 800cab2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cab4:	9805      	ldr	r0, [sp, #20]
 800cab6:	464a      	mov	r2, r9
 800cab8:	f7ff fa32 	bl	800bf20 <__mdiff>
 800cabc:	4604      	mov	r4, r0
 800cabe:	2800      	cmp	r0, #0
 800cac0:	f43f ae3d 	beq.w	800c73e <_strtod_l+0x43e>
 800cac4:	68c3      	ldr	r3, [r0, #12]
 800cac6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cac8:	2300      	movs	r3, #0
 800caca:	60c3      	str	r3, [r0, #12]
 800cacc:	4641      	mov	r1, r8
 800cace:	f7ff fa0b 	bl	800bee8 <__mcmp>
 800cad2:	2800      	cmp	r0, #0
 800cad4:	da46      	bge.n	800cb64 <_strtod_l+0x864>
 800cad6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cad8:	ea53 030a 	orrs.w	r3, r3, sl
 800cadc:	d16c      	bne.n	800cbb8 <_strtod_l+0x8b8>
 800cade:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d168      	bne.n	800cbb8 <_strtod_l+0x8b8>
 800cae6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800caea:	0d1b      	lsrs	r3, r3, #20
 800caec:	051b      	lsls	r3, r3, #20
 800caee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800caf2:	d961      	bls.n	800cbb8 <_strtod_l+0x8b8>
 800caf4:	6963      	ldr	r3, [r4, #20]
 800caf6:	b913      	cbnz	r3, 800cafe <_strtod_l+0x7fe>
 800caf8:	6923      	ldr	r3, [r4, #16]
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	dd5c      	ble.n	800cbb8 <_strtod_l+0x8b8>
 800cafe:	4621      	mov	r1, r4
 800cb00:	2201      	movs	r2, #1
 800cb02:	9805      	ldr	r0, [sp, #20]
 800cb04:	f7ff f984 	bl	800be10 <__lshift>
 800cb08:	4641      	mov	r1, r8
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	f7ff f9ec 	bl	800bee8 <__mcmp>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	dd51      	ble.n	800cbb8 <_strtod_l+0x8b8>
 800cb14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb18:	9a08      	ldr	r2, [sp, #32]
 800cb1a:	0d1b      	lsrs	r3, r3, #20
 800cb1c:	051b      	lsls	r3, r3, #20
 800cb1e:	2a00      	cmp	r2, #0
 800cb20:	d06b      	beq.n	800cbfa <_strtod_l+0x8fa>
 800cb22:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cb26:	d868      	bhi.n	800cbfa <_strtod_l+0x8fa>
 800cb28:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cb2c:	f67f ae9d 	bls.w	800c86a <_strtod_l+0x56a>
 800cb30:	4b0a      	ldr	r3, [pc, #40]	@ (800cb5c <_strtod_l+0x85c>)
 800cb32:	4650      	mov	r0, sl
 800cb34:	4659      	mov	r1, fp
 800cb36:	2200      	movs	r2, #0
 800cb38:	f7f3 fd5e 	bl	80005f8 <__aeabi_dmul>
 800cb3c:	4b08      	ldr	r3, [pc, #32]	@ (800cb60 <_strtod_l+0x860>)
 800cb3e:	400b      	ands	r3, r1
 800cb40:	4682      	mov	sl, r0
 800cb42:	468b      	mov	fp, r1
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	f47f ae05 	bne.w	800c754 <_strtod_l+0x454>
 800cb4a:	9a05      	ldr	r2, [sp, #20]
 800cb4c:	2322      	movs	r3, #34	@ 0x22
 800cb4e:	6013      	str	r3, [r2, #0]
 800cb50:	e600      	b.n	800c754 <_strtod_l+0x454>
 800cb52:	bf00      	nop
 800cb54:	0800e570 	.word	0x0800e570
 800cb58:	fffffc02 	.word	0xfffffc02
 800cb5c:	39500000 	.word	0x39500000
 800cb60:	7ff00000 	.word	0x7ff00000
 800cb64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cb68:	d165      	bne.n	800cc36 <_strtod_l+0x936>
 800cb6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cb6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb70:	b35a      	cbz	r2, 800cbca <_strtod_l+0x8ca>
 800cb72:	4a9f      	ldr	r2, [pc, #636]	@ (800cdf0 <_strtod_l+0xaf0>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d12b      	bne.n	800cbd0 <_strtod_l+0x8d0>
 800cb78:	9b08      	ldr	r3, [sp, #32]
 800cb7a:	4651      	mov	r1, sl
 800cb7c:	b303      	cbz	r3, 800cbc0 <_strtod_l+0x8c0>
 800cb7e:	4b9d      	ldr	r3, [pc, #628]	@ (800cdf4 <_strtod_l+0xaf4>)
 800cb80:	465a      	mov	r2, fp
 800cb82:	4013      	ands	r3, r2
 800cb84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cb88:	f04f 32ff 	mov.w	r2, #4294967295
 800cb8c:	d81b      	bhi.n	800cbc6 <_strtod_l+0x8c6>
 800cb8e:	0d1b      	lsrs	r3, r3, #20
 800cb90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cb94:	fa02 f303 	lsl.w	r3, r2, r3
 800cb98:	4299      	cmp	r1, r3
 800cb9a:	d119      	bne.n	800cbd0 <_strtod_l+0x8d0>
 800cb9c:	4b96      	ldr	r3, [pc, #600]	@ (800cdf8 <_strtod_l+0xaf8>)
 800cb9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d102      	bne.n	800cbaa <_strtod_l+0x8aa>
 800cba4:	3101      	adds	r1, #1
 800cba6:	f43f adca 	beq.w	800c73e <_strtod_l+0x43e>
 800cbaa:	4b92      	ldr	r3, [pc, #584]	@ (800cdf4 <_strtod_l+0xaf4>)
 800cbac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cbae:	401a      	ands	r2, r3
 800cbb0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cbb4:	f04f 0a00 	mov.w	sl, #0
 800cbb8:	9b08      	ldr	r3, [sp, #32]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d1b8      	bne.n	800cb30 <_strtod_l+0x830>
 800cbbe:	e5c9      	b.n	800c754 <_strtod_l+0x454>
 800cbc0:	f04f 33ff 	mov.w	r3, #4294967295
 800cbc4:	e7e8      	b.n	800cb98 <_strtod_l+0x898>
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	e7e6      	b.n	800cb98 <_strtod_l+0x898>
 800cbca:	ea53 030a 	orrs.w	r3, r3, sl
 800cbce:	d0a1      	beq.n	800cb14 <_strtod_l+0x814>
 800cbd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cbd2:	b1db      	cbz	r3, 800cc0c <_strtod_l+0x90c>
 800cbd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cbd6:	4213      	tst	r3, r2
 800cbd8:	d0ee      	beq.n	800cbb8 <_strtod_l+0x8b8>
 800cbda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbdc:	9a08      	ldr	r2, [sp, #32]
 800cbde:	4650      	mov	r0, sl
 800cbe0:	4659      	mov	r1, fp
 800cbe2:	b1bb      	cbz	r3, 800cc14 <_strtod_l+0x914>
 800cbe4:	f7ff fb6e 	bl	800c2c4 <sulp>
 800cbe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbec:	ec53 2b10 	vmov	r2, r3, d0
 800cbf0:	f7f3 fb4c 	bl	800028c <__adddf3>
 800cbf4:	4682      	mov	sl, r0
 800cbf6:	468b      	mov	fp, r1
 800cbf8:	e7de      	b.n	800cbb8 <_strtod_l+0x8b8>
 800cbfa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cbfe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cc02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cc06:	f04f 3aff 	mov.w	sl, #4294967295
 800cc0a:	e7d5      	b.n	800cbb8 <_strtod_l+0x8b8>
 800cc0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cc0e:	ea13 0f0a 	tst.w	r3, sl
 800cc12:	e7e1      	b.n	800cbd8 <_strtod_l+0x8d8>
 800cc14:	f7ff fb56 	bl	800c2c4 <sulp>
 800cc18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc1c:	ec53 2b10 	vmov	r2, r3, d0
 800cc20:	f7f3 fb32 	bl	8000288 <__aeabi_dsub>
 800cc24:	2200      	movs	r2, #0
 800cc26:	2300      	movs	r3, #0
 800cc28:	4682      	mov	sl, r0
 800cc2a:	468b      	mov	fp, r1
 800cc2c:	f7f3 ff4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d0c1      	beq.n	800cbb8 <_strtod_l+0x8b8>
 800cc34:	e619      	b.n	800c86a <_strtod_l+0x56a>
 800cc36:	4641      	mov	r1, r8
 800cc38:	4620      	mov	r0, r4
 800cc3a:	f7ff facd 	bl	800c1d8 <__ratio>
 800cc3e:	ec57 6b10 	vmov	r6, r7, d0
 800cc42:	2200      	movs	r2, #0
 800cc44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cc48:	4630      	mov	r0, r6
 800cc4a:	4639      	mov	r1, r7
 800cc4c:	f7f3 ff50 	bl	8000af0 <__aeabi_dcmple>
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d06f      	beq.n	800cd34 <_strtod_l+0xa34>
 800cc54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d17a      	bne.n	800cd50 <_strtod_l+0xa50>
 800cc5a:	f1ba 0f00 	cmp.w	sl, #0
 800cc5e:	d158      	bne.n	800cd12 <_strtod_l+0xa12>
 800cc60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d15a      	bne.n	800cd20 <_strtod_l+0xa20>
 800cc6a:	4b64      	ldr	r3, [pc, #400]	@ (800cdfc <_strtod_l+0xafc>)
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	4630      	mov	r0, r6
 800cc70:	4639      	mov	r1, r7
 800cc72:	f7f3 ff33 	bl	8000adc <__aeabi_dcmplt>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d159      	bne.n	800cd2e <_strtod_l+0xa2e>
 800cc7a:	4630      	mov	r0, r6
 800cc7c:	4639      	mov	r1, r7
 800cc7e:	4b60      	ldr	r3, [pc, #384]	@ (800ce00 <_strtod_l+0xb00>)
 800cc80:	2200      	movs	r2, #0
 800cc82:	f7f3 fcb9 	bl	80005f8 <__aeabi_dmul>
 800cc86:	4606      	mov	r6, r0
 800cc88:	460f      	mov	r7, r1
 800cc8a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cc8e:	9606      	str	r6, [sp, #24]
 800cc90:	9307      	str	r3, [sp, #28]
 800cc92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc96:	4d57      	ldr	r5, [pc, #348]	@ (800cdf4 <_strtod_l+0xaf4>)
 800cc98:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cc9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc9e:	401d      	ands	r5, r3
 800cca0:	4b58      	ldr	r3, [pc, #352]	@ (800ce04 <_strtod_l+0xb04>)
 800cca2:	429d      	cmp	r5, r3
 800cca4:	f040 80b2 	bne.w	800ce0c <_strtod_l+0xb0c>
 800cca8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccaa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ccae:	ec4b ab10 	vmov	d0, sl, fp
 800ccb2:	f7ff f9c9 	bl	800c048 <__ulp>
 800ccb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ccba:	ec51 0b10 	vmov	r0, r1, d0
 800ccbe:	f7f3 fc9b 	bl	80005f8 <__aeabi_dmul>
 800ccc2:	4652      	mov	r2, sl
 800ccc4:	465b      	mov	r3, fp
 800ccc6:	f7f3 fae1 	bl	800028c <__adddf3>
 800ccca:	460b      	mov	r3, r1
 800cccc:	4949      	ldr	r1, [pc, #292]	@ (800cdf4 <_strtod_l+0xaf4>)
 800ccce:	4a4e      	ldr	r2, [pc, #312]	@ (800ce08 <_strtod_l+0xb08>)
 800ccd0:	4019      	ands	r1, r3
 800ccd2:	4291      	cmp	r1, r2
 800ccd4:	4682      	mov	sl, r0
 800ccd6:	d942      	bls.n	800cd5e <_strtod_l+0xa5e>
 800ccd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ccda:	4b47      	ldr	r3, [pc, #284]	@ (800cdf8 <_strtod_l+0xaf8>)
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d103      	bne.n	800cce8 <_strtod_l+0x9e8>
 800cce0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cce2:	3301      	adds	r3, #1
 800cce4:	f43f ad2b 	beq.w	800c73e <_strtod_l+0x43e>
 800cce8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cdf8 <_strtod_l+0xaf8>
 800ccec:	f04f 3aff 	mov.w	sl, #4294967295
 800ccf0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ccf2:	9805      	ldr	r0, [sp, #20]
 800ccf4:	f7fe fe74 	bl	800b9e0 <_Bfree>
 800ccf8:	9805      	ldr	r0, [sp, #20]
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	f7fe fe70 	bl	800b9e0 <_Bfree>
 800cd00:	9805      	ldr	r0, [sp, #20]
 800cd02:	4641      	mov	r1, r8
 800cd04:	f7fe fe6c 	bl	800b9e0 <_Bfree>
 800cd08:	9805      	ldr	r0, [sp, #20]
 800cd0a:	4621      	mov	r1, r4
 800cd0c:	f7fe fe68 	bl	800b9e0 <_Bfree>
 800cd10:	e618      	b.n	800c944 <_strtod_l+0x644>
 800cd12:	f1ba 0f01 	cmp.w	sl, #1
 800cd16:	d103      	bne.n	800cd20 <_strtod_l+0xa20>
 800cd18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f43f ada5 	beq.w	800c86a <_strtod_l+0x56a>
 800cd20:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cdd0 <_strtod_l+0xad0>
 800cd24:	4f35      	ldr	r7, [pc, #212]	@ (800cdfc <_strtod_l+0xafc>)
 800cd26:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cd2a:	2600      	movs	r6, #0
 800cd2c:	e7b1      	b.n	800cc92 <_strtod_l+0x992>
 800cd2e:	4f34      	ldr	r7, [pc, #208]	@ (800ce00 <_strtod_l+0xb00>)
 800cd30:	2600      	movs	r6, #0
 800cd32:	e7aa      	b.n	800cc8a <_strtod_l+0x98a>
 800cd34:	4b32      	ldr	r3, [pc, #200]	@ (800ce00 <_strtod_l+0xb00>)
 800cd36:	4630      	mov	r0, r6
 800cd38:	4639      	mov	r1, r7
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f7f3 fc5c 	bl	80005f8 <__aeabi_dmul>
 800cd40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd42:	4606      	mov	r6, r0
 800cd44:	460f      	mov	r7, r1
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d09f      	beq.n	800cc8a <_strtod_l+0x98a>
 800cd4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cd4e:	e7a0      	b.n	800cc92 <_strtod_l+0x992>
 800cd50:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cdd8 <_strtod_l+0xad8>
 800cd54:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cd58:	ec57 6b17 	vmov	r6, r7, d7
 800cd5c:	e799      	b.n	800cc92 <_strtod_l+0x992>
 800cd5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cd62:	9b08      	ldr	r3, [sp, #32]
 800cd64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d1c1      	bne.n	800ccf0 <_strtod_l+0x9f0>
 800cd6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd70:	0d1b      	lsrs	r3, r3, #20
 800cd72:	051b      	lsls	r3, r3, #20
 800cd74:	429d      	cmp	r5, r3
 800cd76:	d1bb      	bne.n	800ccf0 <_strtod_l+0x9f0>
 800cd78:	4630      	mov	r0, r6
 800cd7a:	4639      	mov	r1, r7
 800cd7c:	f7f3 ff9c 	bl	8000cb8 <__aeabi_d2lz>
 800cd80:	f7f3 fc0c 	bl	800059c <__aeabi_l2d>
 800cd84:	4602      	mov	r2, r0
 800cd86:	460b      	mov	r3, r1
 800cd88:	4630      	mov	r0, r6
 800cd8a:	4639      	mov	r1, r7
 800cd8c:	f7f3 fa7c 	bl	8000288 <__aeabi_dsub>
 800cd90:	460b      	mov	r3, r1
 800cd92:	4602      	mov	r2, r0
 800cd94:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cd98:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cd9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd9e:	ea46 060a 	orr.w	r6, r6, sl
 800cda2:	431e      	orrs	r6, r3
 800cda4:	d06f      	beq.n	800ce86 <_strtod_l+0xb86>
 800cda6:	a30e      	add	r3, pc, #56	@ (adr r3, 800cde0 <_strtod_l+0xae0>)
 800cda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdac:	f7f3 fe96 	bl	8000adc <__aeabi_dcmplt>
 800cdb0:	2800      	cmp	r0, #0
 800cdb2:	f47f accf 	bne.w	800c754 <_strtod_l+0x454>
 800cdb6:	a30c      	add	r3, pc, #48	@ (adr r3, 800cde8 <_strtod_l+0xae8>)
 800cdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdc0:	f7f3 feaa 	bl	8000b18 <__aeabi_dcmpgt>
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	d093      	beq.n	800ccf0 <_strtod_l+0x9f0>
 800cdc8:	e4c4      	b.n	800c754 <_strtod_l+0x454>
 800cdca:	bf00      	nop
 800cdcc:	f3af 8000 	nop.w
 800cdd0:	00000000 	.word	0x00000000
 800cdd4:	bff00000 	.word	0xbff00000
 800cdd8:	00000000 	.word	0x00000000
 800cddc:	3ff00000 	.word	0x3ff00000
 800cde0:	94a03595 	.word	0x94a03595
 800cde4:	3fdfffff 	.word	0x3fdfffff
 800cde8:	35afe535 	.word	0x35afe535
 800cdec:	3fe00000 	.word	0x3fe00000
 800cdf0:	000fffff 	.word	0x000fffff
 800cdf4:	7ff00000 	.word	0x7ff00000
 800cdf8:	7fefffff 	.word	0x7fefffff
 800cdfc:	3ff00000 	.word	0x3ff00000
 800ce00:	3fe00000 	.word	0x3fe00000
 800ce04:	7fe00000 	.word	0x7fe00000
 800ce08:	7c9fffff 	.word	0x7c9fffff
 800ce0c:	9b08      	ldr	r3, [sp, #32]
 800ce0e:	b323      	cbz	r3, 800ce5a <_strtod_l+0xb5a>
 800ce10:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ce14:	d821      	bhi.n	800ce5a <_strtod_l+0xb5a>
 800ce16:	a328      	add	r3, pc, #160	@ (adr r3, 800ceb8 <_strtod_l+0xbb8>)
 800ce18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	4639      	mov	r1, r7
 800ce20:	f7f3 fe66 	bl	8000af0 <__aeabi_dcmple>
 800ce24:	b1a0      	cbz	r0, 800ce50 <_strtod_l+0xb50>
 800ce26:	4639      	mov	r1, r7
 800ce28:	4630      	mov	r0, r6
 800ce2a:	f7f3 febd 	bl	8000ba8 <__aeabi_d2uiz>
 800ce2e:	2801      	cmp	r0, #1
 800ce30:	bf38      	it	cc
 800ce32:	2001      	movcc	r0, #1
 800ce34:	f7f3 fb66 	bl	8000504 <__aeabi_ui2d>
 800ce38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce3a:	4606      	mov	r6, r0
 800ce3c:	460f      	mov	r7, r1
 800ce3e:	b9fb      	cbnz	r3, 800ce80 <_strtod_l+0xb80>
 800ce40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ce44:	9014      	str	r0, [sp, #80]	@ 0x50
 800ce46:	9315      	str	r3, [sp, #84]	@ 0x54
 800ce48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ce4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ce50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ce52:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ce56:	1b5b      	subs	r3, r3, r5
 800ce58:	9311      	str	r3, [sp, #68]	@ 0x44
 800ce5a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ce5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ce62:	f7ff f8f1 	bl	800c048 <__ulp>
 800ce66:	4650      	mov	r0, sl
 800ce68:	ec53 2b10 	vmov	r2, r3, d0
 800ce6c:	4659      	mov	r1, fp
 800ce6e:	f7f3 fbc3 	bl	80005f8 <__aeabi_dmul>
 800ce72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ce76:	f7f3 fa09 	bl	800028c <__adddf3>
 800ce7a:	4682      	mov	sl, r0
 800ce7c:	468b      	mov	fp, r1
 800ce7e:	e770      	b.n	800cd62 <_strtod_l+0xa62>
 800ce80:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ce84:	e7e0      	b.n	800ce48 <_strtod_l+0xb48>
 800ce86:	a30e      	add	r3, pc, #56	@ (adr r3, 800cec0 <_strtod_l+0xbc0>)
 800ce88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8c:	f7f3 fe26 	bl	8000adc <__aeabi_dcmplt>
 800ce90:	e798      	b.n	800cdc4 <_strtod_l+0xac4>
 800ce92:	2300      	movs	r3, #0
 800ce94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce96:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ce98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce9a:	6013      	str	r3, [r2, #0]
 800ce9c:	f7ff ba6d 	b.w	800c37a <_strtod_l+0x7a>
 800cea0:	2a65      	cmp	r2, #101	@ 0x65
 800cea2:	f43f ab66 	beq.w	800c572 <_strtod_l+0x272>
 800cea6:	2a45      	cmp	r2, #69	@ 0x45
 800cea8:	f43f ab63 	beq.w	800c572 <_strtod_l+0x272>
 800ceac:	2301      	movs	r3, #1
 800ceae:	f7ff bb9e 	b.w	800c5ee <_strtod_l+0x2ee>
 800ceb2:	bf00      	nop
 800ceb4:	f3af 8000 	nop.w
 800ceb8:	ffc00000 	.word	0xffc00000
 800cebc:	41dfffff 	.word	0x41dfffff
 800cec0:	94a03595 	.word	0x94a03595
 800cec4:	3fcfffff 	.word	0x3fcfffff

0800cec8 <_strtod_r>:
 800cec8:	4b01      	ldr	r3, [pc, #4]	@ (800ced0 <_strtod_r+0x8>)
 800ceca:	f7ff ba19 	b.w	800c300 <_strtod_l>
 800cece:	bf00      	nop
 800ced0:	20000088 	.word	0x20000088

0800ced4 <_strtol_l.constprop.0>:
 800ced4:	2b24      	cmp	r3, #36	@ 0x24
 800ced6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceda:	4686      	mov	lr, r0
 800cedc:	4690      	mov	r8, r2
 800cede:	d801      	bhi.n	800cee4 <_strtol_l.constprop.0+0x10>
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d106      	bne.n	800cef2 <_strtol_l.constprop.0+0x1e>
 800cee4:	f7fd fdac 	bl	800aa40 <__errno>
 800cee8:	2316      	movs	r3, #22
 800ceea:	6003      	str	r3, [r0, #0]
 800ceec:	2000      	movs	r0, #0
 800ceee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cef2:	4834      	ldr	r0, [pc, #208]	@ (800cfc4 <_strtol_l.constprop.0+0xf0>)
 800cef4:	460d      	mov	r5, r1
 800cef6:	462a      	mov	r2, r5
 800cef8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cefc:	5d06      	ldrb	r6, [r0, r4]
 800cefe:	f016 0608 	ands.w	r6, r6, #8
 800cf02:	d1f8      	bne.n	800cef6 <_strtol_l.constprop.0+0x22>
 800cf04:	2c2d      	cmp	r4, #45	@ 0x2d
 800cf06:	d12d      	bne.n	800cf64 <_strtol_l.constprop.0+0x90>
 800cf08:	782c      	ldrb	r4, [r5, #0]
 800cf0a:	2601      	movs	r6, #1
 800cf0c:	1c95      	adds	r5, r2, #2
 800cf0e:	f033 0210 	bics.w	r2, r3, #16
 800cf12:	d109      	bne.n	800cf28 <_strtol_l.constprop.0+0x54>
 800cf14:	2c30      	cmp	r4, #48	@ 0x30
 800cf16:	d12a      	bne.n	800cf6e <_strtol_l.constprop.0+0x9a>
 800cf18:	782a      	ldrb	r2, [r5, #0]
 800cf1a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cf1e:	2a58      	cmp	r2, #88	@ 0x58
 800cf20:	d125      	bne.n	800cf6e <_strtol_l.constprop.0+0x9a>
 800cf22:	786c      	ldrb	r4, [r5, #1]
 800cf24:	2310      	movs	r3, #16
 800cf26:	3502      	adds	r5, #2
 800cf28:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cf2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cf30:	2200      	movs	r2, #0
 800cf32:	fbbc f9f3 	udiv	r9, ip, r3
 800cf36:	4610      	mov	r0, r2
 800cf38:	fb03 ca19 	mls	sl, r3, r9, ip
 800cf3c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cf40:	2f09      	cmp	r7, #9
 800cf42:	d81b      	bhi.n	800cf7c <_strtol_l.constprop.0+0xa8>
 800cf44:	463c      	mov	r4, r7
 800cf46:	42a3      	cmp	r3, r4
 800cf48:	dd27      	ble.n	800cf9a <_strtol_l.constprop.0+0xc6>
 800cf4a:	1c57      	adds	r7, r2, #1
 800cf4c:	d007      	beq.n	800cf5e <_strtol_l.constprop.0+0x8a>
 800cf4e:	4581      	cmp	r9, r0
 800cf50:	d320      	bcc.n	800cf94 <_strtol_l.constprop.0+0xc0>
 800cf52:	d101      	bne.n	800cf58 <_strtol_l.constprop.0+0x84>
 800cf54:	45a2      	cmp	sl, r4
 800cf56:	db1d      	blt.n	800cf94 <_strtol_l.constprop.0+0xc0>
 800cf58:	fb00 4003 	mla	r0, r0, r3, r4
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf62:	e7eb      	b.n	800cf3c <_strtol_l.constprop.0+0x68>
 800cf64:	2c2b      	cmp	r4, #43	@ 0x2b
 800cf66:	bf04      	itt	eq
 800cf68:	782c      	ldrbeq	r4, [r5, #0]
 800cf6a:	1c95      	addeq	r5, r2, #2
 800cf6c:	e7cf      	b.n	800cf0e <_strtol_l.constprop.0+0x3a>
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d1da      	bne.n	800cf28 <_strtol_l.constprop.0+0x54>
 800cf72:	2c30      	cmp	r4, #48	@ 0x30
 800cf74:	bf0c      	ite	eq
 800cf76:	2308      	moveq	r3, #8
 800cf78:	230a      	movne	r3, #10
 800cf7a:	e7d5      	b.n	800cf28 <_strtol_l.constprop.0+0x54>
 800cf7c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cf80:	2f19      	cmp	r7, #25
 800cf82:	d801      	bhi.n	800cf88 <_strtol_l.constprop.0+0xb4>
 800cf84:	3c37      	subs	r4, #55	@ 0x37
 800cf86:	e7de      	b.n	800cf46 <_strtol_l.constprop.0+0x72>
 800cf88:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cf8c:	2f19      	cmp	r7, #25
 800cf8e:	d804      	bhi.n	800cf9a <_strtol_l.constprop.0+0xc6>
 800cf90:	3c57      	subs	r4, #87	@ 0x57
 800cf92:	e7d8      	b.n	800cf46 <_strtol_l.constprop.0+0x72>
 800cf94:	f04f 32ff 	mov.w	r2, #4294967295
 800cf98:	e7e1      	b.n	800cf5e <_strtol_l.constprop.0+0x8a>
 800cf9a:	1c53      	adds	r3, r2, #1
 800cf9c:	d108      	bne.n	800cfb0 <_strtol_l.constprop.0+0xdc>
 800cf9e:	2322      	movs	r3, #34	@ 0x22
 800cfa0:	f8ce 3000 	str.w	r3, [lr]
 800cfa4:	4660      	mov	r0, ip
 800cfa6:	f1b8 0f00 	cmp.w	r8, #0
 800cfaa:	d0a0      	beq.n	800ceee <_strtol_l.constprop.0+0x1a>
 800cfac:	1e69      	subs	r1, r5, #1
 800cfae:	e006      	b.n	800cfbe <_strtol_l.constprop.0+0xea>
 800cfb0:	b106      	cbz	r6, 800cfb4 <_strtol_l.constprop.0+0xe0>
 800cfb2:	4240      	negs	r0, r0
 800cfb4:	f1b8 0f00 	cmp.w	r8, #0
 800cfb8:	d099      	beq.n	800ceee <_strtol_l.constprop.0+0x1a>
 800cfba:	2a00      	cmp	r2, #0
 800cfbc:	d1f6      	bne.n	800cfac <_strtol_l.constprop.0+0xd8>
 800cfbe:	f8c8 1000 	str.w	r1, [r8]
 800cfc2:	e794      	b.n	800ceee <_strtol_l.constprop.0+0x1a>
 800cfc4:	0800e599 	.word	0x0800e599

0800cfc8 <_strtol_r>:
 800cfc8:	f7ff bf84 	b.w	800ced4 <_strtol_l.constprop.0>

0800cfcc <__ssputs_r>:
 800cfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfd0:	688e      	ldr	r6, [r1, #8]
 800cfd2:	461f      	mov	r7, r3
 800cfd4:	42be      	cmp	r6, r7
 800cfd6:	680b      	ldr	r3, [r1, #0]
 800cfd8:	4682      	mov	sl, r0
 800cfda:	460c      	mov	r4, r1
 800cfdc:	4690      	mov	r8, r2
 800cfde:	d82d      	bhi.n	800d03c <__ssputs_r+0x70>
 800cfe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cfe4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cfe8:	d026      	beq.n	800d038 <__ssputs_r+0x6c>
 800cfea:	6965      	ldr	r5, [r4, #20]
 800cfec:	6909      	ldr	r1, [r1, #16]
 800cfee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cff2:	eba3 0901 	sub.w	r9, r3, r1
 800cff6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cffa:	1c7b      	adds	r3, r7, #1
 800cffc:	444b      	add	r3, r9
 800cffe:	106d      	asrs	r5, r5, #1
 800d000:	429d      	cmp	r5, r3
 800d002:	bf38      	it	cc
 800d004:	461d      	movcc	r5, r3
 800d006:	0553      	lsls	r3, r2, #21
 800d008:	d527      	bpl.n	800d05a <__ssputs_r+0x8e>
 800d00a:	4629      	mov	r1, r5
 800d00c:	f7fe fc1c 	bl	800b848 <_malloc_r>
 800d010:	4606      	mov	r6, r0
 800d012:	b360      	cbz	r0, 800d06e <__ssputs_r+0xa2>
 800d014:	6921      	ldr	r1, [r4, #16]
 800d016:	464a      	mov	r2, r9
 800d018:	f7fd fd3f 	bl	800aa9a <memcpy>
 800d01c:	89a3      	ldrh	r3, [r4, #12]
 800d01e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d026:	81a3      	strh	r3, [r4, #12]
 800d028:	6126      	str	r6, [r4, #16]
 800d02a:	6165      	str	r5, [r4, #20]
 800d02c:	444e      	add	r6, r9
 800d02e:	eba5 0509 	sub.w	r5, r5, r9
 800d032:	6026      	str	r6, [r4, #0]
 800d034:	60a5      	str	r5, [r4, #8]
 800d036:	463e      	mov	r6, r7
 800d038:	42be      	cmp	r6, r7
 800d03a:	d900      	bls.n	800d03e <__ssputs_r+0x72>
 800d03c:	463e      	mov	r6, r7
 800d03e:	6820      	ldr	r0, [r4, #0]
 800d040:	4632      	mov	r2, r6
 800d042:	4641      	mov	r1, r8
 800d044:	f000 f9c6 	bl	800d3d4 <memmove>
 800d048:	68a3      	ldr	r3, [r4, #8]
 800d04a:	1b9b      	subs	r3, r3, r6
 800d04c:	60a3      	str	r3, [r4, #8]
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	4433      	add	r3, r6
 800d052:	6023      	str	r3, [r4, #0]
 800d054:	2000      	movs	r0, #0
 800d056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d05a:	462a      	mov	r2, r5
 800d05c:	f000 fd7d 	bl	800db5a <_realloc_r>
 800d060:	4606      	mov	r6, r0
 800d062:	2800      	cmp	r0, #0
 800d064:	d1e0      	bne.n	800d028 <__ssputs_r+0x5c>
 800d066:	6921      	ldr	r1, [r4, #16]
 800d068:	4650      	mov	r0, sl
 800d06a:	f7fe fb79 	bl	800b760 <_free_r>
 800d06e:	230c      	movs	r3, #12
 800d070:	f8ca 3000 	str.w	r3, [sl]
 800d074:	89a3      	ldrh	r3, [r4, #12]
 800d076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d07a:	81a3      	strh	r3, [r4, #12]
 800d07c:	f04f 30ff 	mov.w	r0, #4294967295
 800d080:	e7e9      	b.n	800d056 <__ssputs_r+0x8a>
	...

0800d084 <_svfiprintf_r>:
 800d084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d088:	4698      	mov	r8, r3
 800d08a:	898b      	ldrh	r3, [r1, #12]
 800d08c:	061b      	lsls	r3, r3, #24
 800d08e:	b09d      	sub	sp, #116	@ 0x74
 800d090:	4607      	mov	r7, r0
 800d092:	460d      	mov	r5, r1
 800d094:	4614      	mov	r4, r2
 800d096:	d510      	bpl.n	800d0ba <_svfiprintf_r+0x36>
 800d098:	690b      	ldr	r3, [r1, #16]
 800d09a:	b973      	cbnz	r3, 800d0ba <_svfiprintf_r+0x36>
 800d09c:	2140      	movs	r1, #64	@ 0x40
 800d09e:	f7fe fbd3 	bl	800b848 <_malloc_r>
 800d0a2:	6028      	str	r0, [r5, #0]
 800d0a4:	6128      	str	r0, [r5, #16]
 800d0a6:	b930      	cbnz	r0, 800d0b6 <_svfiprintf_r+0x32>
 800d0a8:	230c      	movs	r3, #12
 800d0aa:	603b      	str	r3, [r7, #0]
 800d0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b0:	b01d      	add	sp, #116	@ 0x74
 800d0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b6:	2340      	movs	r3, #64	@ 0x40
 800d0b8:	616b      	str	r3, [r5, #20]
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0be:	2320      	movs	r3, #32
 800d0c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d0c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0c8:	2330      	movs	r3, #48	@ 0x30
 800d0ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d268 <_svfiprintf_r+0x1e4>
 800d0ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d0d2:	f04f 0901 	mov.w	r9, #1
 800d0d6:	4623      	mov	r3, r4
 800d0d8:	469a      	mov	sl, r3
 800d0da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0de:	b10a      	cbz	r2, 800d0e4 <_svfiprintf_r+0x60>
 800d0e0:	2a25      	cmp	r2, #37	@ 0x25
 800d0e2:	d1f9      	bne.n	800d0d8 <_svfiprintf_r+0x54>
 800d0e4:	ebba 0b04 	subs.w	fp, sl, r4
 800d0e8:	d00b      	beq.n	800d102 <_svfiprintf_r+0x7e>
 800d0ea:	465b      	mov	r3, fp
 800d0ec:	4622      	mov	r2, r4
 800d0ee:	4629      	mov	r1, r5
 800d0f0:	4638      	mov	r0, r7
 800d0f2:	f7ff ff6b 	bl	800cfcc <__ssputs_r>
 800d0f6:	3001      	adds	r0, #1
 800d0f8:	f000 80a7 	beq.w	800d24a <_svfiprintf_r+0x1c6>
 800d0fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0fe:	445a      	add	r2, fp
 800d100:	9209      	str	r2, [sp, #36]	@ 0x24
 800d102:	f89a 3000 	ldrb.w	r3, [sl]
 800d106:	2b00      	cmp	r3, #0
 800d108:	f000 809f 	beq.w	800d24a <_svfiprintf_r+0x1c6>
 800d10c:	2300      	movs	r3, #0
 800d10e:	f04f 32ff 	mov.w	r2, #4294967295
 800d112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d116:	f10a 0a01 	add.w	sl, sl, #1
 800d11a:	9304      	str	r3, [sp, #16]
 800d11c:	9307      	str	r3, [sp, #28]
 800d11e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d122:	931a      	str	r3, [sp, #104]	@ 0x68
 800d124:	4654      	mov	r4, sl
 800d126:	2205      	movs	r2, #5
 800d128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d12c:	484e      	ldr	r0, [pc, #312]	@ (800d268 <_svfiprintf_r+0x1e4>)
 800d12e:	f7f3 f84f 	bl	80001d0 <memchr>
 800d132:	9a04      	ldr	r2, [sp, #16]
 800d134:	b9d8      	cbnz	r0, 800d16e <_svfiprintf_r+0xea>
 800d136:	06d0      	lsls	r0, r2, #27
 800d138:	bf44      	itt	mi
 800d13a:	2320      	movmi	r3, #32
 800d13c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d140:	0711      	lsls	r1, r2, #28
 800d142:	bf44      	itt	mi
 800d144:	232b      	movmi	r3, #43	@ 0x2b
 800d146:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d14a:	f89a 3000 	ldrb.w	r3, [sl]
 800d14e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d150:	d015      	beq.n	800d17e <_svfiprintf_r+0xfa>
 800d152:	9a07      	ldr	r2, [sp, #28]
 800d154:	4654      	mov	r4, sl
 800d156:	2000      	movs	r0, #0
 800d158:	f04f 0c0a 	mov.w	ip, #10
 800d15c:	4621      	mov	r1, r4
 800d15e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d162:	3b30      	subs	r3, #48	@ 0x30
 800d164:	2b09      	cmp	r3, #9
 800d166:	d94b      	bls.n	800d200 <_svfiprintf_r+0x17c>
 800d168:	b1b0      	cbz	r0, 800d198 <_svfiprintf_r+0x114>
 800d16a:	9207      	str	r2, [sp, #28]
 800d16c:	e014      	b.n	800d198 <_svfiprintf_r+0x114>
 800d16e:	eba0 0308 	sub.w	r3, r0, r8
 800d172:	fa09 f303 	lsl.w	r3, r9, r3
 800d176:	4313      	orrs	r3, r2
 800d178:	9304      	str	r3, [sp, #16]
 800d17a:	46a2      	mov	sl, r4
 800d17c:	e7d2      	b.n	800d124 <_svfiprintf_r+0xa0>
 800d17e:	9b03      	ldr	r3, [sp, #12]
 800d180:	1d19      	adds	r1, r3, #4
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	9103      	str	r1, [sp, #12]
 800d186:	2b00      	cmp	r3, #0
 800d188:	bfbb      	ittet	lt
 800d18a:	425b      	neglt	r3, r3
 800d18c:	f042 0202 	orrlt.w	r2, r2, #2
 800d190:	9307      	strge	r3, [sp, #28]
 800d192:	9307      	strlt	r3, [sp, #28]
 800d194:	bfb8      	it	lt
 800d196:	9204      	strlt	r2, [sp, #16]
 800d198:	7823      	ldrb	r3, [r4, #0]
 800d19a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d19c:	d10a      	bne.n	800d1b4 <_svfiprintf_r+0x130>
 800d19e:	7863      	ldrb	r3, [r4, #1]
 800d1a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1a2:	d132      	bne.n	800d20a <_svfiprintf_r+0x186>
 800d1a4:	9b03      	ldr	r3, [sp, #12]
 800d1a6:	1d1a      	adds	r2, r3, #4
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	9203      	str	r2, [sp, #12]
 800d1ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1b0:	3402      	adds	r4, #2
 800d1b2:	9305      	str	r3, [sp, #20]
 800d1b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d278 <_svfiprintf_r+0x1f4>
 800d1b8:	7821      	ldrb	r1, [r4, #0]
 800d1ba:	2203      	movs	r2, #3
 800d1bc:	4650      	mov	r0, sl
 800d1be:	f7f3 f807 	bl	80001d0 <memchr>
 800d1c2:	b138      	cbz	r0, 800d1d4 <_svfiprintf_r+0x150>
 800d1c4:	9b04      	ldr	r3, [sp, #16]
 800d1c6:	eba0 000a 	sub.w	r0, r0, sl
 800d1ca:	2240      	movs	r2, #64	@ 0x40
 800d1cc:	4082      	lsls	r2, r0
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	3401      	adds	r4, #1
 800d1d2:	9304      	str	r3, [sp, #16]
 800d1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1d8:	4824      	ldr	r0, [pc, #144]	@ (800d26c <_svfiprintf_r+0x1e8>)
 800d1da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d1de:	2206      	movs	r2, #6
 800d1e0:	f7f2 fff6 	bl	80001d0 <memchr>
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d036      	beq.n	800d256 <_svfiprintf_r+0x1d2>
 800d1e8:	4b21      	ldr	r3, [pc, #132]	@ (800d270 <_svfiprintf_r+0x1ec>)
 800d1ea:	bb1b      	cbnz	r3, 800d234 <_svfiprintf_r+0x1b0>
 800d1ec:	9b03      	ldr	r3, [sp, #12]
 800d1ee:	3307      	adds	r3, #7
 800d1f0:	f023 0307 	bic.w	r3, r3, #7
 800d1f4:	3308      	adds	r3, #8
 800d1f6:	9303      	str	r3, [sp, #12]
 800d1f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1fa:	4433      	add	r3, r6
 800d1fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1fe:	e76a      	b.n	800d0d6 <_svfiprintf_r+0x52>
 800d200:	fb0c 3202 	mla	r2, ip, r2, r3
 800d204:	460c      	mov	r4, r1
 800d206:	2001      	movs	r0, #1
 800d208:	e7a8      	b.n	800d15c <_svfiprintf_r+0xd8>
 800d20a:	2300      	movs	r3, #0
 800d20c:	3401      	adds	r4, #1
 800d20e:	9305      	str	r3, [sp, #20]
 800d210:	4619      	mov	r1, r3
 800d212:	f04f 0c0a 	mov.w	ip, #10
 800d216:	4620      	mov	r0, r4
 800d218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d21c:	3a30      	subs	r2, #48	@ 0x30
 800d21e:	2a09      	cmp	r2, #9
 800d220:	d903      	bls.n	800d22a <_svfiprintf_r+0x1a6>
 800d222:	2b00      	cmp	r3, #0
 800d224:	d0c6      	beq.n	800d1b4 <_svfiprintf_r+0x130>
 800d226:	9105      	str	r1, [sp, #20]
 800d228:	e7c4      	b.n	800d1b4 <_svfiprintf_r+0x130>
 800d22a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d22e:	4604      	mov	r4, r0
 800d230:	2301      	movs	r3, #1
 800d232:	e7f0      	b.n	800d216 <_svfiprintf_r+0x192>
 800d234:	ab03      	add	r3, sp, #12
 800d236:	9300      	str	r3, [sp, #0]
 800d238:	462a      	mov	r2, r5
 800d23a:	4b0e      	ldr	r3, [pc, #56]	@ (800d274 <_svfiprintf_r+0x1f0>)
 800d23c:	a904      	add	r1, sp, #16
 800d23e:	4638      	mov	r0, r7
 800d240:	f7fc fc56 	bl	8009af0 <_printf_float>
 800d244:	1c42      	adds	r2, r0, #1
 800d246:	4606      	mov	r6, r0
 800d248:	d1d6      	bne.n	800d1f8 <_svfiprintf_r+0x174>
 800d24a:	89ab      	ldrh	r3, [r5, #12]
 800d24c:	065b      	lsls	r3, r3, #25
 800d24e:	f53f af2d 	bmi.w	800d0ac <_svfiprintf_r+0x28>
 800d252:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d254:	e72c      	b.n	800d0b0 <_svfiprintf_r+0x2c>
 800d256:	ab03      	add	r3, sp, #12
 800d258:	9300      	str	r3, [sp, #0]
 800d25a:	462a      	mov	r2, r5
 800d25c:	4b05      	ldr	r3, [pc, #20]	@ (800d274 <_svfiprintf_r+0x1f0>)
 800d25e:	a904      	add	r1, sp, #16
 800d260:	4638      	mov	r0, r7
 800d262:	f7fc fedd 	bl	800a020 <_printf_i>
 800d266:	e7ed      	b.n	800d244 <_svfiprintf_r+0x1c0>
 800d268:	0800e699 	.word	0x0800e699
 800d26c:	0800e6a3 	.word	0x0800e6a3
 800d270:	08009af1 	.word	0x08009af1
 800d274:	0800cfcd 	.word	0x0800cfcd
 800d278:	0800e69f 	.word	0x0800e69f

0800d27c <__sflush_r>:
 800d27c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d284:	0716      	lsls	r6, r2, #28
 800d286:	4605      	mov	r5, r0
 800d288:	460c      	mov	r4, r1
 800d28a:	d454      	bmi.n	800d336 <__sflush_r+0xba>
 800d28c:	684b      	ldr	r3, [r1, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	dc02      	bgt.n	800d298 <__sflush_r+0x1c>
 800d292:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d294:	2b00      	cmp	r3, #0
 800d296:	dd48      	ble.n	800d32a <__sflush_r+0xae>
 800d298:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d29a:	2e00      	cmp	r6, #0
 800d29c:	d045      	beq.n	800d32a <__sflush_r+0xae>
 800d29e:	2300      	movs	r3, #0
 800d2a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d2a4:	682f      	ldr	r7, [r5, #0]
 800d2a6:	6a21      	ldr	r1, [r4, #32]
 800d2a8:	602b      	str	r3, [r5, #0]
 800d2aa:	d030      	beq.n	800d30e <__sflush_r+0x92>
 800d2ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d2ae:	89a3      	ldrh	r3, [r4, #12]
 800d2b0:	0759      	lsls	r1, r3, #29
 800d2b2:	d505      	bpl.n	800d2c0 <__sflush_r+0x44>
 800d2b4:	6863      	ldr	r3, [r4, #4]
 800d2b6:	1ad2      	subs	r2, r2, r3
 800d2b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d2ba:	b10b      	cbz	r3, 800d2c0 <__sflush_r+0x44>
 800d2bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d2be:	1ad2      	subs	r2, r2, r3
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2c4:	6a21      	ldr	r1, [r4, #32]
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	47b0      	blx	r6
 800d2ca:	1c43      	adds	r3, r0, #1
 800d2cc:	89a3      	ldrh	r3, [r4, #12]
 800d2ce:	d106      	bne.n	800d2de <__sflush_r+0x62>
 800d2d0:	6829      	ldr	r1, [r5, #0]
 800d2d2:	291d      	cmp	r1, #29
 800d2d4:	d82b      	bhi.n	800d32e <__sflush_r+0xb2>
 800d2d6:	4a2a      	ldr	r2, [pc, #168]	@ (800d380 <__sflush_r+0x104>)
 800d2d8:	410a      	asrs	r2, r1
 800d2da:	07d6      	lsls	r6, r2, #31
 800d2dc:	d427      	bmi.n	800d32e <__sflush_r+0xb2>
 800d2de:	2200      	movs	r2, #0
 800d2e0:	6062      	str	r2, [r4, #4]
 800d2e2:	04d9      	lsls	r1, r3, #19
 800d2e4:	6922      	ldr	r2, [r4, #16]
 800d2e6:	6022      	str	r2, [r4, #0]
 800d2e8:	d504      	bpl.n	800d2f4 <__sflush_r+0x78>
 800d2ea:	1c42      	adds	r2, r0, #1
 800d2ec:	d101      	bne.n	800d2f2 <__sflush_r+0x76>
 800d2ee:	682b      	ldr	r3, [r5, #0]
 800d2f0:	b903      	cbnz	r3, 800d2f4 <__sflush_r+0x78>
 800d2f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d2f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2f6:	602f      	str	r7, [r5, #0]
 800d2f8:	b1b9      	cbz	r1, 800d32a <__sflush_r+0xae>
 800d2fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2fe:	4299      	cmp	r1, r3
 800d300:	d002      	beq.n	800d308 <__sflush_r+0x8c>
 800d302:	4628      	mov	r0, r5
 800d304:	f7fe fa2c 	bl	800b760 <_free_r>
 800d308:	2300      	movs	r3, #0
 800d30a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d30c:	e00d      	b.n	800d32a <__sflush_r+0xae>
 800d30e:	2301      	movs	r3, #1
 800d310:	4628      	mov	r0, r5
 800d312:	47b0      	blx	r6
 800d314:	4602      	mov	r2, r0
 800d316:	1c50      	adds	r0, r2, #1
 800d318:	d1c9      	bne.n	800d2ae <__sflush_r+0x32>
 800d31a:	682b      	ldr	r3, [r5, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d0c6      	beq.n	800d2ae <__sflush_r+0x32>
 800d320:	2b1d      	cmp	r3, #29
 800d322:	d001      	beq.n	800d328 <__sflush_r+0xac>
 800d324:	2b16      	cmp	r3, #22
 800d326:	d11e      	bne.n	800d366 <__sflush_r+0xea>
 800d328:	602f      	str	r7, [r5, #0]
 800d32a:	2000      	movs	r0, #0
 800d32c:	e022      	b.n	800d374 <__sflush_r+0xf8>
 800d32e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d332:	b21b      	sxth	r3, r3
 800d334:	e01b      	b.n	800d36e <__sflush_r+0xf2>
 800d336:	690f      	ldr	r7, [r1, #16]
 800d338:	2f00      	cmp	r7, #0
 800d33a:	d0f6      	beq.n	800d32a <__sflush_r+0xae>
 800d33c:	0793      	lsls	r3, r2, #30
 800d33e:	680e      	ldr	r6, [r1, #0]
 800d340:	bf08      	it	eq
 800d342:	694b      	ldreq	r3, [r1, #20]
 800d344:	600f      	str	r7, [r1, #0]
 800d346:	bf18      	it	ne
 800d348:	2300      	movne	r3, #0
 800d34a:	eba6 0807 	sub.w	r8, r6, r7
 800d34e:	608b      	str	r3, [r1, #8]
 800d350:	f1b8 0f00 	cmp.w	r8, #0
 800d354:	dde9      	ble.n	800d32a <__sflush_r+0xae>
 800d356:	6a21      	ldr	r1, [r4, #32]
 800d358:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d35a:	4643      	mov	r3, r8
 800d35c:	463a      	mov	r2, r7
 800d35e:	4628      	mov	r0, r5
 800d360:	47b0      	blx	r6
 800d362:	2800      	cmp	r0, #0
 800d364:	dc08      	bgt.n	800d378 <__sflush_r+0xfc>
 800d366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d36a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d36e:	81a3      	strh	r3, [r4, #12]
 800d370:	f04f 30ff 	mov.w	r0, #4294967295
 800d374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d378:	4407      	add	r7, r0
 800d37a:	eba8 0800 	sub.w	r8, r8, r0
 800d37e:	e7e7      	b.n	800d350 <__sflush_r+0xd4>
 800d380:	dfbffffe 	.word	0xdfbffffe

0800d384 <_fflush_r>:
 800d384:	b538      	push	{r3, r4, r5, lr}
 800d386:	690b      	ldr	r3, [r1, #16]
 800d388:	4605      	mov	r5, r0
 800d38a:	460c      	mov	r4, r1
 800d38c:	b913      	cbnz	r3, 800d394 <_fflush_r+0x10>
 800d38e:	2500      	movs	r5, #0
 800d390:	4628      	mov	r0, r5
 800d392:	bd38      	pop	{r3, r4, r5, pc}
 800d394:	b118      	cbz	r0, 800d39e <_fflush_r+0x1a>
 800d396:	6a03      	ldr	r3, [r0, #32]
 800d398:	b90b      	cbnz	r3, 800d39e <_fflush_r+0x1a>
 800d39a:	f7fd fa01 	bl	800a7a0 <__sinit>
 800d39e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d0f3      	beq.n	800d38e <_fflush_r+0xa>
 800d3a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d3a8:	07d0      	lsls	r0, r2, #31
 800d3aa:	d404      	bmi.n	800d3b6 <_fflush_r+0x32>
 800d3ac:	0599      	lsls	r1, r3, #22
 800d3ae:	d402      	bmi.n	800d3b6 <_fflush_r+0x32>
 800d3b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3b2:	f7fd fb70 	bl	800aa96 <__retarget_lock_acquire_recursive>
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	4621      	mov	r1, r4
 800d3ba:	f7ff ff5f 	bl	800d27c <__sflush_r>
 800d3be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d3c0:	07da      	lsls	r2, r3, #31
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	d4e4      	bmi.n	800d390 <_fflush_r+0xc>
 800d3c6:	89a3      	ldrh	r3, [r4, #12]
 800d3c8:	059b      	lsls	r3, r3, #22
 800d3ca:	d4e1      	bmi.n	800d390 <_fflush_r+0xc>
 800d3cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3ce:	f7fd fb63 	bl	800aa98 <__retarget_lock_release_recursive>
 800d3d2:	e7dd      	b.n	800d390 <_fflush_r+0xc>

0800d3d4 <memmove>:
 800d3d4:	4288      	cmp	r0, r1
 800d3d6:	b510      	push	{r4, lr}
 800d3d8:	eb01 0402 	add.w	r4, r1, r2
 800d3dc:	d902      	bls.n	800d3e4 <memmove+0x10>
 800d3de:	4284      	cmp	r4, r0
 800d3e0:	4623      	mov	r3, r4
 800d3e2:	d807      	bhi.n	800d3f4 <memmove+0x20>
 800d3e4:	1e43      	subs	r3, r0, #1
 800d3e6:	42a1      	cmp	r1, r4
 800d3e8:	d008      	beq.n	800d3fc <memmove+0x28>
 800d3ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3f2:	e7f8      	b.n	800d3e6 <memmove+0x12>
 800d3f4:	4402      	add	r2, r0
 800d3f6:	4601      	mov	r1, r0
 800d3f8:	428a      	cmp	r2, r1
 800d3fa:	d100      	bne.n	800d3fe <memmove+0x2a>
 800d3fc:	bd10      	pop	{r4, pc}
 800d3fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d406:	e7f7      	b.n	800d3f8 <memmove+0x24>

0800d408 <strncmp>:
 800d408:	b510      	push	{r4, lr}
 800d40a:	b16a      	cbz	r2, 800d428 <strncmp+0x20>
 800d40c:	3901      	subs	r1, #1
 800d40e:	1884      	adds	r4, r0, r2
 800d410:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d414:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d418:	429a      	cmp	r2, r3
 800d41a:	d103      	bne.n	800d424 <strncmp+0x1c>
 800d41c:	42a0      	cmp	r0, r4
 800d41e:	d001      	beq.n	800d424 <strncmp+0x1c>
 800d420:	2a00      	cmp	r2, #0
 800d422:	d1f5      	bne.n	800d410 <strncmp+0x8>
 800d424:	1ad0      	subs	r0, r2, r3
 800d426:	bd10      	pop	{r4, pc}
 800d428:	4610      	mov	r0, r2
 800d42a:	e7fc      	b.n	800d426 <strncmp+0x1e>

0800d42c <_sbrk_r>:
 800d42c:	b538      	push	{r3, r4, r5, lr}
 800d42e:	4d06      	ldr	r5, [pc, #24]	@ (800d448 <_sbrk_r+0x1c>)
 800d430:	2300      	movs	r3, #0
 800d432:	4604      	mov	r4, r0
 800d434:	4608      	mov	r0, r1
 800d436:	602b      	str	r3, [r5, #0]
 800d438:	f7f4 fe4a 	bl	80020d0 <_sbrk>
 800d43c:	1c43      	adds	r3, r0, #1
 800d43e:	d102      	bne.n	800d446 <_sbrk_r+0x1a>
 800d440:	682b      	ldr	r3, [r5, #0]
 800d442:	b103      	cbz	r3, 800d446 <_sbrk_r+0x1a>
 800d444:	6023      	str	r3, [r4, #0]
 800d446:	bd38      	pop	{r3, r4, r5, pc}
 800d448:	2000509c 	.word	0x2000509c
 800d44c:	00000000 	.word	0x00000000

0800d450 <nan>:
 800d450:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d458 <nan+0x8>
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop
 800d458:	00000000 	.word	0x00000000
 800d45c:	7ff80000 	.word	0x7ff80000

0800d460 <__assert_func>:
 800d460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d462:	4614      	mov	r4, r2
 800d464:	461a      	mov	r2, r3
 800d466:	4b09      	ldr	r3, [pc, #36]	@ (800d48c <__assert_func+0x2c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4605      	mov	r5, r0
 800d46c:	68d8      	ldr	r0, [r3, #12]
 800d46e:	b954      	cbnz	r4, 800d486 <__assert_func+0x26>
 800d470:	4b07      	ldr	r3, [pc, #28]	@ (800d490 <__assert_func+0x30>)
 800d472:	461c      	mov	r4, r3
 800d474:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d478:	9100      	str	r1, [sp, #0]
 800d47a:	462b      	mov	r3, r5
 800d47c:	4905      	ldr	r1, [pc, #20]	@ (800d494 <__assert_func+0x34>)
 800d47e:	f000 fba7 	bl	800dbd0 <fiprintf>
 800d482:	f000 fbb7 	bl	800dbf4 <abort>
 800d486:	4b04      	ldr	r3, [pc, #16]	@ (800d498 <__assert_func+0x38>)
 800d488:	e7f4      	b.n	800d474 <__assert_func+0x14>
 800d48a:	bf00      	nop
 800d48c:	20000038 	.word	0x20000038
 800d490:	0800e6ed 	.word	0x0800e6ed
 800d494:	0800e6bf 	.word	0x0800e6bf
 800d498:	0800e6b2 	.word	0x0800e6b2

0800d49c <_calloc_r>:
 800d49c:	b570      	push	{r4, r5, r6, lr}
 800d49e:	fba1 5402 	umull	r5, r4, r1, r2
 800d4a2:	b93c      	cbnz	r4, 800d4b4 <_calloc_r+0x18>
 800d4a4:	4629      	mov	r1, r5
 800d4a6:	f7fe f9cf 	bl	800b848 <_malloc_r>
 800d4aa:	4606      	mov	r6, r0
 800d4ac:	b928      	cbnz	r0, 800d4ba <_calloc_r+0x1e>
 800d4ae:	2600      	movs	r6, #0
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	bd70      	pop	{r4, r5, r6, pc}
 800d4b4:	220c      	movs	r2, #12
 800d4b6:	6002      	str	r2, [r0, #0]
 800d4b8:	e7f9      	b.n	800d4ae <_calloc_r+0x12>
 800d4ba:	462a      	mov	r2, r5
 800d4bc:	4621      	mov	r1, r4
 800d4be:	f7fd fa08 	bl	800a8d2 <memset>
 800d4c2:	e7f5      	b.n	800d4b0 <_calloc_r+0x14>

0800d4c4 <rshift>:
 800d4c4:	6903      	ldr	r3, [r0, #16]
 800d4c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d4ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d4d2:	f100 0414 	add.w	r4, r0, #20
 800d4d6:	dd45      	ble.n	800d564 <rshift+0xa0>
 800d4d8:	f011 011f 	ands.w	r1, r1, #31
 800d4dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d4e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d4e4:	d10c      	bne.n	800d500 <rshift+0x3c>
 800d4e6:	f100 0710 	add.w	r7, r0, #16
 800d4ea:	4629      	mov	r1, r5
 800d4ec:	42b1      	cmp	r1, r6
 800d4ee:	d334      	bcc.n	800d55a <rshift+0x96>
 800d4f0:	1a9b      	subs	r3, r3, r2
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	1eea      	subs	r2, r5, #3
 800d4f6:	4296      	cmp	r6, r2
 800d4f8:	bf38      	it	cc
 800d4fa:	2300      	movcc	r3, #0
 800d4fc:	4423      	add	r3, r4
 800d4fe:	e015      	b.n	800d52c <rshift+0x68>
 800d500:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d504:	f1c1 0820 	rsb	r8, r1, #32
 800d508:	40cf      	lsrs	r7, r1
 800d50a:	f105 0e04 	add.w	lr, r5, #4
 800d50e:	46a1      	mov	r9, r4
 800d510:	4576      	cmp	r6, lr
 800d512:	46f4      	mov	ip, lr
 800d514:	d815      	bhi.n	800d542 <rshift+0x7e>
 800d516:	1a9a      	subs	r2, r3, r2
 800d518:	0092      	lsls	r2, r2, #2
 800d51a:	3a04      	subs	r2, #4
 800d51c:	3501      	adds	r5, #1
 800d51e:	42ae      	cmp	r6, r5
 800d520:	bf38      	it	cc
 800d522:	2200      	movcc	r2, #0
 800d524:	18a3      	adds	r3, r4, r2
 800d526:	50a7      	str	r7, [r4, r2]
 800d528:	b107      	cbz	r7, 800d52c <rshift+0x68>
 800d52a:	3304      	adds	r3, #4
 800d52c:	1b1a      	subs	r2, r3, r4
 800d52e:	42a3      	cmp	r3, r4
 800d530:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d534:	bf08      	it	eq
 800d536:	2300      	moveq	r3, #0
 800d538:	6102      	str	r2, [r0, #16]
 800d53a:	bf08      	it	eq
 800d53c:	6143      	streq	r3, [r0, #20]
 800d53e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d542:	f8dc c000 	ldr.w	ip, [ip]
 800d546:	fa0c fc08 	lsl.w	ip, ip, r8
 800d54a:	ea4c 0707 	orr.w	r7, ip, r7
 800d54e:	f849 7b04 	str.w	r7, [r9], #4
 800d552:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d556:	40cf      	lsrs	r7, r1
 800d558:	e7da      	b.n	800d510 <rshift+0x4c>
 800d55a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d55e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d562:	e7c3      	b.n	800d4ec <rshift+0x28>
 800d564:	4623      	mov	r3, r4
 800d566:	e7e1      	b.n	800d52c <rshift+0x68>

0800d568 <__hexdig_fun>:
 800d568:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d56c:	2b09      	cmp	r3, #9
 800d56e:	d802      	bhi.n	800d576 <__hexdig_fun+0xe>
 800d570:	3820      	subs	r0, #32
 800d572:	b2c0      	uxtb	r0, r0
 800d574:	4770      	bx	lr
 800d576:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d57a:	2b05      	cmp	r3, #5
 800d57c:	d801      	bhi.n	800d582 <__hexdig_fun+0x1a>
 800d57e:	3847      	subs	r0, #71	@ 0x47
 800d580:	e7f7      	b.n	800d572 <__hexdig_fun+0xa>
 800d582:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d586:	2b05      	cmp	r3, #5
 800d588:	d801      	bhi.n	800d58e <__hexdig_fun+0x26>
 800d58a:	3827      	subs	r0, #39	@ 0x27
 800d58c:	e7f1      	b.n	800d572 <__hexdig_fun+0xa>
 800d58e:	2000      	movs	r0, #0
 800d590:	4770      	bx	lr
	...

0800d594 <__gethex>:
 800d594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d598:	b085      	sub	sp, #20
 800d59a:	468a      	mov	sl, r1
 800d59c:	9302      	str	r3, [sp, #8]
 800d59e:	680b      	ldr	r3, [r1, #0]
 800d5a0:	9001      	str	r0, [sp, #4]
 800d5a2:	4690      	mov	r8, r2
 800d5a4:	1c9c      	adds	r4, r3, #2
 800d5a6:	46a1      	mov	r9, r4
 800d5a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d5ac:	2830      	cmp	r0, #48	@ 0x30
 800d5ae:	d0fa      	beq.n	800d5a6 <__gethex+0x12>
 800d5b0:	eba9 0303 	sub.w	r3, r9, r3
 800d5b4:	f1a3 0b02 	sub.w	fp, r3, #2
 800d5b8:	f7ff ffd6 	bl	800d568 <__hexdig_fun>
 800d5bc:	4605      	mov	r5, r0
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	d168      	bne.n	800d694 <__gethex+0x100>
 800d5c2:	49a0      	ldr	r1, [pc, #640]	@ (800d844 <__gethex+0x2b0>)
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	4648      	mov	r0, r9
 800d5c8:	f7ff ff1e 	bl	800d408 <strncmp>
 800d5cc:	4607      	mov	r7, r0
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	d167      	bne.n	800d6a2 <__gethex+0x10e>
 800d5d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d5d6:	4626      	mov	r6, r4
 800d5d8:	f7ff ffc6 	bl	800d568 <__hexdig_fun>
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	d062      	beq.n	800d6a6 <__gethex+0x112>
 800d5e0:	4623      	mov	r3, r4
 800d5e2:	7818      	ldrb	r0, [r3, #0]
 800d5e4:	2830      	cmp	r0, #48	@ 0x30
 800d5e6:	4699      	mov	r9, r3
 800d5e8:	f103 0301 	add.w	r3, r3, #1
 800d5ec:	d0f9      	beq.n	800d5e2 <__gethex+0x4e>
 800d5ee:	f7ff ffbb 	bl	800d568 <__hexdig_fun>
 800d5f2:	fab0 f580 	clz	r5, r0
 800d5f6:	096d      	lsrs	r5, r5, #5
 800d5f8:	f04f 0b01 	mov.w	fp, #1
 800d5fc:	464a      	mov	r2, r9
 800d5fe:	4616      	mov	r6, r2
 800d600:	3201      	adds	r2, #1
 800d602:	7830      	ldrb	r0, [r6, #0]
 800d604:	f7ff ffb0 	bl	800d568 <__hexdig_fun>
 800d608:	2800      	cmp	r0, #0
 800d60a:	d1f8      	bne.n	800d5fe <__gethex+0x6a>
 800d60c:	498d      	ldr	r1, [pc, #564]	@ (800d844 <__gethex+0x2b0>)
 800d60e:	2201      	movs	r2, #1
 800d610:	4630      	mov	r0, r6
 800d612:	f7ff fef9 	bl	800d408 <strncmp>
 800d616:	2800      	cmp	r0, #0
 800d618:	d13f      	bne.n	800d69a <__gethex+0x106>
 800d61a:	b944      	cbnz	r4, 800d62e <__gethex+0x9a>
 800d61c:	1c74      	adds	r4, r6, #1
 800d61e:	4622      	mov	r2, r4
 800d620:	4616      	mov	r6, r2
 800d622:	3201      	adds	r2, #1
 800d624:	7830      	ldrb	r0, [r6, #0]
 800d626:	f7ff ff9f 	bl	800d568 <__hexdig_fun>
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d1f8      	bne.n	800d620 <__gethex+0x8c>
 800d62e:	1ba4      	subs	r4, r4, r6
 800d630:	00a7      	lsls	r7, r4, #2
 800d632:	7833      	ldrb	r3, [r6, #0]
 800d634:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d638:	2b50      	cmp	r3, #80	@ 0x50
 800d63a:	d13e      	bne.n	800d6ba <__gethex+0x126>
 800d63c:	7873      	ldrb	r3, [r6, #1]
 800d63e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d640:	d033      	beq.n	800d6aa <__gethex+0x116>
 800d642:	2b2d      	cmp	r3, #45	@ 0x2d
 800d644:	d034      	beq.n	800d6b0 <__gethex+0x11c>
 800d646:	1c71      	adds	r1, r6, #1
 800d648:	2400      	movs	r4, #0
 800d64a:	7808      	ldrb	r0, [r1, #0]
 800d64c:	f7ff ff8c 	bl	800d568 <__hexdig_fun>
 800d650:	1e43      	subs	r3, r0, #1
 800d652:	b2db      	uxtb	r3, r3
 800d654:	2b18      	cmp	r3, #24
 800d656:	d830      	bhi.n	800d6ba <__gethex+0x126>
 800d658:	f1a0 0210 	sub.w	r2, r0, #16
 800d65c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d660:	f7ff ff82 	bl	800d568 <__hexdig_fun>
 800d664:	f100 3cff 	add.w	ip, r0, #4294967295
 800d668:	fa5f fc8c 	uxtb.w	ip, ip
 800d66c:	f1bc 0f18 	cmp.w	ip, #24
 800d670:	f04f 030a 	mov.w	r3, #10
 800d674:	d91e      	bls.n	800d6b4 <__gethex+0x120>
 800d676:	b104      	cbz	r4, 800d67a <__gethex+0xe6>
 800d678:	4252      	negs	r2, r2
 800d67a:	4417      	add	r7, r2
 800d67c:	f8ca 1000 	str.w	r1, [sl]
 800d680:	b1ed      	cbz	r5, 800d6be <__gethex+0x12a>
 800d682:	f1bb 0f00 	cmp.w	fp, #0
 800d686:	bf0c      	ite	eq
 800d688:	2506      	moveq	r5, #6
 800d68a:	2500      	movne	r5, #0
 800d68c:	4628      	mov	r0, r5
 800d68e:	b005      	add	sp, #20
 800d690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d694:	2500      	movs	r5, #0
 800d696:	462c      	mov	r4, r5
 800d698:	e7b0      	b.n	800d5fc <__gethex+0x68>
 800d69a:	2c00      	cmp	r4, #0
 800d69c:	d1c7      	bne.n	800d62e <__gethex+0x9a>
 800d69e:	4627      	mov	r7, r4
 800d6a0:	e7c7      	b.n	800d632 <__gethex+0x9e>
 800d6a2:	464e      	mov	r6, r9
 800d6a4:	462f      	mov	r7, r5
 800d6a6:	2501      	movs	r5, #1
 800d6a8:	e7c3      	b.n	800d632 <__gethex+0x9e>
 800d6aa:	2400      	movs	r4, #0
 800d6ac:	1cb1      	adds	r1, r6, #2
 800d6ae:	e7cc      	b.n	800d64a <__gethex+0xb6>
 800d6b0:	2401      	movs	r4, #1
 800d6b2:	e7fb      	b.n	800d6ac <__gethex+0x118>
 800d6b4:	fb03 0002 	mla	r0, r3, r2, r0
 800d6b8:	e7ce      	b.n	800d658 <__gethex+0xc4>
 800d6ba:	4631      	mov	r1, r6
 800d6bc:	e7de      	b.n	800d67c <__gethex+0xe8>
 800d6be:	eba6 0309 	sub.w	r3, r6, r9
 800d6c2:	3b01      	subs	r3, #1
 800d6c4:	4629      	mov	r1, r5
 800d6c6:	2b07      	cmp	r3, #7
 800d6c8:	dc0a      	bgt.n	800d6e0 <__gethex+0x14c>
 800d6ca:	9801      	ldr	r0, [sp, #4]
 800d6cc:	f7fe f948 	bl	800b960 <_Balloc>
 800d6d0:	4604      	mov	r4, r0
 800d6d2:	b940      	cbnz	r0, 800d6e6 <__gethex+0x152>
 800d6d4:	4b5c      	ldr	r3, [pc, #368]	@ (800d848 <__gethex+0x2b4>)
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	21e4      	movs	r1, #228	@ 0xe4
 800d6da:	485c      	ldr	r0, [pc, #368]	@ (800d84c <__gethex+0x2b8>)
 800d6dc:	f7ff fec0 	bl	800d460 <__assert_func>
 800d6e0:	3101      	adds	r1, #1
 800d6e2:	105b      	asrs	r3, r3, #1
 800d6e4:	e7ef      	b.n	800d6c6 <__gethex+0x132>
 800d6e6:	f100 0a14 	add.w	sl, r0, #20
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	4655      	mov	r5, sl
 800d6ee:	469b      	mov	fp, r3
 800d6f0:	45b1      	cmp	r9, r6
 800d6f2:	d337      	bcc.n	800d764 <__gethex+0x1d0>
 800d6f4:	f845 bb04 	str.w	fp, [r5], #4
 800d6f8:	eba5 050a 	sub.w	r5, r5, sl
 800d6fc:	10ad      	asrs	r5, r5, #2
 800d6fe:	6125      	str	r5, [r4, #16]
 800d700:	4658      	mov	r0, fp
 800d702:	f7fe fa1f 	bl	800bb44 <__hi0bits>
 800d706:	016d      	lsls	r5, r5, #5
 800d708:	f8d8 6000 	ldr.w	r6, [r8]
 800d70c:	1a2d      	subs	r5, r5, r0
 800d70e:	42b5      	cmp	r5, r6
 800d710:	dd54      	ble.n	800d7bc <__gethex+0x228>
 800d712:	1bad      	subs	r5, r5, r6
 800d714:	4629      	mov	r1, r5
 800d716:	4620      	mov	r0, r4
 800d718:	f7fe fdb3 	bl	800c282 <__any_on>
 800d71c:	4681      	mov	r9, r0
 800d71e:	b178      	cbz	r0, 800d740 <__gethex+0x1ac>
 800d720:	1e6b      	subs	r3, r5, #1
 800d722:	1159      	asrs	r1, r3, #5
 800d724:	f003 021f 	and.w	r2, r3, #31
 800d728:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d72c:	f04f 0901 	mov.w	r9, #1
 800d730:	fa09 f202 	lsl.w	r2, r9, r2
 800d734:	420a      	tst	r2, r1
 800d736:	d003      	beq.n	800d740 <__gethex+0x1ac>
 800d738:	454b      	cmp	r3, r9
 800d73a:	dc36      	bgt.n	800d7aa <__gethex+0x216>
 800d73c:	f04f 0902 	mov.w	r9, #2
 800d740:	4629      	mov	r1, r5
 800d742:	4620      	mov	r0, r4
 800d744:	f7ff febe 	bl	800d4c4 <rshift>
 800d748:	442f      	add	r7, r5
 800d74a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d74e:	42bb      	cmp	r3, r7
 800d750:	da42      	bge.n	800d7d8 <__gethex+0x244>
 800d752:	9801      	ldr	r0, [sp, #4]
 800d754:	4621      	mov	r1, r4
 800d756:	f7fe f943 	bl	800b9e0 <_Bfree>
 800d75a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d75c:	2300      	movs	r3, #0
 800d75e:	6013      	str	r3, [r2, #0]
 800d760:	25a3      	movs	r5, #163	@ 0xa3
 800d762:	e793      	b.n	800d68c <__gethex+0xf8>
 800d764:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d768:	2a2e      	cmp	r2, #46	@ 0x2e
 800d76a:	d012      	beq.n	800d792 <__gethex+0x1fe>
 800d76c:	2b20      	cmp	r3, #32
 800d76e:	d104      	bne.n	800d77a <__gethex+0x1e6>
 800d770:	f845 bb04 	str.w	fp, [r5], #4
 800d774:	f04f 0b00 	mov.w	fp, #0
 800d778:	465b      	mov	r3, fp
 800d77a:	7830      	ldrb	r0, [r6, #0]
 800d77c:	9303      	str	r3, [sp, #12]
 800d77e:	f7ff fef3 	bl	800d568 <__hexdig_fun>
 800d782:	9b03      	ldr	r3, [sp, #12]
 800d784:	f000 000f 	and.w	r0, r0, #15
 800d788:	4098      	lsls	r0, r3
 800d78a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d78e:	3304      	adds	r3, #4
 800d790:	e7ae      	b.n	800d6f0 <__gethex+0x15c>
 800d792:	45b1      	cmp	r9, r6
 800d794:	d8ea      	bhi.n	800d76c <__gethex+0x1d8>
 800d796:	492b      	ldr	r1, [pc, #172]	@ (800d844 <__gethex+0x2b0>)
 800d798:	9303      	str	r3, [sp, #12]
 800d79a:	2201      	movs	r2, #1
 800d79c:	4630      	mov	r0, r6
 800d79e:	f7ff fe33 	bl	800d408 <strncmp>
 800d7a2:	9b03      	ldr	r3, [sp, #12]
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	d1e1      	bne.n	800d76c <__gethex+0x1d8>
 800d7a8:	e7a2      	b.n	800d6f0 <__gethex+0x15c>
 800d7aa:	1ea9      	subs	r1, r5, #2
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f7fe fd68 	bl	800c282 <__any_on>
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	d0c2      	beq.n	800d73c <__gethex+0x1a8>
 800d7b6:	f04f 0903 	mov.w	r9, #3
 800d7ba:	e7c1      	b.n	800d740 <__gethex+0x1ac>
 800d7bc:	da09      	bge.n	800d7d2 <__gethex+0x23e>
 800d7be:	1b75      	subs	r5, r6, r5
 800d7c0:	4621      	mov	r1, r4
 800d7c2:	9801      	ldr	r0, [sp, #4]
 800d7c4:	462a      	mov	r2, r5
 800d7c6:	f7fe fb23 	bl	800be10 <__lshift>
 800d7ca:	1b7f      	subs	r7, r7, r5
 800d7cc:	4604      	mov	r4, r0
 800d7ce:	f100 0a14 	add.w	sl, r0, #20
 800d7d2:	f04f 0900 	mov.w	r9, #0
 800d7d6:	e7b8      	b.n	800d74a <__gethex+0x1b6>
 800d7d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d7dc:	42bd      	cmp	r5, r7
 800d7de:	dd6f      	ble.n	800d8c0 <__gethex+0x32c>
 800d7e0:	1bed      	subs	r5, r5, r7
 800d7e2:	42ae      	cmp	r6, r5
 800d7e4:	dc34      	bgt.n	800d850 <__gethex+0x2bc>
 800d7e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7ea:	2b02      	cmp	r3, #2
 800d7ec:	d022      	beq.n	800d834 <__gethex+0x2a0>
 800d7ee:	2b03      	cmp	r3, #3
 800d7f0:	d024      	beq.n	800d83c <__gethex+0x2a8>
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d115      	bne.n	800d822 <__gethex+0x28e>
 800d7f6:	42ae      	cmp	r6, r5
 800d7f8:	d113      	bne.n	800d822 <__gethex+0x28e>
 800d7fa:	2e01      	cmp	r6, #1
 800d7fc:	d10b      	bne.n	800d816 <__gethex+0x282>
 800d7fe:	9a02      	ldr	r2, [sp, #8]
 800d800:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d804:	6013      	str	r3, [r2, #0]
 800d806:	2301      	movs	r3, #1
 800d808:	6123      	str	r3, [r4, #16]
 800d80a:	f8ca 3000 	str.w	r3, [sl]
 800d80e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d810:	2562      	movs	r5, #98	@ 0x62
 800d812:	601c      	str	r4, [r3, #0]
 800d814:	e73a      	b.n	800d68c <__gethex+0xf8>
 800d816:	1e71      	subs	r1, r6, #1
 800d818:	4620      	mov	r0, r4
 800d81a:	f7fe fd32 	bl	800c282 <__any_on>
 800d81e:	2800      	cmp	r0, #0
 800d820:	d1ed      	bne.n	800d7fe <__gethex+0x26a>
 800d822:	9801      	ldr	r0, [sp, #4]
 800d824:	4621      	mov	r1, r4
 800d826:	f7fe f8db 	bl	800b9e0 <_Bfree>
 800d82a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d82c:	2300      	movs	r3, #0
 800d82e:	6013      	str	r3, [r2, #0]
 800d830:	2550      	movs	r5, #80	@ 0x50
 800d832:	e72b      	b.n	800d68c <__gethex+0xf8>
 800d834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d836:	2b00      	cmp	r3, #0
 800d838:	d1f3      	bne.n	800d822 <__gethex+0x28e>
 800d83a:	e7e0      	b.n	800d7fe <__gethex+0x26a>
 800d83c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d1dd      	bne.n	800d7fe <__gethex+0x26a>
 800d842:	e7ee      	b.n	800d822 <__gethex+0x28e>
 800d844:	0800e540 	.word	0x0800e540
 800d848:	0800e3d6 	.word	0x0800e3d6
 800d84c:	0800e6ee 	.word	0x0800e6ee
 800d850:	1e6f      	subs	r7, r5, #1
 800d852:	f1b9 0f00 	cmp.w	r9, #0
 800d856:	d130      	bne.n	800d8ba <__gethex+0x326>
 800d858:	b127      	cbz	r7, 800d864 <__gethex+0x2d0>
 800d85a:	4639      	mov	r1, r7
 800d85c:	4620      	mov	r0, r4
 800d85e:	f7fe fd10 	bl	800c282 <__any_on>
 800d862:	4681      	mov	r9, r0
 800d864:	117a      	asrs	r2, r7, #5
 800d866:	2301      	movs	r3, #1
 800d868:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d86c:	f007 071f 	and.w	r7, r7, #31
 800d870:	40bb      	lsls	r3, r7
 800d872:	4213      	tst	r3, r2
 800d874:	4629      	mov	r1, r5
 800d876:	4620      	mov	r0, r4
 800d878:	bf18      	it	ne
 800d87a:	f049 0902 	orrne.w	r9, r9, #2
 800d87e:	f7ff fe21 	bl	800d4c4 <rshift>
 800d882:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d886:	1b76      	subs	r6, r6, r5
 800d888:	2502      	movs	r5, #2
 800d88a:	f1b9 0f00 	cmp.w	r9, #0
 800d88e:	d047      	beq.n	800d920 <__gethex+0x38c>
 800d890:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d894:	2b02      	cmp	r3, #2
 800d896:	d015      	beq.n	800d8c4 <__gethex+0x330>
 800d898:	2b03      	cmp	r3, #3
 800d89a:	d017      	beq.n	800d8cc <__gethex+0x338>
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d109      	bne.n	800d8b4 <__gethex+0x320>
 800d8a0:	f019 0f02 	tst.w	r9, #2
 800d8a4:	d006      	beq.n	800d8b4 <__gethex+0x320>
 800d8a6:	f8da 3000 	ldr.w	r3, [sl]
 800d8aa:	ea49 0903 	orr.w	r9, r9, r3
 800d8ae:	f019 0f01 	tst.w	r9, #1
 800d8b2:	d10e      	bne.n	800d8d2 <__gethex+0x33e>
 800d8b4:	f045 0510 	orr.w	r5, r5, #16
 800d8b8:	e032      	b.n	800d920 <__gethex+0x38c>
 800d8ba:	f04f 0901 	mov.w	r9, #1
 800d8be:	e7d1      	b.n	800d864 <__gethex+0x2d0>
 800d8c0:	2501      	movs	r5, #1
 800d8c2:	e7e2      	b.n	800d88a <__gethex+0x2f6>
 800d8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8c6:	f1c3 0301 	rsb	r3, r3, #1
 800d8ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d8cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d0f0      	beq.n	800d8b4 <__gethex+0x320>
 800d8d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d8d6:	f104 0314 	add.w	r3, r4, #20
 800d8da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d8de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d8e2:	f04f 0c00 	mov.w	ip, #0
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d8f0:	d01b      	beq.n	800d92a <__gethex+0x396>
 800d8f2:	3201      	adds	r2, #1
 800d8f4:	6002      	str	r2, [r0, #0]
 800d8f6:	2d02      	cmp	r5, #2
 800d8f8:	f104 0314 	add.w	r3, r4, #20
 800d8fc:	d13c      	bne.n	800d978 <__gethex+0x3e4>
 800d8fe:	f8d8 2000 	ldr.w	r2, [r8]
 800d902:	3a01      	subs	r2, #1
 800d904:	42b2      	cmp	r2, r6
 800d906:	d109      	bne.n	800d91c <__gethex+0x388>
 800d908:	1171      	asrs	r1, r6, #5
 800d90a:	2201      	movs	r2, #1
 800d90c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d910:	f006 061f 	and.w	r6, r6, #31
 800d914:	fa02 f606 	lsl.w	r6, r2, r6
 800d918:	421e      	tst	r6, r3
 800d91a:	d13a      	bne.n	800d992 <__gethex+0x3fe>
 800d91c:	f045 0520 	orr.w	r5, r5, #32
 800d920:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d922:	601c      	str	r4, [r3, #0]
 800d924:	9b02      	ldr	r3, [sp, #8]
 800d926:	601f      	str	r7, [r3, #0]
 800d928:	e6b0      	b.n	800d68c <__gethex+0xf8>
 800d92a:	4299      	cmp	r1, r3
 800d92c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d930:	d8d9      	bhi.n	800d8e6 <__gethex+0x352>
 800d932:	68a3      	ldr	r3, [r4, #8]
 800d934:	459b      	cmp	fp, r3
 800d936:	db17      	blt.n	800d968 <__gethex+0x3d4>
 800d938:	6861      	ldr	r1, [r4, #4]
 800d93a:	9801      	ldr	r0, [sp, #4]
 800d93c:	3101      	adds	r1, #1
 800d93e:	f7fe f80f 	bl	800b960 <_Balloc>
 800d942:	4681      	mov	r9, r0
 800d944:	b918      	cbnz	r0, 800d94e <__gethex+0x3ba>
 800d946:	4b1a      	ldr	r3, [pc, #104]	@ (800d9b0 <__gethex+0x41c>)
 800d948:	4602      	mov	r2, r0
 800d94a:	2184      	movs	r1, #132	@ 0x84
 800d94c:	e6c5      	b.n	800d6da <__gethex+0x146>
 800d94e:	6922      	ldr	r2, [r4, #16]
 800d950:	3202      	adds	r2, #2
 800d952:	f104 010c 	add.w	r1, r4, #12
 800d956:	0092      	lsls	r2, r2, #2
 800d958:	300c      	adds	r0, #12
 800d95a:	f7fd f89e 	bl	800aa9a <memcpy>
 800d95e:	4621      	mov	r1, r4
 800d960:	9801      	ldr	r0, [sp, #4]
 800d962:	f7fe f83d 	bl	800b9e0 <_Bfree>
 800d966:	464c      	mov	r4, r9
 800d968:	6923      	ldr	r3, [r4, #16]
 800d96a:	1c5a      	adds	r2, r3, #1
 800d96c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d970:	6122      	str	r2, [r4, #16]
 800d972:	2201      	movs	r2, #1
 800d974:	615a      	str	r2, [r3, #20]
 800d976:	e7be      	b.n	800d8f6 <__gethex+0x362>
 800d978:	6922      	ldr	r2, [r4, #16]
 800d97a:	455a      	cmp	r2, fp
 800d97c:	dd0b      	ble.n	800d996 <__gethex+0x402>
 800d97e:	2101      	movs	r1, #1
 800d980:	4620      	mov	r0, r4
 800d982:	f7ff fd9f 	bl	800d4c4 <rshift>
 800d986:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d98a:	3701      	adds	r7, #1
 800d98c:	42bb      	cmp	r3, r7
 800d98e:	f6ff aee0 	blt.w	800d752 <__gethex+0x1be>
 800d992:	2501      	movs	r5, #1
 800d994:	e7c2      	b.n	800d91c <__gethex+0x388>
 800d996:	f016 061f 	ands.w	r6, r6, #31
 800d99a:	d0fa      	beq.n	800d992 <__gethex+0x3fe>
 800d99c:	4453      	add	r3, sl
 800d99e:	f1c6 0620 	rsb	r6, r6, #32
 800d9a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d9a6:	f7fe f8cd 	bl	800bb44 <__hi0bits>
 800d9aa:	42b0      	cmp	r0, r6
 800d9ac:	dbe7      	blt.n	800d97e <__gethex+0x3ea>
 800d9ae:	e7f0      	b.n	800d992 <__gethex+0x3fe>
 800d9b0:	0800e3d6 	.word	0x0800e3d6

0800d9b4 <L_shift>:
 800d9b4:	f1c2 0208 	rsb	r2, r2, #8
 800d9b8:	0092      	lsls	r2, r2, #2
 800d9ba:	b570      	push	{r4, r5, r6, lr}
 800d9bc:	f1c2 0620 	rsb	r6, r2, #32
 800d9c0:	6843      	ldr	r3, [r0, #4]
 800d9c2:	6804      	ldr	r4, [r0, #0]
 800d9c4:	fa03 f506 	lsl.w	r5, r3, r6
 800d9c8:	432c      	orrs	r4, r5
 800d9ca:	40d3      	lsrs	r3, r2
 800d9cc:	6004      	str	r4, [r0, #0]
 800d9ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800d9d2:	4288      	cmp	r0, r1
 800d9d4:	d3f4      	bcc.n	800d9c0 <L_shift+0xc>
 800d9d6:	bd70      	pop	{r4, r5, r6, pc}

0800d9d8 <__match>:
 800d9d8:	b530      	push	{r4, r5, lr}
 800d9da:	6803      	ldr	r3, [r0, #0]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9e2:	b914      	cbnz	r4, 800d9ea <__match+0x12>
 800d9e4:	6003      	str	r3, [r0, #0]
 800d9e6:	2001      	movs	r0, #1
 800d9e8:	bd30      	pop	{r4, r5, pc}
 800d9ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d9f2:	2d19      	cmp	r5, #25
 800d9f4:	bf98      	it	ls
 800d9f6:	3220      	addls	r2, #32
 800d9f8:	42a2      	cmp	r2, r4
 800d9fa:	d0f0      	beq.n	800d9de <__match+0x6>
 800d9fc:	2000      	movs	r0, #0
 800d9fe:	e7f3      	b.n	800d9e8 <__match+0x10>

0800da00 <__hexnan>:
 800da00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da04:	680b      	ldr	r3, [r1, #0]
 800da06:	6801      	ldr	r1, [r0, #0]
 800da08:	115e      	asrs	r6, r3, #5
 800da0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800da0e:	f013 031f 	ands.w	r3, r3, #31
 800da12:	b087      	sub	sp, #28
 800da14:	bf18      	it	ne
 800da16:	3604      	addne	r6, #4
 800da18:	2500      	movs	r5, #0
 800da1a:	1f37      	subs	r7, r6, #4
 800da1c:	4682      	mov	sl, r0
 800da1e:	4690      	mov	r8, r2
 800da20:	9301      	str	r3, [sp, #4]
 800da22:	f846 5c04 	str.w	r5, [r6, #-4]
 800da26:	46b9      	mov	r9, r7
 800da28:	463c      	mov	r4, r7
 800da2a:	9502      	str	r5, [sp, #8]
 800da2c:	46ab      	mov	fp, r5
 800da2e:	784a      	ldrb	r2, [r1, #1]
 800da30:	1c4b      	adds	r3, r1, #1
 800da32:	9303      	str	r3, [sp, #12]
 800da34:	b342      	cbz	r2, 800da88 <__hexnan+0x88>
 800da36:	4610      	mov	r0, r2
 800da38:	9105      	str	r1, [sp, #20]
 800da3a:	9204      	str	r2, [sp, #16]
 800da3c:	f7ff fd94 	bl	800d568 <__hexdig_fun>
 800da40:	2800      	cmp	r0, #0
 800da42:	d151      	bne.n	800dae8 <__hexnan+0xe8>
 800da44:	9a04      	ldr	r2, [sp, #16]
 800da46:	9905      	ldr	r1, [sp, #20]
 800da48:	2a20      	cmp	r2, #32
 800da4a:	d818      	bhi.n	800da7e <__hexnan+0x7e>
 800da4c:	9b02      	ldr	r3, [sp, #8]
 800da4e:	459b      	cmp	fp, r3
 800da50:	dd13      	ble.n	800da7a <__hexnan+0x7a>
 800da52:	454c      	cmp	r4, r9
 800da54:	d206      	bcs.n	800da64 <__hexnan+0x64>
 800da56:	2d07      	cmp	r5, #7
 800da58:	dc04      	bgt.n	800da64 <__hexnan+0x64>
 800da5a:	462a      	mov	r2, r5
 800da5c:	4649      	mov	r1, r9
 800da5e:	4620      	mov	r0, r4
 800da60:	f7ff ffa8 	bl	800d9b4 <L_shift>
 800da64:	4544      	cmp	r4, r8
 800da66:	d952      	bls.n	800db0e <__hexnan+0x10e>
 800da68:	2300      	movs	r3, #0
 800da6a:	f1a4 0904 	sub.w	r9, r4, #4
 800da6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800da72:	f8cd b008 	str.w	fp, [sp, #8]
 800da76:	464c      	mov	r4, r9
 800da78:	461d      	mov	r5, r3
 800da7a:	9903      	ldr	r1, [sp, #12]
 800da7c:	e7d7      	b.n	800da2e <__hexnan+0x2e>
 800da7e:	2a29      	cmp	r2, #41	@ 0x29
 800da80:	d157      	bne.n	800db32 <__hexnan+0x132>
 800da82:	3102      	adds	r1, #2
 800da84:	f8ca 1000 	str.w	r1, [sl]
 800da88:	f1bb 0f00 	cmp.w	fp, #0
 800da8c:	d051      	beq.n	800db32 <__hexnan+0x132>
 800da8e:	454c      	cmp	r4, r9
 800da90:	d206      	bcs.n	800daa0 <__hexnan+0xa0>
 800da92:	2d07      	cmp	r5, #7
 800da94:	dc04      	bgt.n	800daa0 <__hexnan+0xa0>
 800da96:	462a      	mov	r2, r5
 800da98:	4649      	mov	r1, r9
 800da9a:	4620      	mov	r0, r4
 800da9c:	f7ff ff8a 	bl	800d9b4 <L_shift>
 800daa0:	4544      	cmp	r4, r8
 800daa2:	d936      	bls.n	800db12 <__hexnan+0x112>
 800daa4:	f1a8 0204 	sub.w	r2, r8, #4
 800daa8:	4623      	mov	r3, r4
 800daaa:	f853 1b04 	ldr.w	r1, [r3], #4
 800daae:	f842 1f04 	str.w	r1, [r2, #4]!
 800dab2:	429f      	cmp	r7, r3
 800dab4:	d2f9      	bcs.n	800daaa <__hexnan+0xaa>
 800dab6:	1b3b      	subs	r3, r7, r4
 800dab8:	f023 0303 	bic.w	r3, r3, #3
 800dabc:	3304      	adds	r3, #4
 800dabe:	3401      	adds	r4, #1
 800dac0:	3e03      	subs	r6, #3
 800dac2:	42b4      	cmp	r4, r6
 800dac4:	bf88      	it	hi
 800dac6:	2304      	movhi	r3, #4
 800dac8:	4443      	add	r3, r8
 800daca:	2200      	movs	r2, #0
 800dacc:	f843 2b04 	str.w	r2, [r3], #4
 800dad0:	429f      	cmp	r7, r3
 800dad2:	d2fb      	bcs.n	800dacc <__hexnan+0xcc>
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	b91b      	cbnz	r3, 800dae0 <__hexnan+0xe0>
 800dad8:	4547      	cmp	r7, r8
 800dada:	d128      	bne.n	800db2e <__hexnan+0x12e>
 800dadc:	2301      	movs	r3, #1
 800dade:	603b      	str	r3, [r7, #0]
 800dae0:	2005      	movs	r0, #5
 800dae2:	b007      	add	sp, #28
 800dae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae8:	3501      	adds	r5, #1
 800daea:	2d08      	cmp	r5, #8
 800daec:	f10b 0b01 	add.w	fp, fp, #1
 800daf0:	dd06      	ble.n	800db00 <__hexnan+0x100>
 800daf2:	4544      	cmp	r4, r8
 800daf4:	d9c1      	bls.n	800da7a <__hexnan+0x7a>
 800daf6:	2300      	movs	r3, #0
 800daf8:	f844 3c04 	str.w	r3, [r4, #-4]
 800dafc:	2501      	movs	r5, #1
 800dafe:	3c04      	subs	r4, #4
 800db00:	6822      	ldr	r2, [r4, #0]
 800db02:	f000 000f 	and.w	r0, r0, #15
 800db06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800db0a:	6020      	str	r0, [r4, #0]
 800db0c:	e7b5      	b.n	800da7a <__hexnan+0x7a>
 800db0e:	2508      	movs	r5, #8
 800db10:	e7b3      	b.n	800da7a <__hexnan+0x7a>
 800db12:	9b01      	ldr	r3, [sp, #4]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d0dd      	beq.n	800dad4 <__hexnan+0xd4>
 800db18:	f1c3 0320 	rsb	r3, r3, #32
 800db1c:	f04f 32ff 	mov.w	r2, #4294967295
 800db20:	40da      	lsrs	r2, r3
 800db22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800db26:	4013      	ands	r3, r2
 800db28:	f846 3c04 	str.w	r3, [r6, #-4]
 800db2c:	e7d2      	b.n	800dad4 <__hexnan+0xd4>
 800db2e:	3f04      	subs	r7, #4
 800db30:	e7d0      	b.n	800dad4 <__hexnan+0xd4>
 800db32:	2004      	movs	r0, #4
 800db34:	e7d5      	b.n	800dae2 <__hexnan+0xe2>

0800db36 <__ascii_mbtowc>:
 800db36:	b082      	sub	sp, #8
 800db38:	b901      	cbnz	r1, 800db3c <__ascii_mbtowc+0x6>
 800db3a:	a901      	add	r1, sp, #4
 800db3c:	b142      	cbz	r2, 800db50 <__ascii_mbtowc+0x1a>
 800db3e:	b14b      	cbz	r3, 800db54 <__ascii_mbtowc+0x1e>
 800db40:	7813      	ldrb	r3, [r2, #0]
 800db42:	600b      	str	r3, [r1, #0]
 800db44:	7812      	ldrb	r2, [r2, #0]
 800db46:	1e10      	subs	r0, r2, #0
 800db48:	bf18      	it	ne
 800db4a:	2001      	movne	r0, #1
 800db4c:	b002      	add	sp, #8
 800db4e:	4770      	bx	lr
 800db50:	4610      	mov	r0, r2
 800db52:	e7fb      	b.n	800db4c <__ascii_mbtowc+0x16>
 800db54:	f06f 0001 	mvn.w	r0, #1
 800db58:	e7f8      	b.n	800db4c <__ascii_mbtowc+0x16>

0800db5a <_realloc_r>:
 800db5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db5e:	4680      	mov	r8, r0
 800db60:	4615      	mov	r5, r2
 800db62:	460c      	mov	r4, r1
 800db64:	b921      	cbnz	r1, 800db70 <_realloc_r+0x16>
 800db66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db6a:	4611      	mov	r1, r2
 800db6c:	f7fd be6c 	b.w	800b848 <_malloc_r>
 800db70:	b92a      	cbnz	r2, 800db7e <_realloc_r+0x24>
 800db72:	f7fd fdf5 	bl	800b760 <_free_r>
 800db76:	2400      	movs	r4, #0
 800db78:	4620      	mov	r0, r4
 800db7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db7e:	f000 f840 	bl	800dc02 <_malloc_usable_size_r>
 800db82:	4285      	cmp	r5, r0
 800db84:	4606      	mov	r6, r0
 800db86:	d802      	bhi.n	800db8e <_realloc_r+0x34>
 800db88:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800db8c:	d8f4      	bhi.n	800db78 <_realloc_r+0x1e>
 800db8e:	4629      	mov	r1, r5
 800db90:	4640      	mov	r0, r8
 800db92:	f7fd fe59 	bl	800b848 <_malloc_r>
 800db96:	4607      	mov	r7, r0
 800db98:	2800      	cmp	r0, #0
 800db9a:	d0ec      	beq.n	800db76 <_realloc_r+0x1c>
 800db9c:	42b5      	cmp	r5, r6
 800db9e:	462a      	mov	r2, r5
 800dba0:	4621      	mov	r1, r4
 800dba2:	bf28      	it	cs
 800dba4:	4632      	movcs	r2, r6
 800dba6:	f7fc ff78 	bl	800aa9a <memcpy>
 800dbaa:	4621      	mov	r1, r4
 800dbac:	4640      	mov	r0, r8
 800dbae:	f7fd fdd7 	bl	800b760 <_free_r>
 800dbb2:	463c      	mov	r4, r7
 800dbb4:	e7e0      	b.n	800db78 <_realloc_r+0x1e>

0800dbb6 <__ascii_wctomb>:
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	4608      	mov	r0, r1
 800dbba:	b141      	cbz	r1, 800dbce <__ascii_wctomb+0x18>
 800dbbc:	2aff      	cmp	r2, #255	@ 0xff
 800dbbe:	d904      	bls.n	800dbca <__ascii_wctomb+0x14>
 800dbc0:	228a      	movs	r2, #138	@ 0x8a
 800dbc2:	601a      	str	r2, [r3, #0]
 800dbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc8:	4770      	bx	lr
 800dbca:	700a      	strb	r2, [r1, #0]
 800dbcc:	2001      	movs	r0, #1
 800dbce:	4770      	bx	lr

0800dbd0 <fiprintf>:
 800dbd0:	b40e      	push	{r1, r2, r3}
 800dbd2:	b503      	push	{r0, r1, lr}
 800dbd4:	4601      	mov	r1, r0
 800dbd6:	ab03      	add	r3, sp, #12
 800dbd8:	4805      	ldr	r0, [pc, #20]	@ (800dbf0 <fiprintf+0x20>)
 800dbda:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbde:	6800      	ldr	r0, [r0, #0]
 800dbe0:	9301      	str	r3, [sp, #4]
 800dbe2:	f000 f83f 	bl	800dc64 <_vfiprintf_r>
 800dbe6:	b002      	add	sp, #8
 800dbe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbec:	b003      	add	sp, #12
 800dbee:	4770      	bx	lr
 800dbf0:	20000038 	.word	0x20000038

0800dbf4 <abort>:
 800dbf4:	b508      	push	{r3, lr}
 800dbf6:	2006      	movs	r0, #6
 800dbf8:	f000 fa08 	bl	800e00c <raise>
 800dbfc:	2001      	movs	r0, #1
 800dbfe:	f7f4 f9ef 	bl	8001fe0 <_exit>

0800dc02 <_malloc_usable_size_r>:
 800dc02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc06:	1f18      	subs	r0, r3, #4
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	bfbc      	itt	lt
 800dc0c:	580b      	ldrlt	r3, [r1, r0]
 800dc0e:	18c0      	addlt	r0, r0, r3
 800dc10:	4770      	bx	lr

0800dc12 <__sfputc_r>:
 800dc12:	6893      	ldr	r3, [r2, #8]
 800dc14:	3b01      	subs	r3, #1
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	b410      	push	{r4}
 800dc1a:	6093      	str	r3, [r2, #8]
 800dc1c:	da08      	bge.n	800dc30 <__sfputc_r+0x1e>
 800dc1e:	6994      	ldr	r4, [r2, #24]
 800dc20:	42a3      	cmp	r3, r4
 800dc22:	db01      	blt.n	800dc28 <__sfputc_r+0x16>
 800dc24:	290a      	cmp	r1, #10
 800dc26:	d103      	bne.n	800dc30 <__sfputc_r+0x1e>
 800dc28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc2c:	f000 b932 	b.w	800de94 <__swbuf_r>
 800dc30:	6813      	ldr	r3, [r2, #0]
 800dc32:	1c58      	adds	r0, r3, #1
 800dc34:	6010      	str	r0, [r2, #0]
 800dc36:	7019      	strb	r1, [r3, #0]
 800dc38:	4608      	mov	r0, r1
 800dc3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <__sfputs_r>:
 800dc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc42:	4606      	mov	r6, r0
 800dc44:	460f      	mov	r7, r1
 800dc46:	4614      	mov	r4, r2
 800dc48:	18d5      	adds	r5, r2, r3
 800dc4a:	42ac      	cmp	r4, r5
 800dc4c:	d101      	bne.n	800dc52 <__sfputs_r+0x12>
 800dc4e:	2000      	movs	r0, #0
 800dc50:	e007      	b.n	800dc62 <__sfputs_r+0x22>
 800dc52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc56:	463a      	mov	r2, r7
 800dc58:	4630      	mov	r0, r6
 800dc5a:	f7ff ffda 	bl	800dc12 <__sfputc_r>
 800dc5e:	1c43      	adds	r3, r0, #1
 800dc60:	d1f3      	bne.n	800dc4a <__sfputs_r+0xa>
 800dc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dc64 <_vfiprintf_r>:
 800dc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc68:	460d      	mov	r5, r1
 800dc6a:	b09d      	sub	sp, #116	@ 0x74
 800dc6c:	4614      	mov	r4, r2
 800dc6e:	4698      	mov	r8, r3
 800dc70:	4606      	mov	r6, r0
 800dc72:	b118      	cbz	r0, 800dc7c <_vfiprintf_r+0x18>
 800dc74:	6a03      	ldr	r3, [r0, #32]
 800dc76:	b90b      	cbnz	r3, 800dc7c <_vfiprintf_r+0x18>
 800dc78:	f7fc fd92 	bl	800a7a0 <__sinit>
 800dc7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc7e:	07d9      	lsls	r1, r3, #31
 800dc80:	d405      	bmi.n	800dc8e <_vfiprintf_r+0x2a>
 800dc82:	89ab      	ldrh	r3, [r5, #12]
 800dc84:	059a      	lsls	r2, r3, #22
 800dc86:	d402      	bmi.n	800dc8e <_vfiprintf_r+0x2a>
 800dc88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc8a:	f7fc ff04 	bl	800aa96 <__retarget_lock_acquire_recursive>
 800dc8e:	89ab      	ldrh	r3, [r5, #12]
 800dc90:	071b      	lsls	r3, r3, #28
 800dc92:	d501      	bpl.n	800dc98 <_vfiprintf_r+0x34>
 800dc94:	692b      	ldr	r3, [r5, #16]
 800dc96:	b99b      	cbnz	r3, 800dcc0 <_vfiprintf_r+0x5c>
 800dc98:	4629      	mov	r1, r5
 800dc9a:	4630      	mov	r0, r6
 800dc9c:	f000 f938 	bl	800df10 <__swsetup_r>
 800dca0:	b170      	cbz	r0, 800dcc0 <_vfiprintf_r+0x5c>
 800dca2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dca4:	07dc      	lsls	r4, r3, #31
 800dca6:	d504      	bpl.n	800dcb2 <_vfiprintf_r+0x4e>
 800dca8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcac:	b01d      	add	sp, #116	@ 0x74
 800dcae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb2:	89ab      	ldrh	r3, [r5, #12]
 800dcb4:	0598      	lsls	r0, r3, #22
 800dcb6:	d4f7      	bmi.n	800dca8 <_vfiprintf_r+0x44>
 800dcb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcba:	f7fc feed 	bl	800aa98 <__retarget_lock_release_recursive>
 800dcbe:	e7f3      	b.n	800dca8 <_vfiprintf_r+0x44>
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcc4:	2320      	movs	r3, #32
 800dcc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dcca:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcce:	2330      	movs	r3, #48	@ 0x30
 800dcd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800de80 <_vfiprintf_r+0x21c>
 800dcd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dcd8:	f04f 0901 	mov.w	r9, #1
 800dcdc:	4623      	mov	r3, r4
 800dcde:	469a      	mov	sl, r3
 800dce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dce4:	b10a      	cbz	r2, 800dcea <_vfiprintf_r+0x86>
 800dce6:	2a25      	cmp	r2, #37	@ 0x25
 800dce8:	d1f9      	bne.n	800dcde <_vfiprintf_r+0x7a>
 800dcea:	ebba 0b04 	subs.w	fp, sl, r4
 800dcee:	d00b      	beq.n	800dd08 <_vfiprintf_r+0xa4>
 800dcf0:	465b      	mov	r3, fp
 800dcf2:	4622      	mov	r2, r4
 800dcf4:	4629      	mov	r1, r5
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	f7ff ffa2 	bl	800dc40 <__sfputs_r>
 800dcfc:	3001      	adds	r0, #1
 800dcfe:	f000 80a7 	beq.w	800de50 <_vfiprintf_r+0x1ec>
 800dd02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd04:	445a      	add	r2, fp
 800dd06:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd08:	f89a 3000 	ldrb.w	r3, [sl]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f000 809f 	beq.w	800de50 <_vfiprintf_r+0x1ec>
 800dd12:	2300      	movs	r3, #0
 800dd14:	f04f 32ff 	mov.w	r2, #4294967295
 800dd18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd1c:	f10a 0a01 	add.w	sl, sl, #1
 800dd20:	9304      	str	r3, [sp, #16]
 800dd22:	9307      	str	r3, [sp, #28]
 800dd24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd28:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd2a:	4654      	mov	r4, sl
 800dd2c:	2205      	movs	r2, #5
 800dd2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd32:	4853      	ldr	r0, [pc, #332]	@ (800de80 <_vfiprintf_r+0x21c>)
 800dd34:	f7f2 fa4c 	bl	80001d0 <memchr>
 800dd38:	9a04      	ldr	r2, [sp, #16]
 800dd3a:	b9d8      	cbnz	r0, 800dd74 <_vfiprintf_r+0x110>
 800dd3c:	06d1      	lsls	r1, r2, #27
 800dd3e:	bf44      	itt	mi
 800dd40:	2320      	movmi	r3, #32
 800dd42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd46:	0713      	lsls	r3, r2, #28
 800dd48:	bf44      	itt	mi
 800dd4a:	232b      	movmi	r3, #43	@ 0x2b
 800dd4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd50:	f89a 3000 	ldrb.w	r3, [sl]
 800dd54:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd56:	d015      	beq.n	800dd84 <_vfiprintf_r+0x120>
 800dd58:	9a07      	ldr	r2, [sp, #28]
 800dd5a:	4654      	mov	r4, sl
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	f04f 0c0a 	mov.w	ip, #10
 800dd62:	4621      	mov	r1, r4
 800dd64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd68:	3b30      	subs	r3, #48	@ 0x30
 800dd6a:	2b09      	cmp	r3, #9
 800dd6c:	d94b      	bls.n	800de06 <_vfiprintf_r+0x1a2>
 800dd6e:	b1b0      	cbz	r0, 800dd9e <_vfiprintf_r+0x13a>
 800dd70:	9207      	str	r2, [sp, #28]
 800dd72:	e014      	b.n	800dd9e <_vfiprintf_r+0x13a>
 800dd74:	eba0 0308 	sub.w	r3, r0, r8
 800dd78:	fa09 f303 	lsl.w	r3, r9, r3
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	9304      	str	r3, [sp, #16]
 800dd80:	46a2      	mov	sl, r4
 800dd82:	e7d2      	b.n	800dd2a <_vfiprintf_r+0xc6>
 800dd84:	9b03      	ldr	r3, [sp, #12]
 800dd86:	1d19      	adds	r1, r3, #4
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	9103      	str	r1, [sp, #12]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	bfbb      	ittet	lt
 800dd90:	425b      	neglt	r3, r3
 800dd92:	f042 0202 	orrlt.w	r2, r2, #2
 800dd96:	9307      	strge	r3, [sp, #28]
 800dd98:	9307      	strlt	r3, [sp, #28]
 800dd9a:	bfb8      	it	lt
 800dd9c:	9204      	strlt	r2, [sp, #16]
 800dd9e:	7823      	ldrb	r3, [r4, #0]
 800dda0:	2b2e      	cmp	r3, #46	@ 0x2e
 800dda2:	d10a      	bne.n	800ddba <_vfiprintf_r+0x156>
 800dda4:	7863      	ldrb	r3, [r4, #1]
 800dda6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dda8:	d132      	bne.n	800de10 <_vfiprintf_r+0x1ac>
 800ddaa:	9b03      	ldr	r3, [sp, #12]
 800ddac:	1d1a      	adds	r2, r3, #4
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	9203      	str	r2, [sp, #12]
 800ddb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ddb6:	3402      	adds	r4, #2
 800ddb8:	9305      	str	r3, [sp, #20]
 800ddba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800de90 <_vfiprintf_r+0x22c>
 800ddbe:	7821      	ldrb	r1, [r4, #0]
 800ddc0:	2203      	movs	r2, #3
 800ddc2:	4650      	mov	r0, sl
 800ddc4:	f7f2 fa04 	bl	80001d0 <memchr>
 800ddc8:	b138      	cbz	r0, 800ddda <_vfiprintf_r+0x176>
 800ddca:	9b04      	ldr	r3, [sp, #16]
 800ddcc:	eba0 000a 	sub.w	r0, r0, sl
 800ddd0:	2240      	movs	r2, #64	@ 0x40
 800ddd2:	4082      	lsls	r2, r0
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	3401      	adds	r4, #1
 800ddd8:	9304      	str	r3, [sp, #16]
 800ddda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddde:	4829      	ldr	r0, [pc, #164]	@ (800de84 <_vfiprintf_r+0x220>)
 800dde0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dde4:	2206      	movs	r2, #6
 800dde6:	f7f2 f9f3 	bl	80001d0 <memchr>
 800ddea:	2800      	cmp	r0, #0
 800ddec:	d03f      	beq.n	800de6e <_vfiprintf_r+0x20a>
 800ddee:	4b26      	ldr	r3, [pc, #152]	@ (800de88 <_vfiprintf_r+0x224>)
 800ddf0:	bb1b      	cbnz	r3, 800de3a <_vfiprintf_r+0x1d6>
 800ddf2:	9b03      	ldr	r3, [sp, #12]
 800ddf4:	3307      	adds	r3, #7
 800ddf6:	f023 0307 	bic.w	r3, r3, #7
 800ddfa:	3308      	adds	r3, #8
 800ddfc:	9303      	str	r3, [sp, #12]
 800ddfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de00:	443b      	add	r3, r7
 800de02:	9309      	str	r3, [sp, #36]	@ 0x24
 800de04:	e76a      	b.n	800dcdc <_vfiprintf_r+0x78>
 800de06:	fb0c 3202 	mla	r2, ip, r2, r3
 800de0a:	460c      	mov	r4, r1
 800de0c:	2001      	movs	r0, #1
 800de0e:	e7a8      	b.n	800dd62 <_vfiprintf_r+0xfe>
 800de10:	2300      	movs	r3, #0
 800de12:	3401      	adds	r4, #1
 800de14:	9305      	str	r3, [sp, #20]
 800de16:	4619      	mov	r1, r3
 800de18:	f04f 0c0a 	mov.w	ip, #10
 800de1c:	4620      	mov	r0, r4
 800de1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de22:	3a30      	subs	r2, #48	@ 0x30
 800de24:	2a09      	cmp	r2, #9
 800de26:	d903      	bls.n	800de30 <_vfiprintf_r+0x1cc>
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d0c6      	beq.n	800ddba <_vfiprintf_r+0x156>
 800de2c:	9105      	str	r1, [sp, #20]
 800de2e:	e7c4      	b.n	800ddba <_vfiprintf_r+0x156>
 800de30:	fb0c 2101 	mla	r1, ip, r1, r2
 800de34:	4604      	mov	r4, r0
 800de36:	2301      	movs	r3, #1
 800de38:	e7f0      	b.n	800de1c <_vfiprintf_r+0x1b8>
 800de3a:	ab03      	add	r3, sp, #12
 800de3c:	9300      	str	r3, [sp, #0]
 800de3e:	462a      	mov	r2, r5
 800de40:	4b12      	ldr	r3, [pc, #72]	@ (800de8c <_vfiprintf_r+0x228>)
 800de42:	a904      	add	r1, sp, #16
 800de44:	4630      	mov	r0, r6
 800de46:	f7fb fe53 	bl	8009af0 <_printf_float>
 800de4a:	4607      	mov	r7, r0
 800de4c:	1c78      	adds	r0, r7, #1
 800de4e:	d1d6      	bne.n	800ddfe <_vfiprintf_r+0x19a>
 800de50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de52:	07d9      	lsls	r1, r3, #31
 800de54:	d405      	bmi.n	800de62 <_vfiprintf_r+0x1fe>
 800de56:	89ab      	ldrh	r3, [r5, #12]
 800de58:	059a      	lsls	r2, r3, #22
 800de5a:	d402      	bmi.n	800de62 <_vfiprintf_r+0x1fe>
 800de5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de5e:	f7fc fe1b 	bl	800aa98 <__retarget_lock_release_recursive>
 800de62:	89ab      	ldrh	r3, [r5, #12]
 800de64:	065b      	lsls	r3, r3, #25
 800de66:	f53f af1f 	bmi.w	800dca8 <_vfiprintf_r+0x44>
 800de6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de6c:	e71e      	b.n	800dcac <_vfiprintf_r+0x48>
 800de6e:	ab03      	add	r3, sp, #12
 800de70:	9300      	str	r3, [sp, #0]
 800de72:	462a      	mov	r2, r5
 800de74:	4b05      	ldr	r3, [pc, #20]	@ (800de8c <_vfiprintf_r+0x228>)
 800de76:	a904      	add	r1, sp, #16
 800de78:	4630      	mov	r0, r6
 800de7a:	f7fc f8d1 	bl	800a020 <_printf_i>
 800de7e:	e7e4      	b.n	800de4a <_vfiprintf_r+0x1e6>
 800de80:	0800e699 	.word	0x0800e699
 800de84:	0800e6a3 	.word	0x0800e6a3
 800de88:	08009af1 	.word	0x08009af1
 800de8c:	0800dc41 	.word	0x0800dc41
 800de90:	0800e69f 	.word	0x0800e69f

0800de94 <__swbuf_r>:
 800de94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de96:	460e      	mov	r6, r1
 800de98:	4614      	mov	r4, r2
 800de9a:	4605      	mov	r5, r0
 800de9c:	b118      	cbz	r0, 800dea6 <__swbuf_r+0x12>
 800de9e:	6a03      	ldr	r3, [r0, #32]
 800dea0:	b90b      	cbnz	r3, 800dea6 <__swbuf_r+0x12>
 800dea2:	f7fc fc7d 	bl	800a7a0 <__sinit>
 800dea6:	69a3      	ldr	r3, [r4, #24]
 800dea8:	60a3      	str	r3, [r4, #8]
 800deaa:	89a3      	ldrh	r3, [r4, #12]
 800deac:	071a      	lsls	r2, r3, #28
 800deae:	d501      	bpl.n	800deb4 <__swbuf_r+0x20>
 800deb0:	6923      	ldr	r3, [r4, #16]
 800deb2:	b943      	cbnz	r3, 800dec6 <__swbuf_r+0x32>
 800deb4:	4621      	mov	r1, r4
 800deb6:	4628      	mov	r0, r5
 800deb8:	f000 f82a 	bl	800df10 <__swsetup_r>
 800debc:	b118      	cbz	r0, 800dec6 <__swbuf_r+0x32>
 800debe:	f04f 37ff 	mov.w	r7, #4294967295
 800dec2:	4638      	mov	r0, r7
 800dec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dec6:	6823      	ldr	r3, [r4, #0]
 800dec8:	6922      	ldr	r2, [r4, #16]
 800deca:	1a98      	subs	r0, r3, r2
 800decc:	6963      	ldr	r3, [r4, #20]
 800dece:	b2f6      	uxtb	r6, r6
 800ded0:	4283      	cmp	r3, r0
 800ded2:	4637      	mov	r7, r6
 800ded4:	dc05      	bgt.n	800dee2 <__swbuf_r+0x4e>
 800ded6:	4621      	mov	r1, r4
 800ded8:	4628      	mov	r0, r5
 800deda:	f7ff fa53 	bl	800d384 <_fflush_r>
 800dede:	2800      	cmp	r0, #0
 800dee0:	d1ed      	bne.n	800debe <__swbuf_r+0x2a>
 800dee2:	68a3      	ldr	r3, [r4, #8]
 800dee4:	3b01      	subs	r3, #1
 800dee6:	60a3      	str	r3, [r4, #8]
 800dee8:	6823      	ldr	r3, [r4, #0]
 800deea:	1c5a      	adds	r2, r3, #1
 800deec:	6022      	str	r2, [r4, #0]
 800deee:	701e      	strb	r6, [r3, #0]
 800def0:	6962      	ldr	r2, [r4, #20]
 800def2:	1c43      	adds	r3, r0, #1
 800def4:	429a      	cmp	r2, r3
 800def6:	d004      	beq.n	800df02 <__swbuf_r+0x6e>
 800def8:	89a3      	ldrh	r3, [r4, #12]
 800defa:	07db      	lsls	r3, r3, #31
 800defc:	d5e1      	bpl.n	800dec2 <__swbuf_r+0x2e>
 800defe:	2e0a      	cmp	r6, #10
 800df00:	d1df      	bne.n	800dec2 <__swbuf_r+0x2e>
 800df02:	4621      	mov	r1, r4
 800df04:	4628      	mov	r0, r5
 800df06:	f7ff fa3d 	bl	800d384 <_fflush_r>
 800df0a:	2800      	cmp	r0, #0
 800df0c:	d0d9      	beq.n	800dec2 <__swbuf_r+0x2e>
 800df0e:	e7d6      	b.n	800debe <__swbuf_r+0x2a>

0800df10 <__swsetup_r>:
 800df10:	b538      	push	{r3, r4, r5, lr}
 800df12:	4b29      	ldr	r3, [pc, #164]	@ (800dfb8 <__swsetup_r+0xa8>)
 800df14:	4605      	mov	r5, r0
 800df16:	6818      	ldr	r0, [r3, #0]
 800df18:	460c      	mov	r4, r1
 800df1a:	b118      	cbz	r0, 800df24 <__swsetup_r+0x14>
 800df1c:	6a03      	ldr	r3, [r0, #32]
 800df1e:	b90b      	cbnz	r3, 800df24 <__swsetup_r+0x14>
 800df20:	f7fc fc3e 	bl	800a7a0 <__sinit>
 800df24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df28:	0719      	lsls	r1, r3, #28
 800df2a:	d422      	bmi.n	800df72 <__swsetup_r+0x62>
 800df2c:	06da      	lsls	r2, r3, #27
 800df2e:	d407      	bmi.n	800df40 <__swsetup_r+0x30>
 800df30:	2209      	movs	r2, #9
 800df32:	602a      	str	r2, [r5, #0]
 800df34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df38:	81a3      	strh	r3, [r4, #12]
 800df3a:	f04f 30ff 	mov.w	r0, #4294967295
 800df3e:	e033      	b.n	800dfa8 <__swsetup_r+0x98>
 800df40:	0758      	lsls	r0, r3, #29
 800df42:	d512      	bpl.n	800df6a <__swsetup_r+0x5a>
 800df44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df46:	b141      	cbz	r1, 800df5a <__swsetup_r+0x4a>
 800df48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df4c:	4299      	cmp	r1, r3
 800df4e:	d002      	beq.n	800df56 <__swsetup_r+0x46>
 800df50:	4628      	mov	r0, r5
 800df52:	f7fd fc05 	bl	800b760 <_free_r>
 800df56:	2300      	movs	r3, #0
 800df58:	6363      	str	r3, [r4, #52]	@ 0x34
 800df5a:	89a3      	ldrh	r3, [r4, #12]
 800df5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800df60:	81a3      	strh	r3, [r4, #12]
 800df62:	2300      	movs	r3, #0
 800df64:	6063      	str	r3, [r4, #4]
 800df66:	6923      	ldr	r3, [r4, #16]
 800df68:	6023      	str	r3, [r4, #0]
 800df6a:	89a3      	ldrh	r3, [r4, #12]
 800df6c:	f043 0308 	orr.w	r3, r3, #8
 800df70:	81a3      	strh	r3, [r4, #12]
 800df72:	6923      	ldr	r3, [r4, #16]
 800df74:	b94b      	cbnz	r3, 800df8a <__swsetup_r+0x7a>
 800df76:	89a3      	ldrh	r3, [r4, #12]
 800df78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800df7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df80:	d003      	beq.n	800df8a <__swsetup_r+0x7a>
 800df82:	4621      	mov	r1, r4
 800df84:	4628      	mov	r0, r5
 800df86:	f000 f883 	bl	800e090 <__smakebuf_r>
 800df8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df8e:	f013 0201 	ands.w	r2, r3, #1
 800df92:	d00a      	beq.n	800dfaa <__swsetup_r+0x9a>
 800df94:	2200      	movs	r2, #0
 800df96:	60a2      	str	r2, [r4, #8]
 800df98:	6962      	ldr	r2, [r4, #20]
 800df9a:	4252      	negs	r2, r2
 800df9c:	61a2      	str	r2, [r4, #24]
 800df9e:	6922      	ldr	r2, [r4, #16]
 800dfa0:	b942      	cbnz	r2, 800dfb4 <__swsetup_r+0xa4>
 800dfa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dfa6:	d1c5      	bne.n	800df34 <__swsetup_r+0x24>
 800dfa8:	bd38      	pop	{r3, r4, r5, pc}
 800dfaa:	0799      	lsls	r1, r3, #30
 800dfac:	bf58      	it	pl
 800dfae:	6962      	ldrpl	r2, [r4, #20]
 800dfb0:	60a2      	str	r2, [r4, #8]
 800dfb2:	e7f4      	b.n	800df9e <__swsetup_r+0x8e>
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	e7f7      	b.n	800dfa8 <__swsetup_r+0x98>
 800dfb8:	20000038 	.word	0x20000038

0800dfbc <_raise_r>:
 800dfbc:	291f      	cmp	r1, #31
 800dfbe:	b538      	push	{r3, r4, r5, lr}
 800dfc0:	4605      	mov	r5, r0
 800dfc2:	460c      	mov	r4, r1
 800dfc4:	d904      	bls.n	800dfd0 <_raise_r+0x14>
 800dfc6:	2316      	movs	r3, #22
 800dfc8:	6003      	str	r3, [r0, #0]
 800dfca:	f04f 30ff 	mov.w	r0, #4294967295
 800dfce:	bd38      	pop	{r3, r4, r5, pc}
 800dfd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dfd2:	b112      	cbz	r2, 800dfda <_raise_r+0x1e>
 800dfd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dfd8:	b94b      	cbnz	r3, 800dfee <_raise_r+0x32>
 800dfda:	4628      	mov	r0, r5
 800dfdc:	f000 f830 	bl	800e040 <_getpid_r>
 800dfe0:	4622      	mov	r2, r4
 800dfe2:	4601      	mov	r1, r0
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfea:	f000 b817 	b.w	800e01c <_kill_r>
 800dfee:	2b01      	cmp	r3, #1
 800dff0:	d00a      	beq.n	800e008 <_raise_r+0x4c>
 800dff2:	1c59      	adds	r1, r3, #1
 800dff4:	d103      	bne.n	800dffe <_raise_r+0x42>
 800dff6:	2316      	movs	r3, #22
 800dff8:	6003      	str	r3, [r0, #0]
 800dffa:	2001      	movs	r0, #1
 800dffc:	e7e7      	b.n	800dfce <_raise_r+0x12>
 800dffe:	2100      	movs	r1, #0
 800e000:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e004:	4620      	mov	r0, r4
 800e006:	4798      	blx	r3
 800e008:	2000      	movs	r0, #0
 800e00a:	e7e0      	b.n	800dfce <_raise_r+0x12>

0800e00c <raise>:
 800e00c:	4b02      	ldr	r3, [pc, #8]	@ (800e018 <raise+0xc>)
 800e00e:	4601      	mov	r1, r0
 800e010:	6818      	ldr	r0, [r3, #0]
 800e012:	f7ff bfd3 	b.w	800dfbc <_raise_r>
 800e016:	bf00      	nop
 800e018:	20000038 	.word	0x20000038

0800e01c <_kill_r>:
 800e01c:	b538      	push	{r3, r4, r5, lr}
 800e01e:	4d07      	ldr	r5, [pc, #28]	@ (800e03c <_kill_r+0x20>)
 800e020:	2300      	movs	r3, #0
 800e022:	4604      	mov	r4, r0
 800e024:	4608      	mov	r0, r1
 800e026:	4611      	mov	r1, r2
 800e028:	602b      	str	r3, [r5, #0]
 800e02a:	f7f3 ffc9 	bl	8001fc0 <_kill>
 800e02e:	1c43      	adds	r3, r0, #1
 800e030:	d102      	bne.n	800e038 <_kill_r+0x1c>
 800e032:	682b      	ldr	r3, [r5, #0]
 800e034:	b103      	cbz	r3, 800e038 <_kill_r+0x1c>
 800e036:	6023      	str	r3, [r4, #0]
 800e038:	bd38      	pop	{r3, r4, r5, pc}
 800e03a:	bf00      	nop
 800e03c:	2000509c 	.word	0x2000509c

0800e040 <_getpid_r>:
 800e040:	f7f3 bfb6 	b.w	8001fb0 <_getpid>

0800e044 <__swhatbuf_r>:
 800e044:	b570      	push	{r4, r5, r6, lr}
 800e046:	460c      	mov	r4, r1
 800e048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e04c:	2900      	cmp	r1, #0
 800e04e:	b096      	sub	sp, #88	@ 0x58
 800e050:	4615      	mov	r5, r2
 800e052:	461e      	mov	r6, r3
 800e054:	da0d      	bge.n	800e072 <__swhatbuf_r+0x2e>
 800e056:	89a3      	ldrh	r3, [r4, #12]
 800e058:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e05c:	f04f 0100 	mov.w	r1, #0
 800e060:	bf14      	ite	ne
 800e062:	2340      	movne	r3, #64	@ 0x40
 800e064:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e068:	2000      	movs	r0, #0
 800e06a:	6031      	str	r1, [r6, #0]
 800e06c:	602b      	str	r3, [r5, #0]
 800e06e:	b016      	add	sp, #88	@ 0x58
 800e070:	bd70      	pop	{r4, r5, r6, pc}
 800e072:	466a      	mov	r2, sp
 800e074:	f000 f848 	bl	800e108 <_fstat_r>
 800e078:	2800      	cmp	r0, #0
 800e07a:	dbec      	blt.n	800e056 <__swhatbuf_r+0x12>
 800e07c:	9901      	ldr	r1, [sp, #4]
 800e07e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e082:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e086:	4259      	negs	r1, r3
 800e088:	4159      	adcs	r1, r3
 800e08a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e08e:	e7eb      	b.n	800e068 <__swhatbuf_r+0x24>

0800e090 <__smakebuf_r>:
 800e090:	898b      	ldrh	r3, [r1, #12]
 800e092:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e094:	079d      	lsls	r5, r3, #30
 800e096:	4606      	mov	r6, r0
 800e098:	460c      	mov	r4, r1
 800e09a:	d507      	bpl.n	800e0ac <__smakebuf_r+0x1c>
 800e09c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e0a0:	6023      	str	r3, [r4, #0]
 800e0a2:	6123      	str	r3, [r4, #16]
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	6163      	str	r3, [r4, #20]
 800e0a8:	b003      	add	sp, #12
 800e0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0ac:	ab01      	add	r3, sp, #4
 800e0ae:	466a      	mov	r2, sp
 800e0b0:	f7ff ffc8 	bl	800e044 <__swhatbuf_r>
 800e0b4:	9f00      	ldr	r7, [sp, #0]
 800e0b6:	4605      	mov	r5, r0
 800e0b8:	4639      	mov	r1, r7
 800e0ba:	4630      	mov	r0, r6
 800e0bc:	f7fd fbc4 	bl	800b848 <_malloc_r>
 800e0c0:	b948      	cbnz	r0, 800e0d6 <__smakebuf_r+0x46>
 800e0c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0c6:	059a      	lsls	r2, r3, #22
 800e0c8:	d4ee      	bmi.n	800e0a8 <__smakebuf_r+0x18>
 800e0ca:	f023 0303 	bic.w	r3, r3, #3
 800e0ce:	f043 0302 	orr.w	r3, r3, #2
 800e0d2:	81a3      	strh	r3, [r4, #12]
 800e0d4:	e7e2      	b.n	800e09c <__smakebuf_r+0xc>
 800e0d6:	89a3      	ldrh	r3, [r4, #12]
 800e0d8:	6020      	str	r0, [r4, #0]
 800e0da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0de:	81a3      	strh	r3, [r4, #12]
 800e0e0:	9b01      	ldr	r3, [sp, #4]
 800e0e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e0e6:	b15b      	cbz	r3, 800e100 <__smakebuf_r+0x70>
 800e0e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	f000 f81d 	bl	800e12c <_isatty_r>
 800e0f2:	b128      	cbz	r0, 800e100 <__smakebuf_r+0x70>
 800e0f4:	89a3      	ldrh	r3, [r4, #12]
 800e0f6:	f023 0303 	bic.w	r3, r3, #3
 800e0fa:	f043 0301 	orr.w	r3, r3, #1
 800e0fe:	81a3      	strh	r3, [r4, #12]
 800e100:	89a3      	ldrh	r3, [r4, #12]
 800e102:	431d      	orrs	r5, r3
 800e104:	81a5      	strh	r5, [r4, #12]
 800e106:	e7cf      	b.n	800e0a8 <__smakebuf_r+0x18>

0800e108 <_fstat_r>:
 800e108:	b538      	push	{r3, r4, r5, lr}
 800e10a:	4d07      	ldr	r5, [pc, #28]	@ (800e128 <_fstat_r+0x20>)
 800e10c:	2300      	movs	r3, #0
 800e10e:	4604      	mov	r4, r0
 800e110:	4608      	mov	r0, r1
 800e112:	4611      	mov	r1, r2
 800e114:	602b      	str	r3, [r5, #0]
 800e116:	f7f3 ffb3 	bl	8002080 <_fstat>
 800e11a:	1c43      	adds	r3, r0, #1
 800e11c:	d102      	bne.n	800e124 <_fstat_r+0x1c>
 800e11e:	682b      	ldr	r3, [r5, #0]
 800e120:	b103      	cbz	r3, 800e124 <_fstat_r+0x1c>
 800e122:	6023      	str	r3, [r4, #0]
 800e124:	bd38      	pop	{r3, r4, r5, pc}
 800e126:	bf00      	nop
 800e128:	2000509c 	.word	0x2000509c

0800e12c <_isatty_r>:
 800e12c:	b538      	push	{r3, r4, r5, lr}
 800e12e:	4d06      	ldr	r5, [pc, #24]	@ (800e148 <_isatty_r+0x1c>)
 800e130:	2300      	movs	r3, #0
 800e132:	4604      	mov	r4, r0
 800e134:	4608      	mov	r0, r1
 800e136:	602b      	str	r3, [r5, #0]
 800e138:	f7f3 ffb2 	bl	80020a0 <_isatty>
 800e13c:	1c43      	adds	r3, r0, #1
 800e13e:	d102      	bne.n	800e146 <_isatty_r+0x1a>
 800e140:	682b      	ldr	r3, [r5, #0]
 800e142:	b103      	cbz	r3, 800e146 <_isatty_r+0x1a>
 800e144:	6023      	str	r3, [r4, #0]
 800e146:	bd38      	pop	{r3, r4, r5, pc}
 800e148:	2000509c 	.word	0x2000509c

0800e14c <_init>:
 800e14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e14e:	bf00      	nop
 800e150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e152:	bc08      	pop	{r3}
 800e154:	469e      	mov	lr, r3
 800e156:	4770      	bx	lr

0800e158 <_fini>:
 800e158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e15a:	bf00      	nop
 800e15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e15e:	bc08      	pop	{r3}
 800e160:	469e      	mov	lr, r3
 800e162:	4770      	bx	lr
